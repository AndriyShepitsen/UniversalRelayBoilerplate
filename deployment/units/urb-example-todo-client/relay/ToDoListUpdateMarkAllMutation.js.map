{"version":3,"sources":["../../../../units/urb-example-todo-client/relay/ToDoListUpdateMarkAllMutation.js"],"names":["mutation","commit","environment","user","ToDos","ToDo_Complete","status","variables","input","updater","store","userProxy","get","id","connection","getConnection","ToDosEdges","getRootField","getLinkedRecord","getLinkedRecords","setLinkedRecords","optimisticUpdater","optimisticResponse","payload","Viewer","ToDo_CompletedCount","changedToDos","edges","filter","node","map","ToDo_TotalCount","ToDoListUpdateMarkAll"],"mappings":";;AAEA;AACA;;AAEA,GAAMA,uGAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,QAASC,OAAT,CAAgBC,WAAhB,CAA6BC,IAA7B,CAAmCC,KAAnC,CAA0CC,aAA1C,CAAyDC,MAAzD,CAAiE;AAC/D,MAAO,+BAAeJ,WAAf,CAA4B;AACjCF,iBADiC;AAEjCO,UAAW;AACTC,MAAO,CAAEH,2BAAF,CADE;AAETC,aAFS,CAFsB;;;AAOjCG,OAPiC,kBAOzBC,KAPyB,CAOlB;AACb,GAAMC,WAAYD,MAAME,GAAN,CAAUT,KAAKU,EAAf,CAAlB;AACA,GAAMC,YAAa,gCAAkBC,aAAlB;AACjBJ,SADiB;AAEjB,gBAFiB;AAGjB,CAAEL,aAAF,CAHiB,CAAnB;;AAKA,GAAMU,YAAaN;AAChBO,YADgB,CACH,uBADG;AAEhBC,eAFgB,CAEA,QAFA;AAGhBA,eAHgB,CAGA,OAHA,CAGS,CAAEZ,aAAF,CAHT;AAIhBa,gBAJgB,CAIC,OAJD,CAAnB;AAKAL,WAAWM,gBAAX,CAA4BJ,UAA5B,CAAwC,OAAxC;AACD,CApBgC;;AAsBjCK,iBAtBiC,4BAsBfX,KAtBe,CAsBR;AACvB,GAAMC,WAAYD,MAAME,GAAN,CAAUT,KAAKU,EAAf,CAAlB;AACA,GAAMC,YAAa,gCAAkBC,aAAlB;AACjBJ,SADiB;AAEjB,gBAFiB;AAGjB,CAAEL,aAAF,CAHiB,CAAnB;;;AAMA;AACGD,eAAiBC,SAAW,QAA7B;AACC,CAACD,aAAD,EAAkBC,SAAW,WAFhC;AAGE;AACAQ,WAAWM,gBAAX,CAA4B,EAA5B,CAAgC,OAAhC;AACD;AACF,CApCgC;;AAsCjCE,kBAtCiC,8BAsCZ;AACnB,GAAMC,SAAU;AACdC,OAAQ;AACNX,GAAIV,KAAKU,EADH;AAENY,oBAAqB,CAFf,CADM;;AAKdC,aAAc,IALA,CAAhB;;;AAQA,GAAItB,OAASA,MAAMuB,KAAnB,CAA0B;AACxBJ,QAAQG,YAAR,CAAuBtB,MAAMuB,KAAN;AACpBC,MADoB,CACb,kBAAGC,KAAH,MAAGA,IAAH,OAAcA,MAAKxB,aAAL,GAAuBA,aAArC,EADa;AAEpByB,GAFoB,CAEhB,mBAAGD,KAAH,OAAGA,IAAH,OAAe,CAAEhB,GAAIgB,KAAKhB,EAAX,CAAeR,2BAAf,CAAf,EAFgB,CAAvB;AAGD;;AAED,GAAIA,aAAJ,CAAmB;AACjB,GAAIF,KAAK4B,eAAL,EAAwB,IAA5B,CAAkC;AAChCR,QAAQC,MAAR,CAAeC,mBAAf,CAAqCtB,KAAK4B,eAA1C;AACD;AACF,CAJD,IAIO;AACLR,QAAQC,MAAR,CAAeC,mBAAf,CAAqC,CAArC;AACD;;AAED,MAAO;AACLO,sBAAuBT,OADlB,CAAP;;AAGD,CAhEgC,CAA5B,CAAP;;AAkED,C;;AAEc,CAAEtB,aAAF,C","file":"ToDoListUpdateMarkAllMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation ToDoListUpdateMarkAllMutation(\n    $input: ToDoListUpdateMarkAllInput!\n    $status: String!\n  ) {\n    ToDoListUpdateMarkAll(input: $input) {\n      Viewer {\n        ToDos(status: $status) {\n          edges {\n            node {\n              id\n              ToDo_Complete\n              ToDo_Text\n            }\n          }\n        }\n        id\n        ToDo_CompletedCount\n      }\n      changedToDos {\n        id\n        ToDo_Complete\n      }\n    }\n  }\n`\n\nfunction commit(environment, user, ToDos, ToDo_Complete, status) {\n  return commitMutation(environment, {\n    mutation,\n    variables: {\n      input: { ToDo_Complete },\n      status,\n    },\n\n    updater(store) {\n      const userProxy = store.get(user.id)\n      const connection = ConnectionHandler.getConnection(\n        userProxy,\n        'ToDoList_ToDos',\n        { status }\n      )\n      const ToDosEdges = store\n        .getRootField('ToDoListUpdateMarkAll')\n        .getLinkedRecord('Viewer')\n        .getLinkedRecord('ToDos', { status })\n        .getLinkedRecords('edges')\n      connection.setLinkedRecords(ToDosEdges, 'edges')\n    },\n\n    optimisticUpdater(store) {\n      const userProxy = store.get(user.id)\n      const connection = ConnectionHandler.getConnection(\n        userProxy,\n        'ToDoList_ToDos',\n        { status }\n      )\n\n      if (\n        (ToDo_Complete && status === 'active') ||\n        (!ToDo_Complete && status === 'completed')\n      ) {\n        connection.setLinkedRecords([], 'edges')\n      }\n    },\n\n    optimisticResponse() {\n      const payload = {\n        Viewer: {\n          id: user.id,\n          ToDo_CompletedCount: 0,\n        },\n        changedToDos: null,\n      }\n\n      if (ToDos && ToDos.edges) {\n        payload.changedToDos = ToDos.edges\n          .filter(({ node }) => node.ToDo_Complete !== ToDo_Complete)\n          .map(({ node }) => ({ id: node.id, ToDo_Complete }))\n      }\n\n      if (ToDo_Complete) {\n        if (user.ToDo_TotalCount != null) {\n          payload.Viewer.ToDo_CompletedCount = user.ToDo_TotalCount\n        }\n      } else {\n        payload.Viewer.ToDo_CompletedCount = 0\n      }\n\n      return {\n        ToDoListUpdateMarkAll: payload,\n      }\n    },\n  })\n}\n\nexport default { commit }\n"]}