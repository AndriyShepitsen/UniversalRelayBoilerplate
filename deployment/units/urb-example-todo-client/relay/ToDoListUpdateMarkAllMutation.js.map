{"version":3,"sources":["../../../../units/urb-example-todo-client/relay/ToDoListUpdateMarkAllMutation.js"],"names":["mutation","commit","environment","user","ToDos","ToDo_Complete","status","variables","input","updater","store","userProxy","get","id","connection","getConnection","ToDosEdges","getRootField","getLinkedRecord","getLinkedRecords","setLinkedRecords","optimisticUpdater","optimisticResponse","payload","Viewer","ToDo_CompletedCount","changedToDos","edges","filter","node","map","ToDo_TotalCount","ToDoListUpdateMarkAll"],"mappings":";;AAEA;AACA;;AAEA,GAAMA,uGAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,QAASC,OAAT,CAAiBC,WAAjB,CAA8BC,IAA9B,CAAoCC,KAApC,CAA2CC,aAA3C,CAA0DC,MAA1D,CAAmE;AACjE,MAAO,+BAAgBJ,WAAhB,CAA6B;AAClCF,iBADkC;AAElCO,UAAW;AACTC,MAAO,CAAEH,2BAAF,CADE;AAETC,aAFS,CAFuB;;;AAOlCG,OAPkC,kBAOzBC,KAPyB,CAOjB;AACf,GAAMC,WAAYD,MAAME,GAAN,CAAWT,KAAKU,EAAhB,CAAlB;AACA,GAAMC,YAAa,gCAAkBC,aAAlB;AACjBJ,SADiB;AAEjB,gBAFiB;AAGjB,CAAEL,aAAF,CAHiB,CAAnB;;AAKA,GAAMU,YAAaN;AAChBO,YADgB,CACF,uBADE;AAEhBC,eAFgB,CAEC,QAFD;AAGhBA,eAHgB,CAGC,OAHD,CAGU,CAAEZ,aAAF,CAHV;AAIhBa,gBAJgB,CAIE,OAJF,CAAnB;AAKAL,WAAWM,gBAAX,CAA6BJ,UAA7B,CAAyC,OAAzC;AACD,CApBiC;;AAsBlCK,iBAtBkC,4BAsBfX,KAtBe,CAsBP;AACzB,GAAMC,WAAYD,MAAME,GAAN,CAAWT,KAAKU,EAAhB,CAAlB;AACA,GAAMC,YAAa,gCAAkBC,aAAlB;AACjBJ,SADiB;AAEjB,gBAFiB;AAGjB,CAAEL,aAAF,CAHiB,CAAnB;;;AAMA;AACID,eAAiBC,SAAW,QAA9B;AACE,CAACD,aAAD,EAAkBC,SAAW,WAFjC;AAGE;AACAQ,WAAWM,gBAAX,CAA4B,EAA5B,CAAgC,OAAhC;AACD;AACF,CApCiC;;AAsClCE,kBAtCkC,8BAsCb;AACnB,GAAMC,SAAU;AACdC,OAAQ;AACNX,GAAIV,KAAKU,EADH;AAENY,oBAAqB,CAFf,CADM;;AAKdC,aAAc,IALA,CAAhB;;;AAQA,GAAKtB,OAASA,MAAMuB,KAApB,CAA4B;AAC1BJ,QAAQG,YAAR,CAAuBtB,MAAMuB,KAAN;AACpBC,MADoB,CACZ,kBAAGC,KAAH,MAAGA,IAAH,OAAcA,MAAKxB,aAAL,GAAuBA,aAArC,EADY;AAEpByB,GAFoB,CAEf,mBAAGD,KAAH,OAAGA,IAAH,OAAe,CAAEhB,GAAIgB,KAAKhB,EAAX,CAAeR,2BAAf,CAAf,EAFe,CAAvB;AAGD;;AAED,GAAKA,aAAL,CAAqB;AACnB,GAAKF,KAAK4B,eAAL,EAAwB,IAA7B,CAAoC;AAClCR,QAAQC,MAAR,CAAeC,mBAAf,CAAqCtB,KAAK4B,eAA1C;AACD;AACF,CAJD,IAIO;AACLR,QAAQC,MAAR,CAAeC,mBAAf,CAAqC,CAArC;AACD;;AAED,MAAO;AACLO,sBAAuBT,OADlB,CAAP;;AAGD,CAhEiC,CAA7B,CAAP;;AAkED,C;;AAEc,CAAEtB,aAAF,C","file":"ToDoListUpdateMarkAllMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation ToDoListUpdateMarkAllMutation(\n    $input: ToDoListUpdateMarkAllInput!\n    $status: String!\n  ) {\n    ToDoListUpdateMarkAll(input: $input) {\n      Viewer {\n        ToDos(status: $status) {\n          edges {\n            node {\n              id\n              ToDo_Complete\n              ToDo_Text\n            }\n          }\n        }\n        id\n        ToDo_CompletedCount\n      }\n      changedToDos {\n        id\n        ToDo_Complete\n      }\n    }\n  }\n`\n\nfunction commit( environment, user, ToDos, ToDo_Complete, status ) {\n  return commitMutation( environment, {\n    mutation,\n    variables: {\n      input: { ToDo_Complete },\n      status,\n    },\n\n    updater( store ) {\n      const userProxy = store.get( user.id )\n      const connection = ConnectionHandler.getConnection(\n        userProxy,\n        'ToDoList_ToDos',\n        { status }\n      )\n      const ToDosEdges = store\n        .getRootField( 'ToDoListUpdateMarkAll' )\n        .getLinkedRecord( 'Viewer' )\n        .getLinkedRecord( 'ToDos', { status })\n        .getLinkedRecords( 'edges' )\n      connection.setLinkedRecords( ToDosEdges, 'edges' )\n    },\n\n    optimisticUpdater( store ) {\n      const userProxy = store.get( user.id )\n      const connection = ConnectionHandler.getConnection(\n        userProxy,\n        'ToDoList_ToDos',\n        { status }\n      )\n\n      if (\n        ( ToDo_Complete && status === 'active' ) ||\n        ( !ToDo_Complete && status === 'completed' )\n      ) {\n        connection.setLinkedRecords([], 'edges' )\n      }\n    },\n\n    optimisticResponse() {\n      const payload = {\n        Viewer: {\n          id: user.id,\n          ToDo_CompletedCount: 0,\n        },\n        changedToDos: null,\n      }\n\n      if ( ToDos && ToDos.edges ) {\n        payload.changedToDos = ToDos.edges\n          .filter( ({ node }) => node.ToDo_Complete !== ToDo_Complete )\n          .map( ({ node }) => ({ id: node.id, ToDo_Complete }) )\n      }\n\n      if ( ToDo_Complete ) {\n        if ( user.ToDo_TotalCount != null ) {\n          payload.Viewer.ToDo_CompletedCount = user.ToDo_TotalCount\n        }\n      } else {\n        payload.Viewer.ToDo_CompletedCount = 0\n      }\n\n      return {\n        ToDoListUpdateMarkAll: payload,\n      }\n    },\n  })\n}\n\nexport default { commit }\n"]}