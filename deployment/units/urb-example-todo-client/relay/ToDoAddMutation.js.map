{"version":3,"sources":["../../../../units/urb-example-todo-client/relay/ToDoAddMutation.js"],"names":["mutation","sharedUpdater","store","user","ToDosEdge","userProxy","get","id","forEach","connection","getConnection","status","insertEdgeAfter","nextClientMutationId","commit","environment","ToDo_Text","clientMutationId","variables","input","updater","payload","getRootField","getLinkedRecord","optimisticUpdater","aToDo","create","setValue","setLinkedRecord","ToDo_TotalCount","getValue"],"mappings":";;AAEA;AACA;;AAEA,GAAMA,yFAAN;;;;;;;;;;;;;;;;;;;AAmBA,QAASC,cAAT,CAAwBC,KAAxB,CAA+BC,IAA/B,CAAqCC,SAArC,CAAiD;AAC/C,GAAMC,WAAYH,MAAMI,GAAN,CAAWH,KAAKI,EAAhB,CAAlB;AACC,CAAE,KAAF,CAAS,QAAT,EAAoBC,OAApB,CAA6B,gBAAU;AACtC,GAAMC,YAAa,gCAAkBC,aAAlB;AACjBL,SADiB;AAEjB,gBAFiB;AAGjB,CAAEM,aAAF,CAHiB,CAAnB;;AAKA,GAAKF,UAAL,CAAkB;AAChB,gCAAkBG,eAAlB,CAAmCH,UAAnC,CAA+CL,SAA/C;AACD;AACF,CATA;AAUF;;AAED,GAAIS,sBAAuB,CAA3B;;AAEA,QAASC,OAAT,CAAiBC,WAAjB,CAA8BZ,IAA9B,CAAoCa,SAApC,CAAgD;AAC9C,GAAMC,kBAAmBJ,sBAAzB;;AAEA,MAAO,+BAAgBE,WAAhB,CAA6B;AAClCf,iBADkC;AAElCkB,UAAW;AACTC,MAAO,CAAEH,mBAAF,CAAaC,iCAAb,CADE,CAFuB;;;AAMlCG,OANkC,kBAMzBlB,KANyB,CAMjB;AACf,GAAMmB,SAAUnB,MAAMoB,YAAN,CAAoB,SAApB,CAAhB;AACArB,cAAeC,KAAf,CAAsBC,IAAtB,CAA4BkB,QAAQE,eAAR,CAAyB,WAAzB,CAA5B;AACD,CATiC;;AAWlCC,iBAXkC,4BAWftB,KAXe,CAWP;AACzB,GAAMK,2BAA4BU,gBAAlC;AACA,GAAMQ,OAAQvB,MAAMwB,MAAN,CAAcnB,EAAd,CAAkB,MAAlB,CAAd;AACAkB,MAAME,QAAN,CAAgBX,SAAhB,CAA2B,WAA3B;AACAS,MAAME,QAAN,CAAgBpB,EAAhB,CAAoB,IAApB;;AAEA,GAAMH,WAAYF,MAAMwB,MAAN;AACYT,gBADZ;AAEhB,WAFgB,CAAlB;;AAIAb,UAAUwB,eAAV,CAA2BH,KAA3B,CAAkC,MAAlC;;AAEAxB,cAAeC,KAAf,CAAsBC,IAAtB,CAA4BC,SAA5B;;AAEA,GAAMC,WAAYH,MAAMI,GAAN,CAAWH,KAAKI,EAAhB,CAAlB;AACA,GAAMsB,iBAAkBxB,UAAUyB,QAAV,CAAoB,iBAApB,CAAxB;AACA,GAAKD,iBAAmB,IAAxB,CAA+B;AAC7BxB,UAAUsB,QAAV,CAAoBE,gBAAkB,CAAtC,CAAyC,iBAAzC;AACD;AACF,CA9BiC,CAA7B,CAAP;;AAgCD,C;;AAEc,CAAEf,aAAF,C","file":"ToDoAddMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation ToDoAddMutation($input: ToDoAddInput!) {\n    ToDoAdd(input: $input) {\n      Viewer {\n        id\n        ToDo_TotalCount\n      }\n      ToDosEdge {\n        cursor\n        node {\n          id\n          ToDo_Complete\n          ToDo_Text\n        }\n      }\n    }\n  }\n`\n\nfunction sharedUpdater( store, user, ToDosEdge ) {\n  const userProxy = store.get( user.id )\n  ;[ 'any', 'active' ].forEach( status => {\n    const connection = ConnectionHandler.getConnection(\n      userProxy,\n      'ToDoList_ToDos',\n      { status }\n    )\n    if ( connection ) {\n      ConnectionHandler.insertEdgeAfter( connection, ToDosEdge )\n    }\n  })\n}\n\nlet nextClientMutationId = 0\n\nfunction commit( environment, user, ToDo_Text ) {\n  const clientMutationId = nextClientMutationId++\n\n  return commitMutation( environment, {\n    mutation,\n    variables: {\n      input: { ToDo_Text, clientMutationId },\n    },\n\n    updater( store ) {\n      const payload = store.getRootField( 'ToDoAdd' )\n      sharedUpdater( store, user, payload.getLinkedRecord( 'ToDosEdge' ) )\n    },\n\n    optimisticUpdater( store ) {\n      const id = `client:ToDoAdd:ToDo:${clientMutationId}`\n      const aToDo = store.create( id, 'ToDo' )\n      aToDo.setValue( ToDo_Text, 'ToDo_Text' )\n      aToDo.setValue( id, 'id' )\n\n      const ToDosEdge = store.create(\n        `client:ToDoAdd:ToDosEdge:${clientMutationId}`,\n        'ToDosEdge'\n      )\n      ToDosEdge.setLinkedRecord( aToDo, 'node' )\n\n      sharedUpdater( store, user, ToDosEdge )\n\n      const userProxy = store.get( user.id )\n      const ToDo_TotalCount = userProxy.getValue( 'ToDo_TotalCount' )\n      if ( ToDo_TotalCount != null ) {\n        userProxy.setValue( ToDo_TotalCount + 1, 'ToDo_TotalCount' )\n      }\n    },\n  })\n}\n\nexport default { commit }\n"]}