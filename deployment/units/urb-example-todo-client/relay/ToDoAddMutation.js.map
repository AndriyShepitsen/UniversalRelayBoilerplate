{"version":3,"sources":["../../../../units/urb-example-todo-client/relay/ToDoAddMutation.js"],"names":["mutation","sharedUpdater","store","user","ToDosEdge","userProxy","get","id","forEach","connection","getConnection","status","insertEdgeAfter","nextClientMutationId","commit","environment","ToDo_Text","clientMutationId","variables","input","updater","payload","getRootField","getLinkedRecord","optimisticUpdater","aToDo","create","setValue","setLinkedRecord","ToDo_TotalCount","getValue"],"mappings":";;AAEA;AACA;;AAEA,GAAMA,yFAAN;;;;;;;;;;;;;;;;;;;AAmBA,QAASC,cAAT,CAAuBC,KAAvB,CAA8BC,IAA9B,CAAoCC,SAApC,CAA+C;AAC7C,GAAMC,WAAYH,MAAMI,GAAN,CAAUH,KAAKI,EAAf,CAAlB;AACC,CAAC,KAAD,CAAQ,QAAR,EAAkBC,OAAlB,CAA0B,gBAAU;AACnC,GAAMC,YAAa,gCAAkBC,aAAlB,CAAgCL,SAAhC,CAA2C,gBAA3C,CAA6D,CAAEM,aAAF,CAA7D,CAAnB;AACA,GAAIF,UAAJ,CAAgB;AACd,gCAAkBG,eAAlB,CAAkCH,UAAlC,CAA8CL,SAA9C;AACD;AACF,CALA;AAMF;;AAED,GAAIS,sBAAuB,CAA3B;;AAEA,QAASC,OAAT,CAAgBC,WAAhB,CAA6BZ,IAA7B,CAAmCa,SAAnC,CAA8C;AAC5C,GAAMC,kBAAmBJ,sBAAzB;;AAEA,MAAO,+BAAeE,WAAf,CAA4B;AACjCf,iBADiC;AAEjCkB,UAAW;AACTC,MAAO,CAAEH,mBAAF,CAAaC,iCAAb,CADE,CAFsB;;;AAMjCG,OANiC,kBAMzBlB,KANyB,CAMlB;AACb,GAAMmB,SAAUnB,MAAMoB,YAAN,CAAmB,SAAnB,CAAhB;AACArB,cAAcC,KAAd,CAAqBC,IAArB,CAA2BkB,QAAQE,eAAR,CAAwB,WAAxB,CAA3B;AACD,CATgC;;AAWjCC,iBAXiC,4BAWftB,KAXe,CAWR;AACvB,GAAMK,2BAA4BU,gBAAlC;AACA,GAAMQ,OAAQvB,MAAMwB,MAAN,CAAanB,EAAb,CAAiB,MAAjB,CAAd;AACAkB,MAAME,QAAN,CAAeX,SAAf,CAA0B,WAA1B;AACAS,MAAME,QAAN,CAAepB,EAAf,CAAmB,IAAnB;;AAEA,GAAMH,WAAYF,MAAMwB,MAAN,6BAAyCT,gBAAzC,CAA6D,WAA7D,CAAlB;AACAb,UAAUwB,eAAV,CAA0BH,KAA1B,CAAiC,MAAjC;;AAEAxB,cAAcC,KAAd,CAAqBC,IAArB,CAA2BC,SAA3B;;AAEA,GAAMC,WAAYH,MAAMI,GAAN,CAAUH,KAAKI,EAAf,CAAlB;AACA,GAAMsB,iBAAkBxB,UAAUyB,QAAV,CAAmB,iBAAnB,CAAxB;AACA,GAAID,iBAAmB,IAAvB,CAA6B;AAC3BxB,UAAUsB,QAAV,CAAmBE,gBAAkB,CAArC,CAAwC,iBAAxC;AACD;AACF,CA3BgC,CAA5B,CAAP;;AA6BD,C;;AAEc,CAAEf,aAAF,C,oIAjETd,Q,oGAmBGC,a,yGAULY,oB,gHAEKC,M","file":"ToDoAddMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation ToDoAddMutation($input: ToDoAddInput!) {\n    ToDoAdd(input: $input) {\n      Viewer {\n        id\n        ToDo_TotalCount\n      }\n      ToDosEdge {\n        cursor\n        node {\n          id\n          ToDo_Complete\n          ToDo_Text\n        }\n      }\n    }\n  }\n`\n\nfunction sharedUpdater(store, user, ToDosEdge) {\n  const userProxy = store.get(user.id)\n  ;['any', 'active'].forEach(status => {\n    const connection = ConnectionHandler.getConnection(userProxy, 'ToDoList_ToDos', { status })\n    if (connection) {\n      ConnectionHandler.insertEdgeAfter(connection, ToDosEdge)\n    }\n  })\n}\n\nlet nextClientMutationId = 0\n\nfunction commit(environment, user, ToDo_Text) {\n  const clientMutationId = nextClientMutationId++\n\n  return commitMutation(environment, {\n    mutation,\n    variables: {\n      input: { ToDo_Text, clientMutationId },\n    },\n\n    updater(store) {\n      const payload = store.getRootField('ToDoAdd')\n      sharedUpdater(store, user, payload.getLinkedRecord('ToDosEdge'))\n    },\n\n    optimisticUpdater(store) {\n      const id = `client:ToDoAdd:ToDo:${clientMutationId}`\n      const aToDo = store.create(id, 'ToDo')\n      aToDo.setValue(ToDo_Text, 'ToDo_Text')\n      aToDo.setValue(id, 'id')\n\n      const ToDosEdge = store.create(`client:ToDoAdd:ToDosEdge:${clientMutationId}`, 'ToDosEdge')\n      ToDosEdge.setLinkedRecord(aToDo, 'node')\n\n      sharedUpdater(store, user, ToDosEdge)\n\n      const userProxy = store.get(user.id)\n      const ToDo_TotalCount = userProxy.getValue('ToDo_TotalCount')\n      if (ToDo_TotalCount != null) {\n        userProxy.setValue(ToDo_TotalCount + 1, 'ToDo_TotalCount')\n      }\n    },\n  })\n}\n\nexport default { commit }\n"]}