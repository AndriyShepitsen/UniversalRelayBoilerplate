{"version":3,"sources":["../../../../units/urb-example-todo-client/relay/ToDoUpdateStatusMutation.js"],"names":["mutation","sharedUpdater","store","user","proxyToDo","userProxy","get","id","status","getValue","connection","getConnection","deleteNode","commit","environment","aToDo","ToDo_Complete","variables","input","updater","payload","getRootField","getLinkedRecord","optimisticUpdater","setValue","ToDo_CompletedCount"],"mappings":";;AAEA;AACA;;AAEA,GAAMA,kGAAN;;;;;;;;;;;;;;;AAeA,QAASC,cAAT,CAAuBC,KAAvB,CAA8BC,IAA9B,CAAoCC,SAApC,CAA+C;;;AAG7C,GAAMC,WAAYH,MAAMI,GAAN,CAAUH,KAAKI,EAAf,CAAlB;AACA,GAAMC,QAASJ,UAAUK,QAAV,CAAmB,UAAnB,EAAiC,QAAjC,CAA4C,WAA3D;AACA,GAAMC,YAAa,gCAAkBC,aAAlB,CAAgCN,SAAhC,CAA2C,gBAA3C,CAA6D,CAAEG,aAAF,CAA7D,CAAnB;AACA,GAAIE,UAAJ,CAAgB;AACd,gCAAkBE,UAAlB,CAA6BF,UAA7B,CAAyCN,UAAUK,QAAV,CAAmB,IAAnB,CAAzC;AACD;AACF;;AAED,QAASI,OAAT,CAAgBC,WAAhB,CAA6BX,IAA7B,CAAmCY,KAAnC,CAA0CC,aAA1C,CAAyD;AACvD,MAAO,+BAAeF,WAAf,CAA4B;AACjCd,iBADiC;AAEjCiB,UAAW;AACTC,MAAO,CAAEX,GAAIQ,MAAMR,EAAZ,CAAgBS,2BAAhB,CADE,CAFsB;;;AAMjCG,OANiC,kBAMzBjB,KANyB,CAMlB;AACb,GAAMkB,SAAUlB,MAAMmB,YAAN,CAAmB,kBAAnB,CAAhB;AACApB,cAAcC,KAAd,CAAqBC,IAArB,CAA2BiB,QAAQE,eAAR,CAAwB,MAAxB,CAA3B;AACD,CATgC;;AAWjCC,iBAXiC,4BAWfrB,KAXe,CAWR;AACvB,GAAME,WAAYF,MAAMI,GAAN,CAAUS,MAAMR,EAAhB,CAAlB;AACAH,UAAUoB,QAAV,CAAmBR,aAAnB,CAAkC,UAAlC;AACAf,cAAcC,KAAd,CAAqBC,IAArB,CAA2BC,SAA3B;;AAEA,GAAMC,WAAYH,MAAMI,GAAN,CAAUH,KAAKI,EAAf,CAAlB;AACA,GAAMkB,qBAAsBpB,UAAUI,QAAV,CAAmB,qBAAnB,CAA5B;AACA,GAAIgB,qBAAuB,IAA3B,CAAiC;AAC/BpB,UAAUmB,QAAV,CAAmBC,qBAAuBT,cAAgB,CAAhB,CAAoB,CAAC,CAA5C,CAAnB,CAAmE,qBAAnE;AACD;AACF,CArBgC,CAA5B,CAAP;;AAuBD,C;;AAEc,CAAEH,aAAF,C","file":"ToDoUpdateStatusMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation ToDoUpdateStatusMutation($input: ToDoUpdateStatusInput!) {\n    ToDoUpdateStatus(input: $input) {\n      Viewer {\n        id\n        ToDo_CompletedCount\n      }\n      ToDo {\n        id\n        ToDo_Complete\n      }\n    }\n  }\n`\n\nfunction sharedUpdater(store, user, proxyToDo) {\n  // In principle this could add to the active connection, but such an\n  // interaction is not possible from the front end.\n  const userProxy = store.get(user.id)\n  const status = proxyToDo.getValue('complete') ? 'active' : 'completed'\n  const connection = ConnectionHandler.getConnection(userProxy, 'ToDoList_ToDos', { status })\n  if (connection) {\n    ConnectionHandler.deleteNode(connection, proxyToDo.getValue('id'))\n  }\n}\n\nfunction commit(environment, user, aToDo, ToDo_Complete) {\n  return commitMutation(environment, {\n    mutation,\n    variables: {\n      input: { id: aToDo.id, ToDo_Complete },\n    },\n\n    updater(store) {\n      const payload = store.getRootField('ToDoUpdateStatus')\n      sharedUpdater(store, user, payload.getLinkedRecord('ToDo'))\n    },\n\n    optimisticUpdater(store) {\n      const proxyToDo = store.get(aToDo.id)\n      proxyToDo.setValue(ToDo_Complete, 'complete')\n      sharedUpdater(store, user, proxyToDo)\n\n      const userProxy = store.get(user.id)\n      const ToDo_CompletedCount = userProxy.getValue('ToDo_CompletedCount')\n      if (ToDo_CompletedCount != null) {\n        userProxy.setValue(ToDo_CompletedCount + (ToDo_Complete ? 1 : -1), 'ToDo_CompletedCount')\n      }\n    },\n  })\n}\n\nexport default { commit }\n"]}