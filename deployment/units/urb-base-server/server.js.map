{"version":3,"sources":["../../../units/urb-base-server/server.js"],"names":["require","load","port","process","env","PORT","Error","host","HOST","log","name","version","NODE_ENV","PUBLIC_URL","process_title","title","process_pid","pid","local_ip","server","use","req","res","next","setHeader","set","static","resolve","__dirname","maxAge","initializePersisters","listen","startDevelopmentServer","localIPDevelopmentServer","console"],"mappings":";;;AAGA;;AAEA,gC;AACA,wC;AACA,2C;AACA,+C;AACA,0B;;AAEA,wC;AACA,wC;AACA,8C;AACA,8C;AACA,0B;AACA,sD;AACA;AACA,6D;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;AAEA,GAAMC,MAAOC,QAAQC,GAAR,CAAYC,IAAzB;AACA,GAAIH,MAAQ,IAAR,EAAgB,MAAOA,KAAP,GAAgB,QAApC;AACE,KAAM,IAAII,MAAJ,CAAU,gFAAV,CAAN;;AAEF,GAAMC,MAAOJ,QAAQC,GAAR,CAAYI,IAAzB;AACA,GAAID,MAAQ,IAAR,EAAgB,MAAOA,KAAP,GAAgB,QAApC;AACE,KAAM,IAAID,MAAJ,CAAU,gFAAV,CAAN;;;AAGF,cAAIG,GAAJ,CAAQ,MAAR,CAAgB,sBAAhB,CAAwC;AACtCC,kBADsC;AAEtCC,wBAFsC;;AAItCC,SAAUT,QAAQC,GAAR,CAAYQ,QAJgB;AAKtCJ,KAAML,QAAQC,GAAR,CAAYI,IALoB;AAMtCH,KAAMF,QAAQC,GAAR,CAAYC,IANoB;AAOtCQ,WAAYV,QAAQC,GAAR,CAAYS,UAPc;;AAStCC,cAAeX,QAAQY,KATe;AAUtCC,YAAab,QAAQc,GAViB;AAWtCC,SAAU,0BAX4B,CAAxC;;;;AAeA,GAAMC,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAW,SAASC,GAAT,CAAcC,GAAd,CAAmBC,IAAnB,CAAyB;;AAElCD,IAAIE,SAAJ,CAAc,6BAAd,CAA6CrB,QAAQC,GAAR,CAAYS,UAAzD;;AAEAS,IAAIE,SAAJ,CAAc,8BAAd,CAA8C,wCAA9C;;AAEAF,IAAIE,SAAJ,CAAc,8BAAd,CAA8C,+BAA9C;;;AAGAF,IAAIE,SAAJ,CAAc,kCAAd,CAAkD,IAAlD;;AAEAD;AACD,CAZD;;;AAeAJ,OAAOM,GAAP,CAAW,aAAX,CAA0B,UAA1B;AACAN,OAAOM,GAAP,CAAW,cAAX,CAA2B,KAA3B;AACAN,OAAOC,GAAP,CAAW,2BAAX;AACAD,OAAOC,GAAP,CAAW,4BAAX;;;AAGAD,OAAOC,GAAP,CAAW,UAAX;;;AAGAD,OAAOC,GAAP,CAAW,OAAX;;;AAGAD,OAAOC,GAAP,CAAW,UAAX;;;AAGAD,OAAOC,GAAP;AACE,kBAAQM,MAAR,CAAe,eAAKC,OAAL,CAAaC,UAAY,kDAAzB,CAAf,CAA6F;AAC3FC,OAAQ,IAAM,QAD6E,CAA7F,CADF;;;;;AAOAV,OAAOC,GAAP;;;AAGA,wBAAcU,oBAAd,CAAmC,KAAnC,CAA0C,UAAM;;;AAG9C,GAAI3B,QAAQC,GAAR,CAAYQ,QAAZ,EAAwB,YAA5B,CAA0C;;AAExCO,OAAOY,MAAP,CAAc7B,IAAd,CAAoBK,IAApB;AACD,CAHD,IAGO;;AAELyB,uBAAuB9B,IAAvB,CAA6B,WAA7B;;;AAGA,GAAIK,MAAQ,WAAZ,CAAyByB,uBAAuB9B,IAAvB,CAA6BK,IAA7B;AAC1B;AACF,CAbD;;AAeA,QAASyB,uBAAT,CAAgC9B,IAAhC,CAAsCK,IAAtC,CAA4C;AAC1C,GAAM0B,0BAA2B,uBAAjC;AACAA,yBAAyBb,GAAzB,CAA6BD,MAA7B;AACAc,yBAAyBF,MAAzB,CAAgC7B,IAAhC,CAAsCK,IAAtC;AACA2B,QAAQzB,GAAR,CAAY,uCAAyCF,IAArD;AACD","file":"server.js","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport express from 'express'\nimport compression from 'compression'\nimport cookieParser from 'cookie-parser'\nimport graphQLHTTP from 'express-graphql'\nimport path from 'path'\n\nimport serverAuth from './serverAuth' // Authentication server\nimport getLocalIP from './getLocalIP'\nimport graphql from './serverGraphQL' // GraphQL server\nimport serverHealthz from './serverHealthz' // Health check endpoint server\nimport log from './log'\nimport ObjectManager from './graphql/ObjectManager'\nimport { name, version } from '../_configuration/package'\nimport serverWebApp from '../urb-base-webapp/serverWebApp' // Isomorphic React server\n\n// Read environment\nrequire('dotenv').load()\n\nconst port = process.env.PORT\nif (port == null || typeof port !== 'string')\n  throw new Error('ðŸ’”  urb-base-server/server.js requires the environment variable PORT to be set')\n\nconst host = process.env.HOST\nif (host == null || typeof host !== 'string')\n  throw new Error('ðŸ’”  urb-base-server/server.js requires the environment variable HOST to be set')\n\n// Log startup information\nlog.log('info', 'Starting application', {\n  name: name,\n  version: version,\n\n  NODE_ENV: process.env.NODE_ENV,\n  HOST: process.env.HOST,\n  PORT: process.env.PORT,\n  PUBLIC_URL: process.env.PUBLIC_URL,\n\n  process_title: process.title,\n  process_pid: process.pid,\n  local_ip: getLocalIP(),\n})\n\n// Main router\nconst server = express()\n\n// Add headers\nserver.use(function(req, res, next) {\n  // Website you wish to allow to connect\n  res.setHeader('Access-Control-Allow-Origin', process.env.PUBLIC_URL)\n  // Request methods you wish to allow\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n  // Request headers you wish to allow\n  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n  // Set to true if you need the website to include cookies in the requests sent\n  // to the API (e.g. in case you use sessions)\n  res.setHeader('Access-Control-Allow-Credentials', true)\n  // Pass to next layer of middleware\n  next()\n})\n\n// Configure main router\nserver.set('trust proxy', 'loopback')\nserver.set('x-powered-by', false)\nserver.use(compression())\nserver.use(cookieParser())\n\n// GraphQL server\nserver.use('/graphql', graphql)\n\n// Authentication server\nserver.use('/auth', serverAuth)\n\n// Health check endpoint\nserver.use('/healthz', serverHealthz)\n\n// Staticpublic files server\nserver.use(\n  express.static(path.resolve(__dirname + '/../_configuration/urb-base-server/public_files/'), {\n    maxAge: 365 * 86400000, // one year\n  }),\n)\n\n// Application with routes\nserver.use(serverWebApp)\n\n// Set up all persisters\nObjectManager.initializePersisters(false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if (process.env.NODE_ENV == 'production') {\n    // Production - serve as told\n    server.listen(port, host)\n  } else {\n    // Development server - localhost. Always run on localhost\n    startDevelopmentServer(port, '127.0.0.1')\n\n    // Development server - on a specific IP, if different from localhost\n    if (host != '127.0.0.1') startDevelopmentServer(port, host)\n  }\n})\n\nfunction startDevelopmentServer(port, host) {\n  const localIPDevelopmentServer = express()\n  localIPDevelopmentServer.use(server)\n  localIPDevelopmentServer.listen(port, host)\n  console.log('â˜„  DEVELOPMENT. Server listening on ' + host)\n}\n"]}