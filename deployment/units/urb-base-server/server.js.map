{"version":3,"sources":["../../../units/urb-base-server/server.js"],"names":["require","load","port","process","env","PORT","router","use","initializePersisters","NODE_ENV","listen","HOST","localhostDevelopmentServer","console","log","localIPDevelopmentServer"],"mappings":";;;AAGA;;AAEA,gC;AACA,+C;;AAEA,kC;AACA,sD;AACA,iD;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;AAEA,GAAMC,MAAOC,QAAQC,GAAR,CAAYC,IAAzB;;AAEA,GAAMC,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAW,UAAX;;;AAGAD,OAAOC,GAAP;;;AAGA,wBAAcC,oBAAd,CAAmC,KAAnC,CAA0C,UAAM;;;AAG9C,GAAIL,QAAQC,GAAR,CAAYK,QAAZ,EAAwB,YAA5B,CAA0CH,OAAOI,MAAP,CAAcP,QAAQC,GAAR,CAAYC,IAA1B,CAAgCF,QAAQC,GAAR,CAAYO,IAA5C,EAA1C;AACK;;AAEH,GAAMC,4BAA6B,uBAAnC;AACAA,2BAA2BL,GAA3B,CAA+BD,MAA/B;AACAM,2BAA2BF,MAA3B,CAAkCP,QAAQC,GAAR,CAAYC,IAA9C,CAAoD,WAApD;AACAQ,QAAQC,GAAR,CAAY,+CAAZ;;;AAGA,GAAIX,QAAQC,GAAR,CAAYO,IAAZ,EAAoB,WAAxB,CAAqC;AACnC,GAAMI,0BAA2B,uBAAjC;AACAA,yBAAyBR,GAAzB,CAA6BD,MAA7B;AACAS,yBAAyBL,MAAzB,CAAgCP,QAAQC,GAAR,CAAYC,IAA5C,CAAkDF,QAAQC,GAAR,CAAYO,IAA9D;AACAE,QAAQC,GAAR,CAAY,uCAAyCX,QAAQC,GAAR,CAAYO,IAAjE;AACD;AACF;AACF,CAnBD","file":"server.js","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport graphql from './graphQL' // GraphQL server\nimport ObjectManager from './graphql/ObjectManager'\nimport webapp from '../urb-base-webapp/server' // Isomorphic React server\n\n// Read environment\nrequire('dotenv').load()\n\nconst port = process.env.PORT\n\nconst router = express()\n\n// GraphQL server\nrouter.use('/graphql', graphql)\n\n// Application with routes\nrouter.use(webapp)\n\n// Set up all persisters\nObjectManager.initializePersisters(false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if (process.env.NODE_ENV == 'production') router.listen(process.env.PORT, process.env.HOST)\n  else {\n    // Development server - localhost\n    const localhostDevelopmentServer = express()\n    localhostDevelopmentServer.use(router)\n    localhostDevelopmentServer.listen(process.env.PORT, '127.0.0.1')\n    console.log('☄  DEVELOPMENT. Server listening on 127.0.0.1')\n\n    // Development server - on a specific IP, if different from localhost\n    if (process.env.HOST != '127.0.0.1') {\n      const localIPDevelopmentServer = express()\n      localIPDevelopmentServer.use(router)\n      localIPDevelopmentServer.listen(process.env.PORT, process.env.HOST)\n      console.log('☄  DEVELOPMENT. Server listening on ' + process.env.HOST)\n    }\n  }\n})\n"]}