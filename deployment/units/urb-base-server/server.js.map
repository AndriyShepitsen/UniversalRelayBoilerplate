{"version":3,"sources":["../../../units/urb-base-server/server.js"],"names":["require","load","port","process","env","PORT","router","use","oneYear","static","resolve","__dirname","maxAge","initializePersisters","NODE_ENV","listen","HOST","localhostDevelopmentServer","console","log","localIPDevelopmentServer"],"mappings":";;;AAGA;;AAEA,gC;AACA,+C;AACA,0B;;AAEA,4B;AACA,kC;AACA,kC;AACA,sD;AACA,iD;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;AAEA,GAAMC,MAAOC,QAAQC,GAAR,CAAYC,IAAzB;;AAEA,GAAMC,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAW,UAAX;;;AAGAD,OAAOC,GAAP,CAAW,OAAX;;;AAGAD,OAAOC,GAAP,CAAW,UAAX;;;AAGA,GAAIC,SAAU,IAAM,QAApB;AACAF,OAAOC,GAAP;AACE,kBAAQE,MAAR,CAAe,eAAKC,OAAL,CAAaC,UAAY,kDAAzB,CAAf,CAA6F;AAC3FC,OAAQJ,OADmF,CAA7F,CADF;;;;;AAOAF,OAAOC,GAAP;;;AAGA,wBAAcM,oBAAd,CAAmC,KAAnC,CAA0C,UAAM;;;AAG9C,GAAIV,QAAQC,GAAR,CAAYU,QAAZ,EAAwB,YAA5B,CAA0CR,OAAOS,MAAP,CAAcZ,QAAQC,GAAR,CAAYC,IAA1B,CAAgCF,QAAQC,GAAR,CAAYY,IAA5C,EAA1C;AACK;;AAEH,GAAMC,4BAA6B,uBAAnC;AACAA,2BAA2BV,GAA3B,CAA+BD,MAA/B;AACAW,2BAA2BF,MAA3B,CAAkCZ,QAAQC,GAAR,CAAYC,IAA9C,CAAoD,WAApD;AACAa,QAAQC,GAAR,CAAY,+CAAZ;;;AAGA,GAAIhB,QAAQC,GAAR,CAAYY,IAAZ,EAAoB,WAAxB,CAAqC;AACnC,GAAMI,0BAA2B,uBAAjC;AACAA,yBAAyBb,GAAzB,CAA6BD,MAA7B;AACAc,yBAAyBL,MAAzB,CAAgCZ,QAAQC,GAAR,CAAYC,IAA5C,CAAkDF,QAAQC,GAAR,CAAYY,IAA9D;AACAE,QAAQC,GAAR,CAAY,uCAAyChB,QAAQC,GAAR,CAAYY,IAAjE;AACD;AACF;AACF,CAnBD","file":"server.js","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\nimport path from 'path'\n\nimport auth from './auth' // Authentication server\nimport graphql from './graphQL' // GraphQL server\nimport healthz from './healthz' // Health check endpoint server\nimport ObjectManager from './graphql/ObjectManager'\nimport webapp from '../urb-base-webapp/server' // Isomorphic React server\n\n// Read environment\nrequire('dotenv').load()\n\nconst port = process.env.PORT\n\nconst router = express()\n\n// GraphQL server\nrouter.use('/graphql', graphql)\n\n// Authentication server\nrouter.use('/auth', auth)\n\n// Health check endpoint\nrouter.use('/healthz', healthz)\n\n// Static assets server\nlet oneYear = 365 * 86400000\nrouter.use(\n  express.static(path.resolve(__dirname + '/../_configuration/urb-base-server/public_files/'), {\n    maxAge: oneYear,\n  }),\n)\n\n// Application with routes\nrouter.use(webapp)\n\n// Set up all persisters\nObjectManager.initializePersisters(false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if (process.env.NODE_ENV == 'production') router.listen(process.env.PORT, process.env.HOST)\n  else {\n    // Development server - localhost\n    const localhostDevelopmentServer = express()\n    localhostDevelopmentServer.use(router)\n    localhostDevelopmentServer.listen(process.env.PORT, '127.0.0.1')\n    console.log('☄  DEVELOPMENT. Server listening on 127.0.0.1')\n\n    // Development server - on a specific IP, if different from localhost\n    if (process.env.HOST != '127.0.0.1') {\n      const localIPDevelopmentServer = express()\n      localIPDevelopmentServer.use(router)\n      localIPDevelopmentServer.listen(process.env.PORT, process.env.HOST)\n      console.log('☄  DEVELOPMENT. Server listening on ' + process.env.HOST)\n    }\n  }\n})\n"]}