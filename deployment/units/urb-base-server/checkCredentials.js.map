{"version":3,"sources":["../../../units/urb-base-server/checkCredentials.js"],"names":["getUserAndSessionIDByUserToken1","verifyUserAuthToken","serveAuthenticationFailed","require","load","getSessionIdFromRequest","req","UserToken1","cookies","headers","usertoken1","length","decoded","decode","process","env","JWT_SECRET","uuidFromString","session_id","err","objectManager","a_UserSession","getOneObject","id","UserSession_site_id","siteInformation","site_id","user_id","UserSession_User_id","uuidNull","User_site_id","a_User","setViewerUserId","User","UserSession","Error","JSON","stringify","Promise","reject","request_UserToken2","get","UserToken2","ip","USER_TOKEN_2_BYPASS_IP","resolve","httpError403FileName","__dirname","res","respondWithJSON","connection","remoteAddress","requestDetails","query","body","log","errorMessage","message","errorStack","stack","cookie","httpOnly","expires","Date","status","send","sendFile"],"mappings":"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","file":"checkCredentials.js","sourcesContent":["// @flow weak\n\nimport path from 'path'\n\nimport jwt from 'jwt-simple'\n\nimport defaultPersister from '../_configuration/urb-base-server/graphql/defaultPersister'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\n\nimport log from './log'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nfunction getSessionIdFromRequest( req: Object ): ?string {\n  const UserToken1 = req.cookies.UserToken1 || req.headers.usertoken1\n  if ( UserToken1 )\n    try {\n      if ( UserToken1.length > 10 ) {\n        const decoded = jwt.decode( UserToken1, process.env.JWT_SECRET )\n        return defaultPersister.uuidFromString( decoded.session_id )\n      }\n    } catch ( err ) {\n      // Do nothing. This most probably means an expired session, or\n      // new session secret. Either way the user is consindered not logged in\n    }\n  return null // Anonymous, unless cookie is passed\n}\n\nexport async function getUserAndSessionIDByUserToken1( objectManager, req ) {\n  // Get session, and if session is present, user from session\n  const session_id = getSessionIdFromRequest( req )\n  let a_UserSession = null\n  if ( session_id )\n    a_UserSession = await objectManager.getOneObject( 'UserSession', {\n      id: session_id,\n      UserSession_site_id: objectManager.siteInformation.site_id,\n    })\n\n  const user_id = a_UserSession\n    ? a_UserSession.UserSession_User_id\n    : defaultPersister.uuidNull()\n\n  const a_User = await objectManager.getOneObject( 'User', {\n    id: user_id,\n    User_site_id: objectManager.siteInformation.site_id,\n  })\n\n  if ( a_User ) {\n    objectManager.setViewerUserId( user_id )\n    return { User: a_User, UserSession: a_UserSession }\n  } else {\n    throw new Error( 'ðŸ’”  User ' + JSON.stringify( user_id ) + ' not found' )\n  }\n}\n\nexport function verifyUserAuthToken( a_User, req ) {\n  if ( !a_User ) return Promise.reject( 'ðŸ’”  User not found' )\n  else {\n    const request_UserToken2 = req.get( 'UserToken2' )\n    if (\n      request_UserToken2 === a_User.UserToken2 ||\n      // A request coming from webapp will come from localhost and will bear the server's user token\n      ( req.ip === '127.0.0.1' &&\n        request_UserToken2 === UserToken2ServerRendering ) ||\n      // For use with GraphiQL\n      process.env.USER_TOKEN_2_BYPASS_IP === req.ip\n    )\n      return Promise.resolve( a_User.id )\n    else\n      return Promise.reject(\n        'ðŸ’”  Authentication token expected: ' +\n          a_User.UserToken2 +\n          ', provided:' +\n          request_UserToken2\n      )\n  }\n}\n\nconst httpError403FileName = path.resolve(\n  __dirname,\n  '../_configuration/urb-base-server/httpError/403.html'\n)\n\nexport function serveAuthenticationFailed( req, res, err, respondWithJSON ) {\n  // Collect information about the request\n  var ip = req.headers['x-real-ip'] || req.connection.remoteAddress\n\n  const requestDetails = {\n    headers: req.headers,\n    cookies: req.cookies,\n    ip: ip,\n    query: req.body,\n  }\n\n  log.log( 'warn', 'Checking credentials failed', {\n    errorMessage: err.message,\n    errorStack: err.stack,\n    requestDetails,\n  })\n\n  // Expire cookie. This is the only way to 'delete' a cookie\n  res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n\n  if ( respondWithJSON )\n    res.status( 403 ).send( '{ \"error\": \"ðŸ’”  Authentication Failed\" }' )\n  else res.status( 403 ).sendFile( httpError403FileName )\n}\n"]}