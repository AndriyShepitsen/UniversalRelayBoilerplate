{"version":3,"sources":["../../../units/urb-base-server/checkCredentials.js"],"names":["getUserByCookie","verifyUserAuthToken","serveAuthenticationFailed","require","load","objectManager","req","user_id","uuidNull","getOneObject","id","User_site_id","siteInformation","site_id","then","a_User","setViewerUserId","Promise","reject","request_UserToken2","get","UserToken2","process","env","USER_TOKEN_2_BYPASS_IP","ip","resolve","httpError403FileName","__dirname","res","error","respondWithJSON","headers","connection","remoteAddress","requestDetails","cookies","query","body","log","cookie","httpOnly","expires","Date","status","send","sendFile"],"mappings":";;;;;;;;;;;AAWgBA,e,CAAAA,e;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAC,mB,CAAAA,mB;;;;;;;;;;;;;;;;;;;;;AAqBAC,yB,CAAAA,yB,CA3DhB,qC,mDACA,0B,yCAEA,8F,iEACA,0B,0HAGAC,QAAQ,QAAR,EAAkBC,IAAlB,GAEO,QAASJ,gBAAT,CAAyBK,aAAzB,CAAwCC,GAAxC,CAA6C,CAClD,GAAIC,SAAU,2BAAiBC,QAAjB,EAAd,CAeA,MAAOH,eACJI,YADI,CACS,MADT,CACiB,CACpBC,GAAIH,OADgB,CAEpBI,aAAcN,cAAcO,eAAd,CAA8BC,OAFxB,CADjB,EAKJC,IALI,CAKC,gBAAU,CACd,GAAIC,MAAJ,CAAY,CACVV,cAAcW,eAAd,CAA8BT,OAA9B,EACA,MAAOQ,OAAP,CACD,CAHD,IAGO,OAAOE,SAAQC,MAAR,CAAe,oBAAf,CAAP,CACR,CAVI,CAAP,CAWD,CAEM,QAASjB,oBAAT,CAA6Bc,MAA7B,CAAqCT,GAArC,CAA0C,CAC/C,GAAI,CAACS,MAAL,CAAa,MAAOE,SAAQC,MAAR,CAAe,oBAAf,CAAP,CAAb,IACK,CACH,GAAMC,oBAAqBb,IAAIc,GAAJ,CAAQ,YAAR,CAA3B,CACA,GAAID,oBAAsBJ,OAAOM,UAA7B,EAA2CC,QAAQC,GAAR,CAAYC,sBAAZ,EAAsClB,IAAImB,EAAzF,CACE,MAAOR,SAAQS,OAAR,CAAgBX,OAAOL,EAAvB,CAAP,CADF,IAGE,OAAOO,SAAQC,MAAR,CACL,sCACEH,OAAOM,UADT,CAEE,aAFF,CAGEF,kBAJG,CAAP,CAMH,CACF,CAED,GAAMQ,sBAAuB,eAAKD,OAAL,CAC3BE,SAD2B,CAE3B,2DAF2B,CAA7B,CAKO,QAAS1B,0BAAT,CAAmCI,GAAnC,CAAwCuB,GAAxC,CAA6CC,KAA7C,CAAoDC,eAApD,CAAqE;;AAE1E,GAAIN,IAAKnB,IAAI0B,OAAJ,CAAY,WAAZ,GAA4B1B,IAAI2B,UAAJ,CAAeC,aAApD;;AAEA,GAAMC,gBAAiB;AACrBH,QAAS1B,IAAI0B,OADQ;AAErBI,QAAS9B,IAAI8B,OAFQ;AAGrBX,GAAIA,EAHiB;AAIrBY,MAAO/B,IAAIgC,IAJU,CAAvB;;;AAOA,cAAIC,GAAJ,CAAQ,MAAR,CAAgB,6BAAhB,CAA+C,CAAET,WAAF,CAASK,6BAAT,CAA/C;;;AAGAN,IAAIW,MAAJ,CAAW,YAAX,CAAyB,EAAzB,CAA6B,CAAEC,SAAU,IAAZ,CAAkBC,QAAS,GAAIC,KAAJ,CAAS,CAAT,CAA3B,CAA7B;;AAEA,GAAIZ,eAAJ,CAAqBF,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0CAArB,EAArB;AACKhB,IAAIe,MAAJ,CAAW,GAAX,EAAgBE,QAAhB,CAAyBnB,oBAAzB;AACN,C,0GApEe3B,e,8FA6BAC,mB,kGAgBV0B,oB,mGAKUzB,yB","file":"checkCredentials.js","sourcesContent":["// @flow weak\n\nimport jwt from 'jwt-simple'\nimport path from 'path'\n\nimport defaultPersister from '../../configuration/urb-base-server/graphql/defaultPersister'\nimport log from './log'\n\n// Read environment\nrequire('dotenv').load()\n\nexport function getUserByCookie(objectManager, req) {\n  let user_id = defaultPersister.uuidNull() // Anonymous, unless cookie is passed\n\n  // ZZZ\n  /*\n  try {\n    if (req.cookies.UserToken1)\n      if (req.cookies.UserToken1.length > 10) {\n        var decoded = jwt.decode(req.cookies.UserToken1, process.env.JWT_SECRET)\n        user_id = defaultPersister.uuidFromString(decoded.user_id)\n      }\n  } catch (err) {\n    return Promise.reject('ðŸ’”  Could not read auth cookie. ' + err)\n  }\n  */\n\n  return objectManager\n    .getOneObject('User', {\n      id: user_id,\n      User_site_id: objectManager.siteInformation.site_id,\n    })\n    .then(a_User => {\n      if (a_User) {\n        objectManager.setViewerUserId(user_id)\n        return a_User\n      } else return Promise.reject('ðŸ’”  User not found')\n    })\n}\n\nexport function verifyUserAuthToken(a_User, req) {\n  if (!a_User) return Promise.reject('ðŸ’”  User not found')\n  else {\n    const request_UserToken2 = req.get('UserToken2')\n    if (request_UserToken2 == a_User.UserToken2 || process.env.USER_TOKEN_2_BYPASS_IP == req.ip)\n      return Promise.resolve(a_User.id)\n    else\n      return Promise.reject(\n        'ðŸ’”  Authentication token expected: ' +\n          a_User.UserToken2 +\n          ', provided:' +\n          request_UserToken2,\n      )\n  }\n}\n\nconst httpError403FileName = path.resolve(\n  __dirname,\n  '../configuration/units/urb-base-server/httpError/403.html',\n)\n\nexport function serveAuthenticationFailed(req, res, error, respondWithJSON) {\n  // Collect information about the request\n  var ip = req.headers['x-real-ip'] || req.connection.remoteAddress\n\n  const requestDetails = {\n    headers: req.headers,\n    cookies: req.cookies,\n    ip: ip,\n    query: req.body,\n  }\n\n  log.log('warn', 'Checking credentials failed', { error, requestDetails })\n\n  // Expire cookie. This is the only way to 'delete' a cookie\n  res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n\n  if (respondWithJSON) res.status(403).send('{ \"error\": \"ðŸ’”  Authentication Failed\" }')\n  else res.status(403).sendFile(httpError403FileName)\n}\n"]}