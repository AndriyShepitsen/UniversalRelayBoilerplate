{"version":3,"sources":["../../../units/urb-base-server/checkCredentials.js"],"names":["getUserAndSessionIDByUserToken1","verifyUserAuthToken","serveAuthenticationFailed","require","load","getSessionIdFromRequest","req","UserToken1","cookies","headers","usertoken1","length","decoded","decode","process","env","JWT_SECRET","uuidFromString","session_id","err","Error","objectManager","user_id","a_UserSession","getOneObject","id","UserSession_site_id","siteInformation","site_id","UserSession_User_id","uuidNull","User_site_id","a_User","setViewerUserId","User","UserSession","Promise","reject","request_UserToken2","get","UserToken2","ip","USER_TOKEN_2_BYPASS_IP","resolve","httpError403FileName","__dirname","res","error","respondWithJSON","connection","remoteAddress","requestDetails","query","body","log","cookie","httpOnly","expires","Date","status","send","sendFile"],"mappings":"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","file":"checkCredentials.js","sourcesContent":["// @flow weak\n\nimport jwt from 'jwt-simple'\nimport path from 'path'\n\nimport defaultPersister from '../_configuration/urb-base-server/graphql/defaultPersister'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\nimport log from './log'\n\n// Read environment\nrequire('dotenv').load()\n\nfunction getSessionIdFromRequest(req) {\n  const UserToken1 = req.cookies.UserToken1 || req.headers.usertoken1\n  if (UserToken1)\n    try {\n      if (UserToken1.length > 10) {\n        const decoded = jwt.decode(UserToken1, process.env.JWT_SECRET)\n        return defaultPersister.uuidFromString(decoded.session_id)\n      }\n    } catch (err) {\n      // ZZZ Log information to DB\n      throw new Error('ðŸ’”  Session cookie is invalid. Please log in again.')\n    }\n  return null // Anonymous, unless cookie is passed\n}\n\nexport async function getUserAndSessionIDByUserToken1(objectManager, req) {\n  let user_id\n\n  // Get session, and if session is present, user from session\n  const session_id = getSessionIdFromRequest(req)\n  let a_UserSession = null\n  if (session_id) {\n    a_UserSession = await objectManager.getOneObject('UserSession', {\n      id: session_id,\n      UserSession_site_id: objectManager.siteInformation.site_id,\n    })\n    user_id = a_UserSession.UserSession_User_id\n  } else {\n    user_id = defaultPersister.uuidNull()\n  }\n\n  const a_User = await objectManager.getOneObject('User', {\n    id: user_id,\n    User_site_id: objectManager.siteInformation.site_id,\n  })\n\n  if (a_User) {\n    objectManager.setViewerUserId(user_id)\n    return { User: a_User, UserSession: a_UserSession }\n  } else {\n    throw 'ðŸ’”  User not found'\n  }\n}\n\nexport function verifyUserAuthToken(a_User, req) {\n  if (!a_User) return Promise.reject('ðŸ’”  User not found')\n  else {\n    const request_UserToken2 = req.get('UserToken2')\n    if (\n      request_UserToken2 == a_User.UserToken2 ||\n      // A request coming from webapp will come from localhost and will bear the server's user token\n      (req.ip == '127.0.0.1' && request_UserToken2 == UserToken2ServerRendering) ||\n      // For use with GraphiQL\n      process.env.USER_TOKEN_2_BYPASS_IP == req.ip\n    )\n      return Promise.resolve(a_User.id)\n    else\n      return Promise.reject(\n        'ðŸ’”  Authentication token expected: ' +\n          a_User.UserToken2 +\n          ', provided:' +\n          request_UserToken2,\n      )\n  }\n}\n\nconst httpError403FileName = path.resolve(\n  __dirname,\n  '../_configuration/urb-base-server/httpError/403.html',\n)\n\nexport function serveAuthenticationFailed(req, res, error, respondWithJSON) {\n  // Collect information about the request\n  var ip = req.headers['x-real-ip'] || req.connection.remoteAddress\n\n  const requestDetails = {\n    headers: req.headers,\n    cookies: req.cookies,\n    ip: ip,\n    query: req.body,\n  }\n\n  log.log('warn', 'Checking credentials failed', { error, requestDetails })\n\n  // Expire cookie. This is the only way to 'delete' a cookie\n  res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n\n  if (respondWithJSON) res.status(403).send('{ \"error\": \"ðŸ’”  Authentication Failed\" }')\n  else res.status(403).sendFile(httpError403FileName)\n}\n"]}