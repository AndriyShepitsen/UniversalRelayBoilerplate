{"version":3,"sources":["../../../units/urb-base-server/logServerRequest.js"],"names":["logServerRequest","req","res","next","loggingFunction","oldWriteRes","write","oldEndRes","end","chunksRes","chunk","push","Buffer","apply","arguments","responseBody","concat","toString","clientIP","headers","connection","remoteAddress","user","codeFoundriesInjected","requestAndResponse","cookies","query","body","response"],"mappings":";;;AAGwBA,gB,CAAT,QAASA,iBAAT,CAA2BC,GAA3B,CAAgCC,GAAhC,CAAqCC,IAArC,CAA2CC,eAA3C,CAA6D;AAC1E,GAAMC,aAAcH,IAAII,KAAxB;AACA,GAAMC,WAAYL,IAAIM,GAAtB;;AAEA,GAAMC,WAAY,EAAlB;;AAEAP,IAAII,KAAJ,CAAY,SAAUI,KAAV,CAAkB;AAC5BD,UAAUE,IAAV,CAAgB,GAAIC,OAAJ,CAAYF,KAAZ,CAAhB;AACAL,YAAYQ,KAAZ,CAAmBX,GAAnB,CAAwBY,SAAxB;AACD,CAHD;;AAKAZ,IAAIM,GAAJ,CAAU,SAAUE,KAAV,CAAkB;AAC1B,GAAKA,KAAL,CAAaD,UAAUE,IAAV,CAAgB,GAAIC,OAAJ,CAAYF,KAAZ,CAAhB;;AAEb,GAAIK,cAAeH,OAAOI,MAAP,CAAeP,SAAf,EAA2BQ,QAA3B,CAAqC,MAArC,CAAnB;;;AAGA,GAAMC,UAAWjB,IAAIkB,OAAJ,CAAY,WAAZ,GAA4BlB,IAAImB,UAAJ,CAAeC,aAA5D;;AAEA,GAAIC,YAAJ;AACA,GAAKpB,IAAIqB,qBAAJ,EAA6BrB,IAAIqB,qBAAJ,CAA0BD,IAA5D;AACEA,KAAOpB,IAAIqB,qBAAJ,CAA0BD,IAAjC,CADF;AAEKA,KAAO,gBAAP;;AAEL,GAAME,oBAAqB;AACzBL,QAASlB,IAAIkB,OADY;AAEzBM,QAASxB,IAAIwB,OAFY;AAGzBH,KAAMA,IAHmB;AAIzBI,MAAOzB,IAAI0B,IAJc;AAKzBC,SAAUb,YALe;AAMzBG,iBANyB,CAA3B;;;AASAd,gBAAiBoB,kBAAjB;;AAEAjB,UAAUM,KAAV,CAAiBX,GAAjB,CAAsBY,SAAtB;AACD,CAzBD;;AA2BAX;AACD","file":"logServerRequest.js","sourcesContent":["// @flow weak\n\n// Function to log requests\nexport default function logServerRequest( req, res, next, loggingFunction ) {\n  const oldWriteRes = res.write\n  const oldEndRes = res.end\n\n  const chunksRes = []\n\n  res.write = function( chunk ) {\n    chunksRes.push( new Buffer( chunk ) )\n    oldWriteRes.apply( res, arguments )\n  }\n\n  res.end = function( chunk ) {\n    if ( chunk ) chunksRes.push( new Buffer( chunk ) )\n\n    var responseBody = Buffer.concat( chunksRes ).toString( 'utf8' )\n\n    // Determine client ID - either placed in the headers by Nginx, or the IP the request is coming from\n    const clientIP = req.headers['x-real-ip'] || req.connection.remoteAddress\n\n    let user\n    if ( res.codeFoundriesInjected && res.codeFoundriesInjected.user )\n      user = res.codeFoundriesInjected.user\n    else user = 'not determined'\n\n    const requestAndResponse = {\n      headers: req.headers,\n      cookies: req.cookies,\n      user: user,\n      query: req.body,\n      response: responseBody,\n      clientIP,\n    }\n\n    loggingFunction( requestAndResponse )\n\n    oldEndRes.apply( res, arguments )\n  }\n\n  next()\n}\n"]}