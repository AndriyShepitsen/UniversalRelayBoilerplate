{"version":3,"sources":["../../../units/urb-base-server/graphQL.js"],"names":["router","use","json","req","res","next","root","objectManager","siteInformation","a_User","console","log","codeFoundriesInjected","user","schema","rootValue","pretty","graphiql"],"mappings":";;AAEA,uC;AACA,gC;AACA,+C;;AAEA;;;;;AAKA;AACA,oD;AACA;AACA;AACA,wC;;;AAGA,kD;AACA,4E;;;AAGA,GAAMA,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAW,qBAAWC,IAAX,EAAX;;;AAGAF,OAAOC,GAAP,CAAW,SAACE,GAAD,CAAMC,GAAN,CAAWC,IAAX,QAAoB,+BAAiBF,GAAjB,CAAsBC,GAAtB,CAA2BC,IAA3B,sCAApB,EAAX;;AAEA,QAAeC,KAAf,CAAoBH,GAApB,CAAyBC,GAAzB,CAA8BC,IAA9B;AAC8B,oCAAiBF,GAAjB,CAAsBC,GAAtB,CAD9B,SACQG,aADR;AAEMA,cAAcC,eAFpB;;AAI2B,0CAAoBD,aAApB,CAAmCJ,GAAnC,CAJ3B,SAIYM,MAJZ;;AAMMC,QAAQC,GAAR,CAAYF,MAAZ;;AAEAL,IAAIQ,qBAAJ,CAA4B,CAAEC,KAAMJ,MAAR,CAA5B,CARN;AASY,0CAAoBA,MAApB,CAA4BN,GAA5B,CATZ;;AAWM,6BAAY,UAAM;AAChB,MAAO;AACLW,uBADK;AAELC,UAAWR,aAFN;AAGLS,OAAQ,IAHH;AAILC,SAAU,IAJL,CAAP;;AAMD,CAPD,EAOGd,GAPH,CAOQC,GAPR,CAOaC,IAPb,EAXN;;AAoBM,gDAA0BF,GAA1B,CAA+BC,GAA/B,aAAyC,IAAzC,EApBN;;;;AAwBAJ,OAAOC,GAAP,CAAW,GAAX,CAAgBK,IAAhB,E;;AAEeN,M","file":"graphQL.js","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport {\n  getUserByUserToken1,\n  verifyUserAuthToken,\n  serveAuthenticationFailed,\n} from './checkCredentials'\nimport { getSiteInformation } from '../_configuration/urb-base-webapp/siteSettings'\nimport logServerRequest from './logServerRequest'\nimport { getObjectManager } from './graphql/ObjectManager'\nimport { requestLoggerGraphQL } from '../_configuration/urb-base-server/requestLoggers'\nimport schema from './graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport _schemas_system from './graphql/model/_schemas'\nimport _schemas from '../_configuration/urb-base-server/graphql/_schemas'\n\n// Create router for GraphQL\nconst router = express()\n\n// Set up parser\nrouter.use(bodyParser.json())\n\n// Set up logging\nrouter.use((req, res, next) => logServerRequest(req, res, next, requestLoggerGraphQL))\n\nasync function root(req, res, next) {\n  const objectManager = await getObjectManager(req, res)\n  if (objectManager.siteInformation) {\n    try {\n      const a_User = await getUserByUserToken1(objectManager, req)\n\n      console.log(a_User)\n\n      res.codeFoundriesInjected = { user: a_User }\n      await verifyUserAuthToken(a_User, req)\n\n      graphQLHTTP(() => {\n        return {\n          schema: schema,\n          rootValue: objectManager,\n          pretty: true,\n          graphiql: true,\n        }\n      })(req, res, next)\n    } catch (err) {\n      serveAuthenticationFailed(req, res, err, true)\n    }\n  }\n}\nrouter.use('/', root)\n\nexport default router\n"]}