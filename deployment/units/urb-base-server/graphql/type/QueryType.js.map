{"version":3,"sources":["../../../../../units/urb-base-server/graphql/type/QueryType.js"],"names":["resolveNodeField","source","args","context","objectManager","rootValue","id","type","getOneObject","name","fields","node","resolve","Viewer","parent","getViewerUserId"],"mappings":";;AAEA;AACA;;AAEA,wC;AACA,+C;;AAEA,QAASA,iBAAT,CAA0BC,MAA1B,CAAkCC,IAAlC,CAAwCC,OAAxC,MAA+E,IAAjBC,cAAiB,MAA5BC,SAA4B;;;;AAIxD,+BAAaH,KAAKI,EAAlB,CAJwD,CAIrEA,EAJqE,eAIrEA,EAJqE,CAIjEC,IAJiE,eAIjEA,IAJiE;;;;AAQ7E,GAAIA,OAAS,QAAb,CAAuB,MAAOH,eAAcI,YAAd,CAA2B,MAA3B,CAAmC,CAAEF,GAAIA,EAAN,CAAnC,CAAP,CAAvB;AACK,MAAOF,eAAcI,YAAd,CAA2BD,IAA3B,CAAiC,CAAED,GAAIA,EAAN,CAAjC,CAAP;AACN,C;;AAEc,+BAAsB;AACnCG,KAAM,OAD6B;AAEnCC,OAAQ,wBAAO;AACbC,KAAM;AACJJ,4BADI;AAEJL,KAAM;AACJI,GAAI,CAAEC,KAAM,+CAAR,CADA,CAFF;;AAKJK,QAASZ,gBALL,CADO;;AAQba,OAAQ;AACNN,yBADM;AAENK,QAAS,iBAACE,MAAD,CAASZ,IAAT,CAAeC,OAAf,WAAqCC,cAArC,OAA0BC,SAA1B;AACPD,cAAcI,YAAd,CAA2B,MAA3B,CAAmC,CAAEF,GAAIF,cAAcW,eAAd,EAAN,CAAnC,CADO,GAFH,CARK,CAAP,EAF2B,CAAtB,C,oIAZNf,gB","file":"QueryType.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId } from 'graphql-relay'\nimport { GraphQLID, GraphQLNonNull, GraphQLObjectType } from 'graphql'\n\nimport ViewerType from './ViewerType'\nimport NodeInterface from '../NodeInterface'\n\nfunction resolveNodeField(source, args, context, { rootValue: objectManager }) {\n  // the node field will receive a globally\n  // unique id, and here we convert that back\n  // to the local type and id\n  const { id, type } = fromGlobalId(args.id)\n\n  // map the local type and id into the\n  // actual data for the record\n  if (type === 'Viewer') return objectManager.getOneObject('User', { id: id })\n  else return objectManager.getOneObject(type, { id: id })\n}\n\nexport default new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    node: {\n      type: NodeInterface,\n      args: {\n        id: { type: new GraphQLNonNull(GraphQLID) },\n      },\n      resolve: resolveNodeField,\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', { id: objectManager.getViewerUserId() }),\n    },\n  }),\n})\n"]}