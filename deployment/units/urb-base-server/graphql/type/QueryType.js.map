{"version":3,"sources":["../../../../../units/urb-base-server/graphql/type/QueryType.js"],"names":["resolveNodeField","source","args","context","objectManager","rootValue","id","type","getOneObject","name","fields","node","resolve","Viewer","parent","getViewerUserId"],"mappings":";;AAEA;AACA;;AAEA,+C;;AAEA,wC;;AAEA,QAASA,iBAAT,CAA2BC,MAA3B,CAAmCC,IAAnC,CAAyCC,OAAzC,MAAgF,IAAjBC,cAAiB,MAA5BC,SAA4B;;;;AAIzD,+BAAcH,KAAKI,EAAnB,CAJyD,CAItEA,EAJsE,eAItEA,EAJsE,CAIlEC,IAJkE,eAIlEA,IAJkE;;;;AAQ9E,GAAKA,OAAS,QAAd,CAAyB,MAAOH,eAAcI,YAAd,CAA4B,MAA5B,CAAoC,CAAEF,GAAIA,EAAN,CAApC,CAAP,CAAzB;AACK,MAAOF,eAAcI,YAAd,CAA4BD,IAA5B,CAAkC,CAAED,GAAIA,EAAN,CAAlC,CAAP;AACN,C;;AAEc,+BAAsB;AACnCG,KAAM,OAD6B;AAEnCC,OAAQ,wBAAO;AACbC,KAAM;AACJJ,4BADI;AAEJL,KAAM;AACJI,GAAI,CAAEC,KAAM,+CAAR,CADA,CAFF;;AAKJK,QAASZ,gBALL,CADO;;AAQba,OAAQ;AACNN,yBADM;AAENK,QAAS,iBAAEE,MAAF,CAAUZ,IAAV,CAAgBC,OAAhB,WAAsCC,cAAtC,OAA2BC,SAA3B;AACPD,cAAcI,YAAd,CAA4B,MAA5B,CAAoC;AAClCF,GAAIF,cAAcW,eAAd,EAD8B,CAApC,CADO,GAFH,CARK,CAAP,EAF2B,CAAtB,C","file":"QueryType.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId } from 'graphql-relay'\nimport { GraphQLID, GraphQLNonNull, GraphQLObjectType } from 'graphql'\n\nimport NodeInterface from '../NodeInterface'\n\nimport ViewerType from './ViewerType'\n\nfunction resolveNodeField( source, args, context, { rootValue: objectManager }) {\n  // the node field will receive a globally\n  // unique id, and here we convert that back\n  // to the local type and id\n  const { id, type } = fromGlobalId( args.id )\n\n  // map the local type and id into the\n  // actual data for the record\n  if ( type === 'Viewer' ) return objectManager.getOneObject( 'User', { id: id })\n  else return objectManager.getOneObject( type, { id: id })\n}\n\nexport default new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    node: {\n      type: NodeInterface,\n      args: {\n        id: { type: new GraphQLNonNull( GraphQLID ) },\n      },\n      resolve: resolveNodeField,\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject( 'User', {\n          id: objectManager.getViewerUserId(),\n        }),\n    },\n  }),\n})\n"]}