{"version":3,"sources":["../../../../../units/urb-base-server/graphql/type/GraphQLDateTime.js"],"names":["coerceDate","value","Date","Error","JSON","stringify","isNaN","getTime","toJSON","parseLiteral","ast","kind","STRING","result","name","description","serialize","parseValue"],"mappings":";;AAEA;AACA;AACA;;;;;AAKA,QAASA,WAAT,CAAoBC,KAApB,CAA2B;AACzBA,MAAQ,GAAIC,KAAJ,CAASD,KAAT,CAAR;AACA,GAAI,EAAEA,gBAAiBC,KAAnB,CAAJ;;AAEE,KAAM,IAAIC,MAAJ;AACJ,yDAA2DC,KAAKC,SAAL,CAAeJ,KAAf,CADvD,CAAN;;;AAIF,GAAIK,MAAML,MAAMM,OAAN,EAAN,CAAJ,CAA4B,KAAM,IAAIJ,MAAJ,CAAU,uCAAV,CAAN;;AAE5B,MAAOF,OAAMO,MAAN,EAAP;AACD;;AAED,QAASC,aAAT,CAAsBC,GAAtB,CAA2B;AACzB,GAAIA,IAAIC,IAAJ,GAAa,eAAKC,MAAtB;AACE,KAAM,yBAAiB,2DAA6DF,IAAIC,IAAlF,CAAwF;AAC5FD,GAD4F,CAAxF,CAAN;;;AAIF,GAAIG,QAAS,GAAIX,KAAJ,CAASQ,IAAIT,KAAb,CAAb;AACA,GAAIK,MAAMO,OAAON,OAAP,EAAN,CAAJ,CAA6B,KAAM,yBAAiB,2BAAjB,CAA8C,CAACG,GAAD,CAA9C,CAAN;;AAE7B,GAAIA,IAAIT,KAAJ,GAAcY,OAAOL,MAAP,EAAlB;AACE,KAAM;AACJ,0EADI;AAEJ,CAACE,GAAD,CAFI,CAAN;;;AAKF,MAAOG,OAAP;AACD,C;;AAEc,+BAAsB;AACnCC,KAAM,UAD6B;AAEnCC,YAAa,+CAFsB;AAGnCC,UAAWhB,UAHwB;AAInCiB,WAAYjB,UAJuB;AAKnCS,aAAcA,YALqB,CAAtB,C,oIA/BNT,U,qGAaAS,Y","file":"GraphQLDateTime.js","sourcesContent":["// @flow\n\nimport { GraphQLScalarType } from 'graphql'\nimport { GraphQLError } from 'graphql/error'\nimport { Kind } from 'graphql/language'\n\n// The code in this file is largely modified version of:\n// https://github.com/soundtrackyourbrand/graphql-custom-datetype/blob/master/datetype.js\n\nfunction coerceDate(value) {\n  value = new Date(value)\n  if (!(value instanceof Date))\n    // Is this how you raise a 'field error'?\n    throw new Error(\n      'Field error: value is not an instance of Date, value =' + JSON.stringify(value),\n    )\n\n  if (isNaN(value.getTime())) throw new Error('Field error: value is an invalid Date')\n\n  return value.toJSON()\n}\n\nfunction parseLiteral(ast) {\n  if (ast.kind !== Kind.STRING)\n    throw new GraphQLError('Query error: Can only parse strings to dates but got a: ' + ast.kind, [\n      ast,\n    ])\n\n  let result = new Date(ast.value)\n  if (isNaN(result.getTime())) throw new GraphQLError('Query error: Invalid date', [ast])\n\n  if (ast.value !== result.toJSON())\n    throw new GraphQLError(\n      'Query error: Invalid date format, only accepts: YYYY-MM-DDTHH:MM:SS.SSSZ',\n      [ast],\n    )\n\n  return result\n}\n\nexport default new GraphQLScalarType({\n  name: 'DateTime',\n  description: 'Scalar type for storing date-time information',\n  serialize: coerceDate,\n  parseValue: coerceDate,\n  parseLiteral: parseLiteral,\n})\n"]}