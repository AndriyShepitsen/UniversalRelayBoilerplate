{"version":3,"sources":["../../../../units/urb-base-server/graphql/ObjectManager.js"],"names":["getObjectManager","User_0","id","uuidNull","UserToken2","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","siteInformation","site_id","req","res","response","entityName","foundLoaders","fields","isDeletion","records","Error","fieldName","multipleResults","entityDefinition","entityType","EntityType","loadersList","getLoadersMultiple","getLoadersSingle","loader","Persister","getObjectList","filter","getOneObject","uuidNullAsString","Promise","resolve","loaderIdentifier","Object","keys","sort","join","getLoader","load","then","change","result","ix","arrResults","length","splice","clearLoadersMultiple","loaderFieldName","clear","arrTriggers","oldFields","arrPromises","trigger","push","all","console","log","uuidRandom","setViewerUserId","toString","recordChange","executeTriggers","TriggersForAdd","add","invalidateLoaderCache","TriggersForUpdateShouldRetrieveCurrentRecord","TriggersForUpdate","update","keyFields","ensureFields","entity","ensuredFieldName","isMatchingValue","endsWith","uuidToString","uuidEquals","TriggersForRemove","remove","arr","obj","obj_id","arr_element_id","cursor","persister","EntityName","handler","shouldRetrieveCurrentRecord","RegisterTriggerForAdd","RegisterTriggerForUpdate","runAsPartOfSetupDatabase","cb","initialize","registerEntity","objectManager","setRequest","setSiteInformation"],"mappings":"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","file":"ObjectManager.js","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport UserToken2Anonymous from '../../_configuration/urb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../../_configuration/urb-base-server/graphql/defaultPersister'\nimport getNewUser from '../../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../../_configuration/urb-base-server/siteSettings'\nimport log from '../log'\nimport User from '../../_configuration/urb-base-server/graphql/model/User'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign( getNewUser( '00000000-0000-0000-0000-000000000000' ), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  })\n)\n\n// Static set of entity definitions\nconst entityDefinitions = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\nexport default class ObjectManager {\n  loadersSingle: Object\n  Viewer_User_id: ?string\n  loadersMultiple: Object\n  changes: Object\n  request: ?Object\n  response: ?Object\n  User_0: User\n  siteInformation: { site_id: string }\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = null\n\n    // Request object, if available\n    this.request = null\n\n    // Anonymous user available as property, for comparisons\n    this.User_0 = User_0\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to detect errors when not set better\n    this.siteInformation = {\n      site_id: 'site_id has not been set. Invalid site_id!',\n    }\n  }\n\n  static registerEntity(\n    entityName: string,\n    EntityType: any,\n    persister: any\n  ): void {\n    if ( entityName in entityDefinitions )\n      throw new Error( 'Entity already registered: ' + entityName )\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if ( persister == null ) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add( persister )\n\n    entityDefinitions[entityName] = {\n      EntityName: entityName,\n      EntityType: EntityType,\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n    }\n  }\n\n  static RegisterTriggerForAdd( entityName: string, handler: Function ): void {\n    entityDefinitions[entityName].TriggersForAdd.push( handler )\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push( handler )\n\n    if ( shouldRetrieveCurrentRecord )\n      entityDefinitions[\n        entityName\n      ].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate(\n    entityName: string,\n    handler: Function\n  ): void {\n    ObjectManager.RegisterTriggerForAdd( entityName, handler )\n    ObjectManager.RegisterTriggerForUpdate( entityName, handler, false )\n  }\n\n  static RegisterTriggerForRemove( entityName: string, handler: any ) {\n    entityDefinitions[entityName].TriggersForRemove.push( handler )\n  }\n\n  setViewerUserId( Viewer_User_id: string ): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest( req: any, res: any ): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation( siteInformation: Object ): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle( entityName: string ) {\n    const foundLoaders = this.loadersSingle[entityName]\n    if ( foundLoaders != null ) return foundLoaders\n    else return ( this.loadersSingle[entityName] = {})\n  }\n\n  getLoadersMultiple( entityName: string ) {\n    const foundLoaders = this.loadersMultiple[entityName]\n    if ( foundLoaders != null ) return foundLoaders\n    else return ( this.loadersMultiple[entityName] = {})\n  }\n\n  clearLoadersMultiple( entityName: string ) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange( entityName: string, fields: Object, isDeletion: boolean ) {\n    let records = this.changes[entityName]\n    if ( records == null ) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if ( this.Viewer_User_id == null )\n      throw new Error( 'Object Manager: viewer user id has not been set' )\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if ( this.request == null )\n      throw new Error( 'Object Manager: request has not been set' )\n\n    return this.request\n  }\n\n  getLoader( entityName: string, fieldName: string, multipleResults: boolean ) {\n    if ( !( entityName in entityDefinitions ) )\n      throw new Error( 'Can not find entity type named ' + entityName )\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple( entityName )\n      : this.getLoadersSingle( entityName )\n    let loader = loadersList[fieldName]\n    if ( loader == null ) {\n      if ( multipleResults )\n        loader = new DataLoader( filter =>\n          entityDefinition.Persister.getObjectList(\n            entityName,\n            entityType,\n            filter\n          )\n        )\n      else\n        loader = new DataLoader( filter =>\n          entityDefinition.Persister.getOneObject(\n            entityName,\n            entityType,\n            filter\n          )\n        )\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject( entityName: string, filter: Object ): Promise<User> {\n    // TODO x2000 Provide try catch with logging here!\n    // Special hack for anonymous users\n    if ( entityName === 'User' )\n      if ( filter.id == defaultPersister.uuidNullAsString() )\n        return Promise.resolve( User_0 )\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys( filter )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, false )\n\n    return loader.load( filter ).then( result => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        // $FlowIssue - by convention all entity objects are expected to have an id\n        const change = changes[result.id]\n        if ( change != null ) {\n          if ( change === deletedRecord )\n            result = null // Object is not found, return null // Add or update\n          else Object.assign( result, change )\n        }\n      }\n      return result\n    })\n  }\n\n  getObjectList( entityName: string, filter: Object ) {\n    // TODO x2000 Provide try catch with logging here!\n    const loaderIdentifier = Object.keys( filter )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, true )\n\n    return loader.load( filter ).then( arrResults => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        for ( let ix = 0; ix < arrResults.length; ix++ ) {\n          const change = changes[arrResults[ix].id]\n          if ( change != null ) {\n            if ( change === deletedRecord )\n              arrResults.splice( ix--, 1 ) // Reduce ix in order not to skip over a record // Add or update\n            else Object.assign( arrResults[ix], change )\n          }\n        }\n      }\n      return arrResults\n    })\n  }\n\n  invalidateLoaderCache( entityName: string, fields: any ) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple( entityName )\n\n    const loadersSingle = this.getLoadersSingle( entityName )\n    for ( let loaderFieldName in loadersSingle ) {\n      if ( loaderFieldName === 'id' )\n        loadersSingle[loaderFieldName].clear( fields.id )\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers(\n    arrTriggers: Array<Function>,\n    fields: Object,\n    oldFields: ?Object\n  ) {\n    const arrPromises = []\n    for ( let trigger of arrTriggers ) {\n      arrPromises.push( trigger( this, fields, oldFields ) )\n    }\n\n    return Promise.all( arrPromises )\n  }\n\n  assignPrimaryKey( entityName: string, fields: any ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      console.log( 'Cound not find entity ' + entityName )\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add( entityName: string, fields: any ): any {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      console.log( 'Cound not find entity ' + entityName )\n\n    // Generate primary key, if not already present\n    if ( !fields.id ) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if ( entityName === 'User' ) this.setViewerUserId( fields.id.toString() )\n\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers( entityDefinition.TriggersForAdd, fields )\n\n    await entityDefinition.Persister.add(\n      entityName,\n      fields,\n      entityDefinition.EntityType\n    )\n\n    this.invalidateLoaderCache( entityName, fields )\n\n    return fields.id\n  }\n\n  async update( entityName: string, fields: any ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      console.log( '💔  XXX Cound not find entity' + entityName ) // Should that be recorded somewhere? Could be another\n\n    let oldFields = null\n    if ( entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord ) {\n      oldFields = this.getOneObject( entityName, {\n        id: fields.id,\n      })\n    }\n\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers(\n      entityDefinition.TriggersForUpdate,\n      fields,\n      oldFields\n    )\n\n    await entityDefinition.Persister.update( entityName, fields )\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  async ensure(\n    entityName: string,\n    keyFields: Object,\n    ensureFields: Object\n  ): Promise<Object> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    const entity = await this.getOneObject( entityName, keyFields )\n\n    for ( let ensuredFieldName of Object.keys( ensureFields ) ) {\n      let isMatchingValue = false\n      if ( ensuredFieldName.endsWith( 'site_id' ) ) {\n        if ( !entity.site_id )\n          throw new Error(\n            'ensuredFieldName = ' +\n              ensuredFieldName +\n              ', however the entity does not have field site_id'\n          )\n        isMatchingValue =\n          entityDefinition.Persister.uuidToString( entity.site_id ) ===\n          ensureFields.site_id\n      } else if ( ensuredFieldName.endsWith( '_id' ) ) {\n        isMatchingValue = entityDefinition.Persister.uuidEquals(\n          ensureFields[ensuredFieldName],\n          // $FlowIssue by convention the field should be present\n          entity[ensuredFieldName]\n        )\n      } else {\n        isMatchingValue =\n          // $FlowIssue by convention the field should be present\n          ensureFields[ensuredFieldName] === entity[ensuredFieldName]\n      }\n\n      if ( !isMatchingValue )\n        throw new Error(\n          '💔  Field value can not be ensured for field ' +\n            ensuredFieldName +\n            ' of ' +\n            entityName\n        )\n    }\n\n    return entity\n  }\n\n  async remove( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    this.recordChange( entityName, fields, true )\n    await this.executeTriggers( entityDefinition.TriggersForRemove, fields )\n\n    await entityDefinition.Persister.remove( entityName, fields )\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  cursorForObjectInConnection(\n    entityName: string,\n    arr: Array<Object>,\n    obj: Object\n  ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString( obj.id )\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for ( let ix = 0; ix < arr.length; ix++ ) {\n      const arr_element_id = entityDefinition.Persister.uuidToString( arr[ix].id )\n\n      if ( arr_element_id === obj_id ) {\n        arr[ix] = obj\n        break\n      }\n    }\n\n    let cursor = cursorForObjectInConnection( arr, obj )\n    if ( cursor == null )\n      log.log(\n        'error',\n        '💔  Could not create cursor for object in connection for ' +\n          entityName,\n        {\n          obj,\n          arr,\n        }\n      )\n\n    return cursor\n  }\n\n  static initializePersisters(\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function\n  ): void {\n    console.log( '🚀 Initializing persisters - start ...' )\n\n    // TODO x8000 This should be re-done to work properly with more than one persister\n    for ( let persister of setPersisters )\n      persister.initialize( runAsPartOfSetupDatabase, () => {\n        console.log( '🏆 Initializing persisters - success.' )\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity( 'User', User )\n\n// Get an Object Manager with site information\nexport async function getObjectManager(\n  req: Object,\n  res: Object\n): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation( req, res )\n\n  // Create individual object manager for each request\n  const objectManager = new ObjectManager()\n\n  // Set request and response\n  objectManager.setRequest( req, res )\n\n  // Place site builder configuration into object manager\n  objectManager.setSiteInformation( siteInformation )\n\n  return objectManager\n}\n"]}