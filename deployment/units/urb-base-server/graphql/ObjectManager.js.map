{"version":3,"sources":["../../../../units/urb-base-server/graphql/ObjectManager.js"],"names":["getObjectManager","User_0","id","uuidNull","UserToken2","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","siteInformation","site_id","req","res","response","entityName","foundLoaders","fields","isDeletion","records","Error","fieldName","multipleResults","entityDefinition","entityType","EntityType","loadersList","getLoadersMultiple","getLoadersSingle","loader","Persister","getObjectList","filter","getOneObject","uuidNullAsString","Promise","resolve","loaderIdentifier","Object","keys","sort","join","getLoader","load","then","change","result","ix","arrResults","length","splice","clearLoadersMultiple","loaderFieldName","clear","arrTriggers","oldFields","arrPromises","trigger","push","all","console","log","uuidRandom","setViewerUserId","toString","recordChange","executeTriggers","TriggersForAdd","add","invalidateLoaderCache","TriggersForUpdateShouldRetrieveCurrentRecord","TriggersForUpdate","update","keyFields","ensureFields","entity","ensuredFieldName","isMatchingValue","endsWith","uuidToString","uuidEquals","TriggersForRemove","remove","arr","obj","obj_id","arr_element_id","cursor","persister","EntityName","handler","shouldRetrieveCurrentRecord","RegisterTriggerForAdd","RegisterTriggerForUpdate","runAsPartOfSetupDatabase","cb","initialize","registerEntity","objectManager","setRequest","setSiteInformation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6csBA,gB,CAAAA,gB,CA3ctB,sC,qDACA,2CAEA,6F,uEACA,+F,iEACA,yF,qDACA,+EACA,2B,uCACA,6E,6QAGA,GAAMC,QAAS,mBACb,SAAc,yBAAW,sCAAX,CAAd,CAAkE,CAChEC,GAAI,2BAAiBC,QAAjB,EAD4D,CAEhEC,wCAFgE,CAGhEC,iBAAkB,WAH8C,CAAlE,CADa,CAAf,CASA,GAAMC,mBAAoB,EAA1B,CAGA,GAAMC,eAAgB,GAAIC,IAAJ,EAAtB,CAGA,GAAMC,eAAgB,CACpBC,QAAS,IADW,CAAtB,C,GAIqBC,c,YAUnB,wBAAc,qCAEZ,KAAKC,aAAL,CAAqB,EAArB,CAGA,KAAKC,eAAL,CAAuB,EAAvB,CAGA,KAAKC,OAAL,CAAe,EAAf,CAGA,KAAKC,cAAL,CAAsB,IAAtB,CAGA,KAAKC,OAAL,CAAe,IAAf,CAGA,KAAKf,MAAL,CAAcA,MAAd,CAIA,KAAKgB,eAAL,CAAuB,CACrBC,QAAS,4CADY,CAAvB,CAGD,C,kFA2DeH,c,CAA8B,CAC5C,KAAKA,cAAL,CAAsBA,cAAtB,CACD,C,8CAEUI,G,CAAUC,G,CAAgB,CACnC,KAAKJ,OAAL,CAAeG,GAAf,CACA,KAAKE,QAAL,CAAgBD,GAAhB,CACD,C,8DAEkBH,e,CAA+B,CAChD,KAAKA,eAAL,CAAuBA,eAAvB,CACD,C,0DAEgBK,U,CAAoB,CACnC,GAAMC,cAAe,KAAKX,aAAL,CAAmBU,UAAnB,CAArB,CACA,GAAIC,cAAgB,IAApB,CAA0B,MAAOA,aAAP,CAA1B,IACK,OAAQ,MAAKX,aAAL,CAAmBU,UAAnB,EAAiC,EAAzC,CACN,C,8DAEkBA,U,CAAoB,CACrC,GAAMC,cAAe,KAAKV,eAAL,CAAqBS,UAArB,CAArB,CACA,GAAIC,cAAgB,IAApB,CAA0B,MAAOA,aAAP,CAA1B,IACK,OAAQ,MAAKV,eAAL,CAAqBS,UAArB,EAAmC,EAA3C,CACN,C,kEAEoBA,U,CAAoB,CACvC,KAAKT,eAAL,CAAqBS,UAArB,EAAmC,EAAnC,CACD,C,kDAEYA,U,CAAoBE,M,CAAgBC,U,CAAqB,CACpE,GAAIC,SAAU,KAAKZ,OAAL,CAAaQ,UAAb,CAAd,CACA,GAAII,SAAW,IAAf,CAAqBA,QAAU,KAAKZ,OAAL,CAAaQ,UAAb,EAA2B,EAArC,CAErB,GAAMpB,IAAKsB,OAAOtB,EAAlB,CAEAwB,QAAQxB,EAAR,EAAcuB,WAAahB,aAAb,CAA6Be,MAA3C,CACD,C,yDAEyB,CACxB,GAAI,KAAKT,cAAL,EAAuB,IAA3B,CACE,KAAM,IAAIY,MAAJ,CAAU,iDAAV,CAAN,CAEF,MAAO,MAAKZ,cAAZ,CACD,C,+CAEiB,CAChB,GAAI,KAAKC,OAAL,EAAgB,IAApB,CACE,KAAM,IAAIW,MAAJ,CAAU,0CAAV,CAAN,CAEF,MAAO,MAAKX,OAAZ,CACD,C,4CAESM,U,CAAoBM,S,CAAmBC,e,CAA0B,CACzE,GAAI,EAAEP,aAAchB,kBAAhB,CAAJ,CACE,KAAM,IAAIqB,MAAJ,CAAU,kCAAoCL,UAA9C,CAAN,CAEF,GAAMQ,kBAAmBxB,kBAAkBgB,UAAlB,CAAzB,CACA,GAAMS,YAAaD,iBAAiBE,UAApC,CAEA,GAAIC,aAAcJ,gBACd,KAAKK,kBAAL,CAAwBZ,UAAxB,CADc,CAEd,KAAKa,gBAAL,CAAsBb,UAAtB,CAFJ,CAGA,GAAIc,QAASH,YAAYL,SAAZ,CAAb,CACA,GAAIQ,QAAU,IAAd,CAAoB,CAClB,GAAIP,eAAJ,CACEO,OAAS,yBAAe,uBACtBN,kBAAiBO,SAAjB,CAA2BC,aAA3B,CACEhB,UADF,CAEES,UAFF,CAGEQ,MAHF,CADsB,EAAf,CAAT,CADF,IASEH,QAAS,yBAAe,uBACtBN,kBAAiBO,SAAjB,CAA2BG,YAA3B,CACElB,UADF,CAEES,UAFF,CAGEQ,MAHF,CADsB,EAAf,CAAT,CAQFN,YAAYL,SAAZ,EAAyBQ,MAAzB,CACD,CAED,MAAOA,OAAP,CACD,C,kDAEYd,U,CAAoBiB,M,CAA+B,gBAG9D,GAAIjB,aAAe,MAAnB,CACE,GAAIiB,OAAOrC,EAAP,EAAa,2BAAiBuC,gBAAjB,EAAjB,CACE,MAAOC,SAAQC,OAAR,CAAgB1C,MAAhB,CAAP,CAGJ,GAAM2C,kBAAmBC,OAAOC,IAAP,CAAYP,MAAZ,EACtBQ,IADsB,GAEtBC,IAFsB,CAEjB,GAFiB,CAAzB,CAGA,GAAMZ,QAAS,KAAKa,SAAL,CAAe3B,UAAf,CAA2BsB,gBAA3B,CAA6C,KAA7C,CAAf,CAEA,MAAOR,QAAOc,IAAP,CAAYX,MAAZ,EAAoBY,IAApB,CAAyB,gBAAU,CACxC,GAAMrC,SAAU,MAAKA,OAAL,CAAaQ,UAAb,CAAhB,CACA,GAAIR,OAAJ,CAAa,CAEX,GAAMsC,QAAStC,QAAQuC,OAAOnD,EAAf,CAAf,CACA,GAAIkD,QAAU,IAAd,CAAoB,CAClB,GAAIA,SAAW3C,aAAf,CACE4C,OAAS,IAAT,CADF,IAEK,UAAcA,MAAd,CAAsBD,MAAtB,EACN,CACF,CACD,MAAOC,OAAP,CACD,CAZM,CAAP,CAaD,C,oDAEa/B,U,CAAoBiB,M,CAAgB,iBAEhD,GAAMK,kBAAmBC,OAAOC,IAAP,CAAYP,MAAZ,EACtBQ,IADsB,GAEtBC,IAFsB,CAEjB,GAFiB,CAAzB,CAGA,GAAMZ,QAAS,KAAKa,SAAL,CAAe3B,UAAf,CAA2BsB,gBAA3B,CAA6C,IAA7C,CAAf,CAEA,MAAOR,QAAOc,IAAP,CAAYX,MAAZ,EAAoBY,IAApB,CAAyB,oBAAc,CAC5C,GAAMrC,SAAU,OAAKA,OAAL,CAAaQ,UAAb,CAAhB,CACA,GAAIR,OAAJ,CAAa,CACX,IAAK,GAAIwC,IAAK,CAAd,CAAiBA,GAAKC,WAAWC,MAAjC,CAAyCF,IAAzC,CAA+C,CAC7C,GAAMF,QAAStC,QAAQyC,WAAWD,EAAX,EAAepD,EAAvB,CAAf,CACA,GAAIkD,QAAU,IAAd,CAAoB,CAClB,GAAIA,SAAW3C,aAAf,CACE8C,WAAWE,MAAX,CAAkBH,IAAlB,CAAwB,CAAxB,EADF,IAEK,UAAcC,WAAWD,EAAX,CAAd,CAA8BF,MAA9B,EACN,CACF,CACF,CACD,MAAOG,WAAP,CACD,CAbM,CAAP,CAcD,C,oEAEqBjC,U,CAAoBE,M,CAAa,CAErD,KAAKkC,oBAAL,CAA0BpC,UAA1B,EAEA,GAAMV,eAAgB,KAAKuB,gBAAL,CAAsBb,UAAtB,CAAtB,CACA,IAAK,GAAIqC,gBAAT,GAA4B/C,cAA5B,CAA2C,CACzC,GAAI+C,kBAAoB,IAAxB,CACE/C,cAAc+C,eAAd,EAA+BC,KAA/B,CAAqCpC,OAAOtB,EAA5C,EADF,IAEK,OAAOU,eAAc+C,eAAd,CAAP,CACN,CACF,C,wDAGCE,W,CACArC,M,CACAsC,S,CACA,CACA,GAAMC,aAAc,EAApB,CACA,kBAAoBF,WAApB,4IAAiC,uIAAxBG,QAAwB,MAC/BD,YAAYE,IAAZ,CAAiBD,QAAQ,IAAR,CAAcxC,MAAd,CAAsBsC,SAAtB,CAAjB,EACD,CAED,MAAOpB,SAAQwB,GAAR,CAAYH,WAAZ,CAAP,CACD,C,0DAEgBzC,U,CAAoBE,M,CAAa,CAChD,GAAMM,kBAAmBxB,kBAAkBgB,UAAlB,CAAzB,CAEA,GAAIQ,kBAAoB,IAAxB,CACEqC,QAAQC,GAAR,CAAY,yBAA2B9C,UAAvC,EAGFE,OAAOtB,EAAP,CAAY4B,iBAAiBO,SAAjB,CAA2BgC,UAA3B,EAAZ,CACD,C,gCAES/C,U,CAAoBE,M,mIACtBM,gB,CAAmBxB,kBAAkBgB,UAAlB,C,CAEzB,GAAIQ,kBAAoB,IAAxB,CACEqC,QAAQC,GAAR,CAAY,yBAA2B9C,UAAvC,EAGF,GAAI,CAACE,OAAOtB,EAAZ,CAAgBsB,OAAOtB,EAAP,CAAY4B,iBAAiBO,SAAjB,CAA2BgC,UAA3B,EAAZ,CAGhB,GAAI/C,aAAe,MAAnB,CAA2B,KAAKgD,eAAL,CAAqB9C,OAAOtB,EAAP,CAAUqE,QAAV,EAArB,EAE3B,KAAKC,YAAL,CAAkBlD,UAAlB,CAA8BE,MAA9B,CAAsC,KAAtC,E,gDACM,KAAKiD,eAAL,CAAqB3C,iBAAiB4C,cAAtC,CAAsDlD,MAAtD,C,yDAEAM,iBAAiBO,SAAjB,CAA2BsC,GAA3B,CACJrD,UADI,CAEJE,MAFI,CAGJM,iBAAiBE,UAHb,C,SAMN,KAAK4C,qBAAL,CAA2BtD,UAA3B,CAAuCE,MAAvC,E,gCAEOA,OAAOtB,E,iGAGHoB,U,CAAoBE,M,mJACzBM,gB,CAAmBxB,kBAAkBgB,UAAlB,C,CAEzB,GAAIQ,kBAAoB,IAAxB,CACEqC,QAAQC,GAAR,CAAY,gCAAkC9C,UAA9C,EAEEwC,S,CAAY,I,CAChB,GAAIhC,iBAAiB+C,4CAArB,CAAmE,CACjEf,UAAY,KAAKtB,YAAL,CAAkBlB,UAAlB,CAA8B,CACxCpB,GAAIsB,OAAOtB,EAD6B,CAA9B,CAAZ,CAGD,CAED,KAAKsE,YAAL,CAAkBlD,UAAlB,CAA8BE,MAA9B,CAAsC,KAAtC,E,iDACM,KAAKiD,eAAL,CACJ3C,iBAAiBgD,iBADb,CAEJtD,MAFI,CAGJsC,SAHI,C,0DAMAhC,iBAAiBO,SAAjB,CAA2B0C,MAA3B,CAAkCzD,UAAlC,CAA8CE,MAA9C,C,SAEN,KAAKoD,qBAAL,CAA2BtD,UAA3B,CAAuCE,MAAvC,E,gGAIAF,U,CACA0D,S,CACAC,Y,gNAEMnD,gB,CAAmBxB,kBAAkBgB,UAAlB,C,kDAEJ,KAAKkB,YAAL,CAAkBlB,UAAlB,CAA8B0D,SAA9B,C,SAAfE,M,2BAEuBrC,OAAOC,IAAP,CAAYmC,YAAZ,C,kgBAApBE,gB,OACHC,e,CAAkB,K,KAClBD,iBAAiBE,QAAjB,CAA0B,SAA1B,C,8BACGH,OAAOhE,O,gCACJ,IAAIS,MAAJ,CACJ,sBACEwD,gBADF,CAEE,kDAHE,C,SAKRC,gBACEtD,iBAAiBO,SAAjB,CAA2BiD,YAA3B,CAAwCJ,OAAOhE,OAA/C,IACA+D,aAAa/D,OAFf,C,gCAGK,GAAIiE,iBAAiBE,QAAjB,CAA0B,KAA1B,CAAJ,CAAsC,CAC3CD,gBAAkBtD,iBAAiBO,SAAjB,CAA2BkD,UAA3B,CAChBN,aAAaE,gBAAb,CADgB,CAGhBD,OAAOC,gBAAP,CAHgB,CAAlB,CAKD,CANM,IAMA,CACLC,gBAEEH,aAAaE,gBAAb,IAAmCD,OAAOC,gBAAP,CAFrC,CAGD,C,WAEIC,e,gCACG,IAAIzD,MAAJ,CACJ,gDACEwD,gBADF,CAEE,MAFF,CAGE7D,UAJE,C,yEAQH4D,M,kGAGI5D,U,CAAoBE,M,yIACzBM,gB,CAAmBxB,kBAAkBgB,UAAlB,C,CAEzB,KAAKkD,YAAL,CAAkBlD,UAAlB,CAA8BE,MAA9B,CAAsC,IAAtC,E,iDACM,KAAKiD,eAAL,CAAqB3C,iBAAiB0D,iBAAtC,CAAyDhE,MAAzD,C,0DAEAM,iBAAiBO,SAAjB,CAA2BoD,MAA3B,CAAkCnE,UAAlC,CAA8CE,MAA9C,C,SAEN,KAAKoD,qBAAL,CAA2BtD,UAA3B,CAAuCE,MAAvC,E,yIAIAF,U,CACAoE,G,CACAC,G,CACA,CACA,GAAM7D,kBAAmBxB,kBAAkBgB,UAAlB,CAAzB,CAGA,GAAMsE,QAAS9D,iBAAiBO,SAAjB,CAA2BiD,YAA3B,CAAwCK,IAAIzF,EAA5C,CAAf,CAIA,IAAK,GAAIoD,IAAK,CAAd,CAAiBA,GAAKoC,IAAIlC,MAA1B,CAAkCF,IAAlC,CAAwC,CACtC,GAAMuC,gBAAiB/D,iBAAiBO,SAAjB,CAA2BiD,YAA3B,CAAwCI,IAAIpC,EAAJ,EAAQpD,EAAhD,CAAvB,CAEA,GAAI2F,iBAAmBD,MAAvB,CAA+B,CAC7BF,IAAIpC,EAAJ,EAAUqC,GAAV,CACA,MACD,CACF,CAED,GAAIG,QAAS,8CAA4BJ,GAA5B,CAAiCC,GAAjC,CAAb,CACA,GAAIG,QAAU,IAAd,CACE,cAAI1B,GAAJ,CACE,OADF,CAEE,4DACE9C,UAHJ,CAIE,CACEqE,OADF,CAEED,OAFF,CAJF,EAUF,MAAOI,OAAP,CACD,C,wDAlXCxE,U,CACAU,U,CACA+D,S,CACM,CACN,GAAIzE,aAAchB,kBAAlB,CACE,KAAM,IAAIqB,MAAJ,CAAU,8BAAgCL,UAA1C,CAAN,CAGFU,WAAWV,UAAX,CAAwBA,UAAxB,CAGA,GAAIyE,WAAa,IAAjB,CAAuBA,qCAGvBxF,cAAcoE,GAAd,CAAkBoB,SAAlB,EAEAzF,kBAAkBgB,UAAlB,EAAgC,CAC9B0E,WAAY1E,UADkB,CAE9BU,WAAYA,UAFkB,CAG9BK,UAAW0D,SAHmB,CAI9BrB,eAAgB,EAJc,CAK9BI,kBAAmB,EALW,CAM9BU,kBAAmB,EANW,CAO9BX,6CAA8C,KAPhB,CAAhC,CASD,C,oEAE4BvD,U,CAAoB2E,O,CAAyB,CACxE3F,kBAAkBgB,UAAlB,EAA8BoD,cAA9B,CAA6CT,IAA7C,CAAkDgC,OAAlD,EACD,C,0EAGC3E,U,CACA2E,O,CACAC,2B,CACM,CACN5F,kBAAkBgB,UAAlB,EAA8BwD,iBAA9B,CAAgDb,IAAhD,CAAqDgC,OAArD,EAEA,GAAIC,2BAAJ,CACE5F,kBACEgB,UADF,EAEEuD,4CAFF,CAEiD,IAFjD,CAGH,C,sFAGCvD,U,CACA2E,O,CACM,CACNtF,cAAcwF,qBAAd,CAAoC7E,UAApC,CAAgD2E,OAAhD,EACAtF,cAAcyF,wBAAd,CAAuC9E,UAAvC,CAAmD2E,OAAnD,CAA4D,KAA5D,EACD,C,0EAE+B3E,U,CAAoB2E,O,CAAc,CAChE3F,kBAAkBgB,UAAlB,EAA8BkE,iBAA9B,CAAgDvB,IAAhD,CAAqDgC,OAArD,EACD,C,kEA+TCI,wB,CACAC,E,CACM,CACNnC,QAAQC,GAAR,CAAY,wCAAZ,EAIA,mBAAsB7D,aAAtB,sSAASwF,UAAT,OACEA,UAAUQ,UAAV,CAAqBF,wBAArB,CAA+C,UAAM,CACnDlC,QAAQC,GAAR,CAAY,uCAAZ,EACAkC,KACD,CAHD,EADF,CAKD,C,6CAtakB3F,a,CA0arBA,cAAc6F,cAAd,CAA6B,MAA7B,iBAGO,QAAexG,iBAAf;AACLmB,GADK;AAELC,GAFK;;;AAKyB,qCAAmBD,GAAnB,CAAwBC,GAAxB,CALzB,SAKCH,eALD;;;AAQCwF,aARD,CAQiB,GAAI9F,cAAJ,EARjB;;;AAWL8F,cAAcC,UAAd,CAAyBvF,GAAzB,CAA8BC,GAA9B;;;AAGAqF,cAAcE,kBAAd,CAAiC1F,eAAjC,EAdK;;AAgBEwF,aAhBF","file":"ObjectManager.js","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport UserToken2Anonymous from '../../_configuration/urb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../../_configuration/urb-base-server/graphql/defaultPersister'\nimport getNewUser from '../../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../../_configuration/urb-base-server/siteSettings'\nimport log from '../log'\nimport User from '../../_configuration/urb-base-server/graphql/model/User'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign(getNewUser('00000000-0000-0000-0000-000000000000'), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  })\n)\n\n// Static set of entity definitions\nconst entityDefinitions = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\nexport default class ObjectManager {\n  loadersSingle: Object\n  Viewer_User_id: ?string\n  loadersMultiple: Object\n  changes: Object\n  request: ?Object\n  response: ?Object\n  User_0: User\n  siteInformation: { site_id: string }\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = null\n\n    // Request object, if available\n    this.request = null\n\n    // Anonymous user available as property, for comparisons\n    this.User_0 = User_0\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to detect errors when not set better\n    this.siteInformation = {\n      site_id: 'site_id has not been set. Invalid site_id!',\n    }\n  }\n\n  static registerEntity(\n    entityName: string,\n    EntityType: any,\n    persister: any\n  ): void {\n    if (entityName in entityDefinitions)\n      throw new Error('Entity already registered: ' + entityName)\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if (persister == null) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add(persister)\n\n    entityDefinitions[entityName] = {\n      EntityName: entityName,\n      EntityType: EntityType,\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n    }\n  }\n\n  static RegisterTriggerForAdd(entityName: string, handler: Function): void {\n    entityDefinitions[entityName].TriggersForAdd.push(handler)\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push(handler)\n\n    if (shouldRetrieveCurrentRecord)\n      entityDefinitions[\n        entityName\n      ].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate(\n    entityName: string,\n    handler: Function\n  ): void {\n    ObjectManager.RegisterTriggerForAdd(entityName, handler)\n    ObjectManager.RegisterTriggerForUpdate(entityName, handler, false)\n  }\n\n  static RegisterTriggerForRemove(entityName: string, handler: any) {\n    entityDefinitions[entityName].TriggersForRemove.push(handler)\n  }\n\n  setViewerUserId(Viewer_User_id: string): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest(req: any, res: any): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation(siteInformation: Object): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle(entityName: string) {\n    const foundLoaders = this.loadersSingle[entityName]\n    if (foundLoaders != null) return foundLoaders\n    else return (this.loadersSingle[entityName] = {})\n  }\n\n  getLoadersMultiple(entityName: string) {\n    const foundLoaders = this.loadersMultiple[entityName]\n    if (foundLoaders != null) return foundLoaders\n    else return (this.loadersMultiple[entityName] = {})\n  }\n\n  clearLoadersMultiple(entityName: string) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange(entityName: string, fields: Object, isDeletion: boolean) {\n    let records = this.changes[entityName]\n    if (records == null) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if (this.Viewer_User_id == null)\n      throw new Error('Object Manager: viewer user id has not been set')\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if (this.request == null)\n      throw new Error('Object Manager: request has not been set')\n\n    return this.request\n  }\n\n  getLoader(entityName: string, fieldName: string, multipleResults: boolean) {\n    if (!(entityName in entityDefinitions))\n      throw new Error('Can not find entity type named ' + entityName)\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple(entityName)\n      : this.getLoadersSingle(entityName)\n    let loader = loadersList[fieldName]\n    if (loader == null) {\n      if (multipleResults)\n        loader = new DataLoader(filter =>\n          entityDefinition.Persister.getObjectList(\n            entityName,\n            entityType,\n            filter\n          )\n        )\n      else\n        loader = new DataLoader(filter =>\n          entityDefinition.Persister.getOneObject(\n            entityName,\n            entityType,\n            filter\n          )\n        )\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject(entityName: string, filter: Object): Promise<User> {\n    // TODO x2000 Provide try catch with logging here!\n    // Special hack for anonymous users\n    if (entityName === 'User')\n      if (filter.id == defaultPersister.uuidNullAsString())\n        return Promise.resolve(User_0)\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys(filter)\n      .sort()\n      .join(',')\n    const loader = this.getLoader(entityName, loaderIdentifier, false)\n\n    return loader.load(filter).then(result => {\n      const changes = this.changes[entityName]\n      if (changes) {\n        // $FlowIssue - by convention all entity objects are expected to have an id\n        const change = changes[result.id]\n        if (change != null) {\n          if (change === deletedRecord)\n            result = null // Object is not found, return null // Add or update\n          else Object.assign(result, change)\n        }\n      }\n      return result\n    })\n  }\n\n  getObjectList(entityName: string, filter: Object) {\n    // TODO x2000 Provide try catch with logging here!\n    const loaderIdentifier = Object.keys(filter)\n      .sort()\n      .join(',')\n    const loader = this.getLoader(entityName, loaderIdentifier, true)\n\n    return loader.load(filter).then(arrResults => {\n      const changes = this.changes[entityName]\n      if (changes) {\n        for (let ix = 0; ix < arrResults.length; ix++) {\n          const change = changes[arrResults[ix].id]\n          if (change != null) {\n            if (change === deletedRecord)\n              arrResults.splice(ix--, 1) // Reduce ix in order not to skip over a record // Add or update\n            else Object.assign(arrResults[ix], change)\n          }\n        }\n      }\n      return arrResults\n    })\n  }\n\n  invalidateLoaderCache(entityName: string, fields: any) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple(entityName)\n\n    const loadersSingle = this.getLoadersSingle(entityName)\n    for (let loaderFieldName in loadersSingle) {\n      if (loaderFieldName === 'id')\n        loadersSingle[loaderFieldName].clear(fields.id)\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers(\n    arrTriggers: Array<Function>,\n    fields: Object,\n    oldFields: ?Object\n  ) {\n    const arrPromises = []\n    for (let trigger of arrTriggers) {\n      arrPromises.push(trigger(this, fields, oldFields))\n    }\n\n    return Promise.all(arrPromises)\n  }\n\n  assignPrimaryKey(entityName: string, fields: any) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if (entityDefinition == null)\n      console.log('Cound not find entity ' + entityName)\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add(entityName: string, fields: any): any {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if (entityDefinition == null)\n      console.log('Cound not find entity ' + entityName)\n\n    // Generate primary key, if not already present\n    if (!fields.id) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if (entityName === 'User') this.setViewerUserId(fields.id.toString())\n\n    this.recordChange(entityName, fields, false)\n    await this.executeTriggers(entityDefinition.TriggersForAdd, fields)\n\n    await entityDefinition.Persister.add(\n      entityName,\n      fields,\n      entityDefinition.EntityType\n    )\n\n    this.invalidateLoaderCache(entityName, fields)\n\n    return fields.id\n  }\n\n  async update(entityName: string, fields: any): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if (entityDefinition == null)\n      console.log('💔  XXX Cound not find entity' + entityName) // Should that be recorded somewhere? Could be another\n\n    let oldFields = null\n    if (entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord) {\n      oldFields = this.getOneObject(entityName, {\n        id: fields.id,\n      })\n    }\n\n    this.recordChange(entityName, fields, false)\n    await this.executeTriggers(\n      entityDefinition.TriggersForUpdate,\n      fields,\n      oldFields\n    )\n\n    await entityDefinition.Persister.update(entityName, fields)\n\n    this.invalidateLoaderCache(entityName, fields)\n  }\n\n  async ensure(\n    entityName: string,\n    keyFields: Object,\n    ensureFields: Object\n  ): Promise<Object> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    const entity = await this.getOneObject(entityName, keyFields)\n\n    for (let ensuredFieldName of Object.keys(ensureFields)) {\n      let isMatchingValue = false\n      if (ensuredFieldName.endsWith('site_id')) {\n        if (!entity.site_id)\n          throw new Error(\n            'ensuredFieldName = ' +\n              ensuredFieldName +\n              ', however the entity does not have field site_id'\n          )\n        isMatchingValue =\n          entityDefinition.Persister.uuidToString(entity.site_id) ===\n          ensureFields.site_id\n      } else if (ensuredFieldName.endsWith('_id')) {\n        isMatchingValue = entityDefinition.Persister.uuidEquals(\n          ensureFields[ensuredFieldName],\n          // $FlowIssue by convention the field should be present\n          entity[ensuredFieldName]\n        )\n      } else {\n        isMatchingValue =\n          // $FlowIssue by convention the field should be present\n          ensureFields[ensuredFieldName] === entity[ensuredFieldName]\n      }\n\n      if (!isMatchingValue)\n        throw new Error(\n          '💔  Field value can not be ensured for field ' +\n            ensuredFieldName +\n            ' of ' +\n            entityName\n        )\n    }\n\n    return entity\n  }\n\n  async remove(entityName: string, fields: Object): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    this.recordChange(entityName, fields, true)\n    await this.executeTriggers(entityDefinition.TriggersForRemove, fields)\n\n    await entityDefinition.Persister.remove(entityName, fields)\n\n    this.invalidateLoaderCache(entityName, fields)\n  }\n\n  cursorForObjectInConnection(\n    entityName: string,\n    arr: Array<Object>,\n    obj: Object\n  ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString(obj.id)\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for (let ix = 0; ix < arr.length; ix++) {\n      const arr_element_id = entityDefinition.Persister.uuidToString(arr[ix].id)\n\n      if (arr_element_id === obj_id) {\n        arr[ix] = obj\n        break\n      }\n    }\n\n    let cursor = cursorForObjectInConnection(arr, obj)\n    if (cursor == null)\n      log.log(\n        'error',\n        '💔  Could not create cursor for object in connection for ' +\n          entityName,\n        {\n          obj,\n          arr,\n        }\n      )\n\n    return cursor\n  }\n\n  static initializePersisters(\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function\n  ): void {\n    console.log('🚀 Initializing persisters - start ...')\n\n    // TODO x8000 This should be re-done to work properly with more than one persister\n\n    for (let persister of setPersisters)\n      persister.initialize(runAsPartOfSetupDatabase, () => {\n        console.log('🏆 Initializing persisters - success.')\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity('User', User)\n\n// Get an Object Manager with site information\nexport async function getObjectManager(\n  req: Object,\n  res: Object\n): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation(req, res)\n\n  // Create individual object manager for each request\n  const objectManager = new ObjectManager()\n\n  // Set request and response\n  objectManager.setRequest(req, res)\n\n  // Place site builder configuration into object manager\n  objectManager.setSiteInformation(siteInformation)\n\n  return objectManager\n}\n"]}