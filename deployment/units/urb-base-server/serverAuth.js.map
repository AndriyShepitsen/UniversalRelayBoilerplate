{"version":3,"sources":["../../../units/urb-base-server/serverAuth.js"],"names":["require","load","serverAuth","use","json","req","res","next","login","objectManager","siteInformation","UserAccount_Identifier","body","toLowerCase","User_Secret","getObjectList","UserAccount_site_id","site_id","arr_UserAccount","length","status","error","getOneObject","id","UserAccount_User_id","a_User","Promise","compare","err","passwordMatch","resolve","a_UserSession","UserSession_site_id","UserSession_User_id","UserSession_Start","Date","UserSession_Expired","add","codeFoundriesInjected","user","UserToken1","encode","session_id","process","env","JWT_SECRET","cookie","httpOnly","success","UserToken2","message","post","createuser","Error","hash","User_PasswordHash","accountNameIsValidEmail","User_Email","User_site_id","Math","random","toString","substring","User_DisplayName","assignPrimaryKey","a_UserAccount","UserAccount_Type","all","UserSession","remove","expires"],"mappings":"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","file":"serverAuth.js","sourcesContent":["// @flow\n\nimport bcryptjs from 'bcryptjs'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../_configuration/urb-base-server/authExtensions'\nimport delayPromise from '../urb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { getUserAndSessionIDByUserToken1 } from './checkCredentials'\nimport logServerRequest from './logServerRequest'\nimport { getObjectManager } from './graphql/ObjectManager'\nimport { requestLoggerAuth } from '../_configuration/urb-base-server/requestLoggers'\n\nimport { validateEmail } from '../urb-base-universal/validation'\n\n// Read environment\nrequire('dotenv').load()\n\nconst serverAuth = express()\n\nserverAuth.use(bodyParser.json())\nserverAuth.use((req, res, next) => logServerRequest(req, res, next, requestLoggerAuth))\n\n//\n\nasync function login(req, res) {\n  const objectManager = await getObjectManager(req, res)\n  if (objectManager.siteInformation) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    await delayPromise(1000) // Wait for a second to hamper a possible potential brute force attack\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList('UserAccount', {\n        UserAccount_site_id: objectManager.siteInformation.site_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if (arr_UserAccount.length == 0) {\n        res.status(401).json({ error: 'ðŸ’”  User account not found' })\n      } else {\n        const a_User = await objectManager.getOneObject('User', {\n          id: arr_UserAccount[0].UserAccount_User_id,\n        })\n\n        if (\n          await new Promise(resolve =>\n            bcryptjs.compare(User_Secret, a_User.User_Secret, (err, passwordMatch) =>\n              resolve(passwordMatch),\n            ),\n          )\n        ) {\n          // Create user session object\n          const a_UserSession = {\n            UserSession_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n            UserSession_User_id: a_User.id,\n            UserSession_Start: new Date(),\n            UserSession_Expired: false,\n          }\n\n          // Addsession to database\n          objectManager.add('UserSession', a_UserSession)\n\n          res.codeFoundriesInjected = { user: a_User }\n\n          // User has authenticated correctly thus we create a JWT token ith the session. $FlowIssue - id will be filled in by ObjectManager.add\n          const UserToken1 = jwt.encode({ session_id: a_UserSession.id }, process.env.JWT_SECRET)\n\n          res.cookie('UserToken1', UserToken1, { httpOnly: true })\n          res.json({ success: true, UserToken2: a_User.UserToken2 })\n        } else res.status(401).json({ error: 'ðŸ’”  Incorrect password' })\n      }\n    } catch (error) {\n      res.status(401).json({ error: error.message })\n    }\n  }\n}\nserverAuth.post('/login', login)\n\n//\n\nasync function createuser(req, res) {\n  const objectManager = await getObjectManager(req, res)\n  if (objectManager.siteInformation) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList('UserAccount', {\n        UserAccount_site_id: objectManager.siteInformation.site_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if (arr_UserAccount.length > 0) throw new Error('ðŸ’”  User account already exists')\n\n      const User_PasswordHash = await new Promise(resolve =>\n        bcryptjs.hash(User_Secret, 8, (err, hash) => resolve(hash)),\n      )\n\n      // If account name looks like email address, use it as email\n      const accountNameIsValidEmail = validateEmail(UserAccount_Identifier)\n      const User_Email = accountNameIsValidEmail ? UserAccount_Identifier : ''\n\n      // Create the user object\n      const a_User = Object.assign(getNewUser(objectManager.siteInformation.site_id), {\n        User_site_id: objectManager.siteInformation.site_id,\n        UserToken2:\n          Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2),\n        User_Secret: User_PasswordHash,\n        User_DisplayName: UserAccount_Identifier,\n        User_Email: User_Email,\n      })\n      objectManager.assignPrimaryKey('User', a_User)\n\n      // Create user session object\n      const a_UserSession = {\n        UserSession_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n        UserSession_User_id: a_User.id,\n        UserSession_Start: new Date(),\n        UserSession_Expired: false,\n      }\n\n      // Create user account object\n      const a_UserAccount = {\n        UserAccount_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n        UserAccount_User_id: a_User.id,\n        UserAccount_Identifier: UserAccount_Identifier,\n        UserAccount_Type: 'un',\n      }\n\n      // Add user and session to database\n      await Promise.all([\n        objectManager.add('User', a_User),\n        objectManager.add('UserSession', a_UserSession),\n        objectManager.add('UserAccount', a_UserAccount),\n      ])\n\n      res.codeFoundriesInjected = { user: a_User }\n\n      // User has been created thus we create a JWT token. $FlowIssue - id will be filled in by ObjectManager.add\n      const UserToken1 = jwt.encode({ session_id: a_UserSession.id }, process.env.JWT_SECRET)\n\n      // Set cookie and return\n      res.cookie('UserToken1', UserToken1, { httpOnly: true })\n      res.json({ success: true })\n    } catch (error) {\n      res.status(401).json({ error: '' + error.message })\n    }\n  }\n}\nserverAuth.post('/createuser', createuser)\n\n//\n\nserverAuth.post('/logout', async (req, res) => {\n  const objectManager = await getObjectManager(req, res)\n  const UserSession = (await getUserAndSessionIDByUserToken1(objectManager, req)).UserSession\n\n  await objectManager.remove('UserSession', { id: UserSession.id })\n\n  res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n  res.json({ success: true })\n})\n\n// Add extensions - custom configurations\nauthExtensions(serverAuth)\n\nexport default serverAuth\n"]}