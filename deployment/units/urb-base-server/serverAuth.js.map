{"version":3,"sources":["../../../units/urb-base-server/serverAuth.js"],"names":["require","load","serverAuth","use","json","req","res","next","login","objectManager","siteInformation","UserAccount_Identifier","body","toLowerCase","User_Secret","getObjectList","UserAccount_site_id","site_id","arr_UserAccount","length","status","error","getOneObject","id","UserAccount_User_id","a_User","Promise","compare","err","passwordMatch","resolve","a_UserSession","UserSession_site_id","UserSession_User_id","UserSession_Start","Date","UserSession_Expired","add","codeFoundriesInjected","user","UserToken1","encode","session_id","process","env","JWT_SECRET","cookie","httpOnly","success","UserToken2","message","post","createuser","Error","hash","User_PasswordHash","accountNameIsValidEmail","User_Email","User_site_id","Math","random","toString","substring","User_DisplayName","assignPrimaryKey","a_UserAccount","UserAccount_Type","all","UserSession","remove","expires"],"mappings":"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","file":"serverAuth.js","sourcesContent":["// @flow\n\nimport bcryptjs from 'bcryptjs'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../_configuration/urb-base-server/authExtensions'\nimport delayPromise from '../urb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { validateEmail } from '../urb-base-universal/validation'\nimport { requestLoggerAuth } from '../_configuration/urb-base-server/requestLoggers'\n\nimport { getUserAndSessionIDByUserToken1 } from './checkCredentials'\nimport logServerRequest from './logServerRequest'\nimport { getObjectManager } from './graphql/ObjectManager'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst serverAuth = express()\n\nserverAuth.use( bodyParser.json() )\nserverAuth.use( ( req, res, next ) =>\n  logServerRequest( req, res, next, requestLoggerAuth )\n)\n\n//\n\nasync function login( req, res ) {\n  const objectManager = await getObjectManager( req, res )\n  if ( objectManager.siteInformation ) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    await delayPromise( 1000 ) // Wait for a second to hamper a possible potential brute force attack\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList( 'UserAccount', {\n        UserAccount_site_id: objectManager.siteInformation.site_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if ( arr_UserAccount.length === 0 ) {\n        res.status( 401 ).json({ error: 'ðŸ’”  User account not found' })\n      } else {\n        const a_User = await objectManager.getOneObject( 'User', {\n          id: arr_UserAccount[0].UserAccount_User_id,\n        })\n\n        if (\n          await new Promise( resolve =>\n            bcryptjs.compare(\n              User_Secret,\n              a_User.User_Secret,\n              ( err, passwordMatch ) => resolve( passwordMatch )\n            )\n          )\n        ) {\n          // Create user session object\n          const a_UserSession = {\n            UserSession_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n            UserSession_User_id: a_User.id,\n            UserSession_Start: new Date(),\n            UserSession_Expired: false,\n          }\n\n          // Addsession to database\n          objectManager.add( 'UserSession', a_UserSession )\n\n          res.codeFoundriesInjected = { user: a_User }\n\n          // User has authenticated correctly thus we create a JWT token ith the session.\n          const UserToken1 = jwt.encode(\n            // $FlowIssue - id will be filled in by ObjectManager.add\n            { session_id: a_UserSession.id },\n            process.env.JWT_SECRET\n          )\n\n          res.cookie( 'UserToken1', UserToken1, { httpOnly: true })\n          res.json({ success: true, UserToken2: a_User.UserToken2 })\n        } else res.status( 401 ).json({ error: 'ðŸ’”  Incorrect password' })\n      }\n    } catch ( error ) {\n      res.status( 401 ).json({ error: error.message })\n    }\n  }\n}\nserverAuth.post( '/login', login )\n\n//\n\nasync function createuser( req, res ) {\n  const objectManager = await getObjectManager( req, res )\n  if ( objectManager.siteInformation ) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList( 'UserAccount', {\n        UserAccount_site_id: objectManager.siteInformation.site_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if ( arr_UserAccount.length > 0 )\n        throw new Error( 'ðŸ’”  User account already exists' )\n\n      const User_PasswordHash = await new Promise( resolve =>\n        bcryptjs.hash( User_Secret, 8, ( err, hash ) => resolve( hash ) )\n      )\n\n      // If account name looks like email address, use it as email\n      const accountNameIsValidEmail = validateEmail( UserAccount_Identifier )\n      const User_Email = accountNameIsValidEmail ? UserAccount_Identifier : ''\n\n      // Create the user object\n      const a_User = Object.assign(\n        getNewUser( objectManager.siteInformation.site_id ),\n        {\n          User_site_id: objectManager.siteInformation.site_id,\n          UserToken2:\n            Math.random()\n              .toString( 36 )\n              .substring( 2 ) +\n            Math.random()\n              .toString( 36 )\n              .substring( 2 ),\n          User_Secret: User_PasswordHash,\n          User_DisplayName: UserAccount_Identifier,\n          User_Email: User_Email,\n        }\n      )\n      objectManager.assignPrimaryKey( 'User', a_User )\n\n      // Create user session object\n      const a_UserSession = {\n        UserSession_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n        UserSession_User_id: a_User.id,\n        UserSession_Start: new Date(),\n        UserSession_Expired: false,\n      }\n\n      // Create user account object\n      const a_UserAccount = {\n        UserAccount_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n        UserAccount_User_id: a_User.id,\n        UserAccount_Identifier: UserAccount_Identifier,\n        UserAccount_Type: 'un',\n      }\n\n      // Add user and session to database\n      await Promise.all([\n        objectManager.add( 'User', a_User ),\n        objectManager.add( 'UserSession', a_UserSession ),\n        objectManager.add( 'UserAccount', a_UserAccount ),\n      ])\n\n      res.codeFoundriesInjected = { user: a_User }\n\n      // User has been created thus we create a JWT token.\n      const UserToken1 = jwt.encode(\n        // $FlowIssue - id will be filled in by ObjectManager.add\n        { session_id: a_UserSession.id },\n        process.env.JWT_SECRET\n      )\n\n      // Set cookie and return\n      res.cookie( 'UserToken1', UserToken1, { httpOnly: true })\n      res.json({ success: true })\n    } catch ( error ) {\n      res.status( 401 ).json({ error: '' + error.message })\n    }\n  }\n}\nserverAuth.post( '/createuser', createuser )\n\n//\n\nserverAuth.post( '/logout', async( req, res ) => {\n  const objectManager = await getObjectManager( req, res )\n  const UserSession = ( await getUserAndSessionIDByUserToken1(\n    objectManager,\n    req\n  ) ).UserSession\n\n  await objectManager.remove( 'UserSession', { id: UserSession.id })\n\n  res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n  res.json({ success: true })\n})\n\n// Add extensions - custom configurations\nauthExtensions( serverAuth )\n\nexport default serverAuth\n"]}