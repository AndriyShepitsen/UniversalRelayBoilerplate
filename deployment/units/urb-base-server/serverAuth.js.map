{"version":3,"sources":["../../../units/urb-base-server/serverAuth.js"],"names":["require","load","serverAuth","use","json","req","res","next","login","objectManager","siteInformation","User_AccountName","body","toLowerCase","User_AccountPassword","getObjectList","arr_Users","length","status","error","a_User","Promise","compare","err","passwordMatch","resolve","codeFoundriesInjected","user","token","encode","user_id","id","process","env","JWT_SECRET","cookie","httpOnly","success","UserToken2","message","post","createuser","User_site_id","site_id","Error","hash","User_PasswordHash","accountNameIsValidEmail","User_Email","Math","random","toString","substring","User_DisplayName","add","UserToken1","expires","Date"],"mappings":"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","file":"serverAuth.js","sourcesContent":["// @flow\n\nimport bcrypt from 'bcrypt'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../_configuration/urb-base-server/authExtensions'\nimport delayPromise from '../urb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport logServerRequest from './logServerRequest'\nimport { getObjectManager } from './graphql/ObjectManager'\nimport { requestLoggerAuth } from '../_configuration/urb-base-server/requestLoggers'\n\nimport { validateEmail } from '../urb-base-universal/validation'\n\n// Read environment\nrequire('dotenv').load()\n\nconst serverAuth = express()\n\nserverAuth.use(bodyParser.json())\nserverAuth.use((req, res, next) => logServerRequest(req, res, next, requestLoggerAuth))\n\n//\n\nasync function login(req, res) {\n  const objectManager = await getObjectManager(req, res)\n  if (objectManager.siteInformation) {\n    let User_AccountName = req.body.User_AccountName.toLowerCase()\n    let User_AccountPassword = req.body.User_AccountPassword\n\n    await delayPromise(1000) // Wait for a second to slow down a possible potential force attack\n\n    try {\n      const arr_Users = await objectManager.getObjectList('User', {\n        User_AccountName: User_AccountName,\n      })\n\n      if (arr_Users.length == 0) res.status(401).json({ error: 'ðŸ’”  Incorrect user' })\n      else {\n        const a_User = arr_Users[0]\n\n        if (\n          await new Promise(resolve =>\n            bcrypt.compare(\n              User_AccountPassword,\n              a_User.User_AccountPassword,\n              (err, passwordMatch) => resolve(passwordMatch),\n            ),\n          )\n        ) {\n          res.codeFoundriesInjected = { user: a_User }\n\n          // User has authenticated correctly thus we create a JWT token\n          const token = jwt.encode({ user_id: a_User.id }, process.env.JWT_SECRET)\n\n          res.cookie('UserToken1', token, { httpOnly: true })\n          res.json({ success: true, UserToken2: a_User.UserToken2 })\n        } else res.status(401).json({ error: 'ðŸ’”  Incorrect password' })\n      }\n    } catch (error) {\n      res.status(401).json({ error: error.message })\n    }\n  }\n}\nserverAuth.post('/login', login)\n\n//\n\nasync function createuser(req, res) {\n  const objectManager = await getObjectManager(req, res)\n  if (objectManager.siteInformation) {\n    const User_AccountName = req.body.User_AccountName.toLowerCase()\n    const User_AccountPassword = req.body.User_AccountPassword\n\n    try {\n      const arr_Users = await objectManager.getObjectList('User', {\n        User_site_id: objectManager.siteInformation.site_id,\n        User_AccountName: User_AccountName,\n      })\n\n      if (arr_Users.length > 0) throw new Error('ðŸ’”  User account already exists')\n\n      const User_PasswordHash = await new Promise(resolve =>\n        bcrypt.hash(User_AccountPassword, 8, (err, hash) => resolve(hash)),\n      )\n\n      // If account name looks like email address, use it as email\n      const accountNameIsValidEmail = validateEmail(User_AccountName)\n      const User_Email = accountNameIsValidEmail ? User_AccountName : ''\n\n      // Create the user object\n      const a_User = Object.assign(getNewUser(objectManager.siteInformation.site_id), {\n        UserToken2:\n          Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2),\n        User_AccountName: User_AccountName,\n        User_AccountPassword: User_PasswordHash,\n        User_DisplayName: User_AccountName,\n        User_Email: User_Email,\n      })\n\n      // Add user to database\n      await objectManager.add('User', a_User)\n\n      res.codeFoundriesInjected = { user: a_User }\n\n      // User has been created thus we create a JWT token\n      const UserToken1 = jwt.encode({ user_id: a_User.id }, process.env.JWT_SECRET)\n\n      // Set cookie and return\n      res.cookie('UserToken1', UserToken1, { httpOnly: true })\n      res.json({ success: true })\n    } catch (error) {\n      res.status(401).json({ error: '' + error.message })\n    }\n  }\n}\nserverAuth.post('/createuser', createuser)\n\n//\n\nserverAuth.post('/logout', (req, res) => {\n  res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n  res.json({ success: true })\n})\n\n// Add extensions - custom configurations\nauthExtensions(serverAuth)\n\nexport default serverAuth\n"]}