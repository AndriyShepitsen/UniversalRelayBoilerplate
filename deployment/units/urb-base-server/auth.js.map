{"version":3,"sources":["../../../units/urb-base-server/auth.js"],"names":["require","load","auth","use","json","req","res","next","login","objectManager","siteInformation","User_AccountName","body","toLowerCase","User_AccountPassword","then","getObjectList","arr_Users","length","status","error","a_User","compare","err","User_AccountPasswordIsCorrect","codeFoundriesInjected","user","token","encode","user_id","id","process","env","JWT_SECRET","cookie","httpOnly","success","UserToken2","catch","reason","post","createuser","User_site_id","site_id","Promise","reject","hash","resolve","accountNameIsValidEmail","User_Email","Math","random","toString","substring","User_DisplayName","add","getOneObject","expires","Date"],"mappings":"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","file":"auth.js","sourcesContent":["// @flow\n\nimport bcrypt from 'bcrypt'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../_configuration/urb-base-server/authExtensions'\nimport delayPromise from '../urb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport logServerRequest from './logServerRequest'\nimport { getObjectManager } from './graphql/ObjectManager'\nimport { requestLoggerAuth } from '../_configuration/urb-base-server/requestLoggers'\n\nimport { validateEmail } from '../urb-base-universal/validation'\n\n// Read environment\nrequire('dotenv').load()\n\nconst auth = express()\n\nauth.use(bodyParser.json())\nauth.use((req, res, next) => logServerRequest(req, res, next, requestLoggerAuth))\n\n//\n\nasync function login(req, res) {\n  const objectManager = await getObjectManager(req, res)\n  if (objectManager.siteInformation) {\n    let User_AccountName = req.body.User_AccountName.toLowerCase()\n    let User_AccountPassword = req.body.User_AccountPassword\n\n    delayPromise(1000) // Wait for a second to slow down a possible potential force attack\n      .then(() =>\n        objectManager.getObjectList('User', {\n          User_AccountName: User_AccountName,\n        }),\n      )\n      .then(arr_Users => {\n        if (arr_Users.length == 0) res.status(401).json({ error: 'ðŸ’”  Incorrect user' })\n        else {\n          const a_User = arr_Users[0]\n\n          bcrypt.compare(User_AccountPassword, a_User.User_AccountPassword, function(\n            err,\n            User_AccountPasswordIsCorrect,\n          ) {\n            if (User_AccountPasswordIsCorrect) {\n              res.codeFoundriesInjected = { user: a_User }\n\n              // User has authenticated correctly thus we create a JWT token\n              var token = jwt.encode({ user_id: a_User.id }, process.env.JWT_SECRET)\n\n              res.cookie('UserToken1', token, { httpOnly: true })\n              res.json({ success: true, UserToken2: a_User.UserToken2 })\n            } else res.status(401).json({ error: 'ðŸ’”  Incorrect password' })\n          })\n        }\n      })\n      .catch(reason => {\n        res.status(401).json({ error: reason })\n      })\n  }\n}\nauth.post('/login', login)\n\n//\n\nasync function createuser(req, res) {\n  const objectManager = await getObjectManager(req, res)\n  if (objectManager.siteInformation) {\n    let User_AccountName = req.body.User_AccountName.toLowerCase()\n    let User_AccountPassword = req.body.User_AccountPassword\n    objectManager\n      .getObjectList('User', {\n        User_site_id: objectManager.siteInformation.site_id,\n        User_AccountName: User_AccountName,\n      })\n      .then(arr_Users => {\n        if (arr_Users.length > 0) return Promise.reject('ðŸ’”  User account already exists')\n        else\n          return new Promise(resolve => {\n            bcrypt.hash(User_AccountPassword, 8, (err, User_AccountPassword) =>\n              resolve(User_AccountPassword),\n            )\n          }).then(User_AccountPassword => {\n            // If account name looks like email address, use it as email\n            const accountNameIsValidEmail = validateEmail(User_AccountName)\n            const User_Email = accountNameIsValidEmail ? User_AccountName : ''\n\n            const a_User = Object.assign(getNewUser(objectManager.siteInformation.site_id), {\n              UserToken2:\n                Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2),\n              User_AccountName: User_AccountName,\n              User_AccountPassword: User_AccountPassword,\n              User_DisplayName: User_AccountName,\n              User_Email: User_Email,\n            })\n            return objectManager.add('User', a_User)\n          })\n      })\n      .then(user_id =>\n        objectManager.getOneObject('User', {\n          id: user_id,\n          User_site_id: objectManager.siteInformation.site_id,\n        }),\n      )\n      .then(a_User => {\n        res.codeFoundriesInjected = { user: a_User }\n\n        // User has been created thus we create a JWT token\n        var token = jwt.encode({ user_id: a_User.id }, process.env.JWT_SECRET)\n\n        res.cookie('UserToken1', token, { httpOnly: true })\n        res.json({ success: true })\n      })\n      .catch(reason => {\n        res.status(401).json({ error: '' + reason })\n      })\n  }\n}\nauth.post('/createuser', createuser)\n\n//\n\nauth.post('/logout', (req, res) => {\n  res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n  res.json({ success: true })\n})\n\n// Add extensions - custom configurations\nauthExtensions(auth)\n\nexport default auth\n"]}