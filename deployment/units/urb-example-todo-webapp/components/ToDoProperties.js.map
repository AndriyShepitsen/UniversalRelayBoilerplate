{"version":3,"sources":["../../../../units/urb-example-todo-webapp/components/ToDoProperties.jsx"],"names":["styles","container","display","flexWrap","formControl","margin","theme","spacing","unit","ToDo_Properties","props","context","_handle_Close","handlerClose","_handle_OK","handlerUpdate","ToDo_Text","state","open","setState","event","target","value","Component"],"mappings":";;AAEA,0C;AACA,0C;AACA,yD;AACA,qC;AACA,4B;AACA;AACA,gD;;AAEA,GAAMA,QAAS,QAATA,OAAS,cAAU;AACvBC,UAAW;AACTC,QAAS,MADA;AAETC,SAAU,MAFD,CADY;;AAKvBC,YAAa;AACXC,OAAQC,MAAMC,OAAN,CAAcC,IADX,CALU,CAAV,EAAf,C;;;;AAUMC,e;;;;;;;;;;;AAWJ,yBAAYC,KAAZ,CAA2BC,OAA3B,CAA4C;AACpCD,KADoC,CAC7BC,OAD6B;;;;;;;;;AAU5CC,aAV4C,CAU5B,UAAM;AACpB,MAAKF,KAAL,CAAWG,YAAX;AACD,CAZ2C;;AAc5CC,UAd4C,CAc/B,UAAM;AACjB,MAAKJ,KAAL,CAAWK,aAAX,CAAyB,CAAEC,UAAW,MAAKC,KAAL,CAAWD,SAAxB,CAAzB;;AAEA,MAAKN,KAAL,CAAWG,YAAX;AACD,CAlB2C,IAGlCG,UAHkC,CAGpB,MAAKN,KAHe,CAGlCM,SAHkC,CAK1C,MAAKC,KAAL,CAAa,CACXD,mBADW,CAAb,CAL0C,aAQ3C,C;;AAYQ;AACCA,SADD,CACe,KAAKC,KADpB,CACCD,SADD;;AAGP;AACE;AACE,gDAAQ,KAAM,KAAKN,KAAL,CAAWQ,IAAzB,CAA+B,eAAgB,KAAKN,aAApD;AACE,8DADF;AAEE;AACE;AACE,MAAM,OADR;AAEE,UAAW,IAFb;AAGE,MAAOI,SAHT;AAIE,SAAU,+BAAS,QAAKG,QAAL,CAAc,CAAEH,UAAWI,MAAMC,MAAN,CAAaC,KAA1B,CAAd,CAAT,EAJZ,EADF,CAFF;;;AAUE;AACE,gDAAQ,QAAS,KAAKV,aAAtB,WADF;AAEE,gDAAQ,QAAS,KAAKE,UAAtB,CAAkC,MAAM,SAAxC,OAFF,CAVF,CADF,CADF;;;;;;;AAqBD,C,6BAvD2B,gBAAMS,S;;;AA0DrB,uBAAWvB,MAAX,EAAmBS,eAAnB,C","file":"ToDoProperties.js","sourcesContent":["// @flow\n\nimport Button from 'material-ui/Button'\nimport Dialog, { DialogActions, DialogContent, DialogTitle } from 'material-ui/Dialog'\nimport FormControl from 'material-ui/Form/FormControl'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { withStyles } from 'material-ui/styles'\nimport TextField from 'material-ui/TextField'\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n})\n\nclass ToDo_Properties extends React.Component<\n  {\n    ToDo_Text: string,\n    open: boolean,\n    handlerUpdate: PropTypes.func.isRequired,\n    handlerClose: PropTypes.func.isRequired,\n  },\n  {\n    ToDo_Text: string,\n  },\n> {\n  constructor(props: Object, context: Object) {\n    super(props, context)\n\n    const { ToDo_Text } = this.props\n\n    this.state = {\n      ToDo_Text,\n    }\n  }\n\n  _handle_Close = () => {\n    this.props.handlerClose()\n  }\n\n  _handle_OK = () => {\n    this.props.handlerUpdate({ ToDo_Text: this.state.ToDo_Text })\n\n    this.props.handlerClose()\n  }\n\n  render() {\n    const { ToDo_Text } = this.state\n\n    return (\n      <div>\n        <Dialog open={this.props.open} onRequestClose={this._handle_Close}>\n          <DialogTitle>ToDo</DialogTitle>\n          <DialogContent>\n            <TextField\n              label=\"To Do\"\n              fullWidth={true}\n              value={ToDo_Text}\n              onChange={event => this.setState({ ToDo_Text: event.target.value })}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this._handle_Close}>Cancel</Button>\n            <Button onClick={this._handle_OK} color=\"primary\">\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ToDo_Properties)\n"]}