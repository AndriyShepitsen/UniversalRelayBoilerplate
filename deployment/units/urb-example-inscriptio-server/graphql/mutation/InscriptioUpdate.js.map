{"version":3,"sources":["../../../../../units/urb-example-inscriptio-server/graphql/mutation/InscriptioUpdate.js"],"names":["name","inputFields","id","type","Inscriptio_LocationLat","Inscriptio_LocationLon","Inscriptio_Notes","outputFields","Inscriptio","resolve","context","local_id","args","objectManager","rootValue","getOneObject","mutateAndGetPayload","update"],"mappings":";;AAEA;AACA;;AAEA,sD;;AAEe,+CAA6B;AAC1CA,KAAM,kBADoC;;AAG1CC,YAAa;AACXC,GAAI,CAAEC,KAAM,+CAAR,CADO;AAEXC,uBAAwB,CAAED,KAAM,mDAAR,CAFb;AAGXE,uBAAwB,CAAEF,KAAM,mDAAR,CAHb;AAIXG,iBAAkB,CAAEH,KAAM,mDAAR,CAJP,CAH6B;;;AAU1CI,aAAc;AACZC,WAAY;AACVL,6BADU;AAEVM,QAAS;;;AAGPC,OAHO,WACLC,SADK,MACLA,QADK,IAEFC,KAFE;AAIMC,aAJN,OAILC,SAJK;AAKJD,cAAcE,YAAd,CAA4B,YAA5B,CAA0C,CAAEb,GAAIS,QAAN,CAA1C,CALI,GAFC,CADA,CAV4B;;;;AAsB1CK,oBAAqB;;AAEnBN,OAFmB,WACjBR,GADiB,OACjBA,EADiB,CACbE,sBADa,OACbA,sBADa,CACWC,sBADX,OACWA,sBADX,CACmCC,gBADnC,OACmCA,gBADnC;AAGNO,aAHM,OAGjBC,SAHiB;;AAKbH,QALa,CAKF,+BAAcT,EAAd,EAAmBA,EALjB;;AAObW,cAAcI,MAAd,CAAsB,YAAtB,CAAoC;AACxCf,GAAIS,QADoC;AAExCP,6CAFwC;AAGxCC,6CAHwC;AAIxCC,iCAJwC,CAApC,CAPa;;;AAcZ,CAAEK,iBAAF,CAdY,2DAtBqB,CAA7B,C","file":"InscriptioUpdate.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport InscriptioType from '../type/InscriptioType'\n\nexport default mutationWithClientMutationId({\n  name: 'InscriptioUpdate',\n\n  inputFields: {\n    id: { type: new GraphQLNonNull( GraphQLID ) },\n    Inscriptio_LocationLat: { type: new GraphQLNonNull( GraphQLString ) },\n    Inscriptio_LocationLon: { type: new GraphQLNonNull( GraphQLString ) },\n    Inscriptio_Notes: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n\n  outputFields: {\n    Inscriptio: {\n      type: InscriptioType,\n      resolve: (\n        { local_id },\n        { ...args },\n        context,\n        { rootValue: objectManager }\n      ) => objectManager.getOneObject( 'Inscriptio', { id: local_id }),\n    },\n  },\n\n  mutateAndGetPayload: async(\n    { id, Inscriptio_LocationLat, Inscriptio_LocationLon, Inscriptio_Notes },\n    context,\n    { rootValue: objectManager }\n  ) => {\n    const local_id = fromGlobalId( id ).id\n\n    await objectManager.update( 'Inscriptio', {\n      id: local_id,\n      Inscriptio_LocationLat,\n      Inscriptio_LocationLon,\n      Inscriptio_Notes,\n    })\n\n    return { local_id }\n  },\n})\n"]}