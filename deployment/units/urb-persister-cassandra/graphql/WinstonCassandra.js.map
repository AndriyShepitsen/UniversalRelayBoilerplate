{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/WinstonCassandra.js"],"names":["util","require","events","winston","cql","defaultOptions","table","partitionBy","consistency","types","consistencies","quorum","level","name","Cassandra","options","Error","keyspace","extend","schemaStatus","EventEmitter","setMaxListeners","client","Client","inherits","Transport","prototype","log","msg","meta","callback","self","_insertLog","err","getKey","Date","toISOString","slice","key","execute","inspect","prepare","target","sources","call","arguments","forEach","source","prop","hasOwnProperty","transports","module","exports"],"mappings":"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","file":"WinstonCassandra.js","sourcesContent":["// @flow\n\nvar util = require('util')\nvar events = require('events')\n\nvar winston = require('winston')\nvar cql = require('cassandra-driver')\n\nvar defaultOptions = {\n  //column family to store the logs\n  table: 'logs',\n  //determines if the partition key is changed per day or hour\n  partitionBy: 'day',\n  consistency: cql.types.consistencies.quorum,\n  level: 'info',\n  name: 'cassandra',\n}\n\nfunction Cassandra(options) {\n  if (!options) {\n    throw new Error('Transport options is required')\n  }\n  if (!options.keyspace) {\n    throw new Error('You must specify the options.keyspace')\n  }\n  this.options = Cassandra.extend({}, defaultOptions, options)\n  //winston options\n  this.name = this.options.name\n  this.level = this.options.level\n  //create a queue object that will emit the event 'prepared'\n  this.schemaStatus = new events.EventEmitter()\n  this.schemaStatus.setMaxListeners(0)\n  this.client = new cql.Client(this.options)\n}\n\nutil.inherits(Cassandra, winston.Transport)\n\nCassandra.prototype.log = function(level, msg, meta, callback) {\n  var self = this\n  return self._insertLog(level, msg, meta, function(err) {\n    callback(err, !err)\n  })\n}\n\n/**\n * Gets the log partition key\n */\nCassandra.prototype.getKey = function() {\n  if (this.options.partitionBy === 'day') {\n    return new Date().toISOString().slice(0, 10)\n  } else if (this.options.partitionBy === 'hour') {\n    return new Date().toISOString().slice(0, 13)\n  }\n  return null\n}\n\n/**\n * Inserts the log in the db\n */\nCassandra.prototype._insertLog = function(level, msg, meta, callback) {\n  var key = this.getKey()\n  if (!key) {\n    return callback(new Error('Partition ' + this.options.partitionBy + ' not supported'), false)\n  }\n  //execute as a prepared query as it would be executed multiple times\n  return this.client.execute(\n    'INSERT INTO ' +\n      this.options.table +\n      ' (key, date, level, message, meta) VALUES (?, ?, ?, ?, ?)',\n    [key, new Date(), level, msg, util.inspect(meta)],\n    { prepare: true, consistency: this.options.consistency },\n    callback,\n  )\n}\n\n/**\n * Merge the contents of two or more objects together into the first object.\n * Similar to jQuery.extend\n */\nCassandra.extend = function(target) {\n  var sources = [].slice.call(arguments, 1)\n  sources.forEach(function(source) {\n    for (var prop in source) {\n      if (source.hasOwnProperty(prop)) {\n        target[prop] = source[prop]\n      }\n    }\n  })\n  return target\n}\n\n//Define as a property of winston transports for backward compatibility\nwinston.transports.Cassandra = Cassandra\nmodule.exports = Cassandra\n//The rest of winston transports uses (module).name convention\n//Create a field to allow consumers to interact in the same way\nmodule.exports.Cassandra = Cassandra\nmodule.exports.types = cql.types\n"]}