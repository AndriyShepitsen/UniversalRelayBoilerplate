{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/WinstonCassandra.js"],"names":["defaultOptions","table","partitionBy","consistency","types","consistencies","quorum","level","name","Cassandra","options","Error","keyspace","schemaStatus","EventEmitter","setMaxListeners","client","Client","inherits","Transport","prototype","log","msg","meta","callback","self","_insertLog","err","getKey","Date","toISOString","slice","key","execute","inspect","prepare","transports","module","exports"],"mappings":"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","file":"WinstonCassandra.js","sourcesContent":["// @flow\n\nimport util from 'util'\nimport events from 'events'\n\nimport winston from 'winston'\nimport cql from 'cassandra-driver'\n\nvar defaultOptions = {\n  //column family to store the logs\n  table: 'logs',\n  //determines if the partition key is changed per day or hour\n  partitionBy: 'day',\n  consistency: cql.types.consistencies.quorum,\n  level: 'info',\n  name: 'cassandra',\n}\n\nfunction Cassandra( options: Object ) {\n  if ( !options ) {\n    throw new Error( 'Transport options is required' )\n  }\n\n  if ( !options.keyspace ) {\n    throw new Error( 'You must specify the options.keyspace' )\n  }\n\n  this.options = Object.assign({}, defaultOptions, options )\n\n  //winston options\n  this.name = this.options.name\n  this.level = this.options.level\n\n  //create a queue object that will emit the event 'prepared'\n  this.schemaStatus = new events.EventEmitter()\n  this.schemaStatus.setMaxListeners( 0 )\n  this.client = new cql.Client( this.options )\n}\n\nutil.inherits( Cassandra, winston.Transport )\n\nCassandra.prototype.log = function( level, msg, meta, callback ) {\n  var self = this\n  return self._insertLog( level, msg, meta, function( err ) {\n    callback( err, !err )\n  })\n}\n\n/**\n * Gets the log partition key\n */\nCassandra.prototype.getKey = function() {\n  if ( this.options.partitionBy === 'day' ) {\n    return new Date().toISOString().slice( 0, 10 )\n  } else if ( this.options.partitionBy === 'hour' ) {\n    return new Date().toISOString().slice( 0, 13 )\n  }\n  return null\n}\n\n/**\n * Inserts the log in the db\n */\nCassandra.prototype._insertLog = function( level, msg, meta, callback ) {\n  var key = this.getKey()\n  if ( !key ) {\n    return callback(\n      new Error( 'Partition ' + this.options.partitionBy + ' not supported' ),\n      false\n    )\n  }\n  //execute as a prepared query as it would be executed multiple times\n  return this.client.execute(\n    'INSERT INTO ' +\n      this.options.table +\n      ' (key, date, level, message, meta) VALUES (?, ?, ?, ?, ?)',\n    [ key, new Date(), level, msg, util.inspect( meta ) ],\n    { prepare: true, consistency: this.options.consistency },\n    callback\n  )\n}\n\n//Define as a property of winston transports for backward compatibility\nwinston.transports.Cassandra = Cassandra\nmodule.exports = Cassandra\n//The rest of winston transports uses (module).name convention\n//Create a field to allow consumers to interact in the same way\nmodule.exports.Cassandra = Cassandra\nmodule.exports.types = cql.types\n"]}