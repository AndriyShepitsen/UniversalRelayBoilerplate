{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/WinstonCassandra.js"],"names":["util","require","events","winston","cql","defaultOptions","table","partitionBy","consistency","types","consistencies","quorum","level","name","Cassandra","options","Error","keyspace","schemaStatus","EventEmitter","setMaxListeners","client","Client","inherits","Transport","prototype","log","msg","meta","callback","self","_insertLog","err","getKey","Date","toISOString","slice","key","execute","inspect","prepare","transports","module","exports"],"mappings":"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","file":"WinstonCassandra.js","sourcesContent":["// @flow\n\nvar util = require('util')\nvar events = require('events')\n\nvar winston = require('winston')\nvar cql = require('cassandra-driver')\n\nvar defaultOptions = {\n  //column family to store the logs\n  table: 'logs',\n  //determines if the partition key is changed per day or hour\n  partitionBy: 'day',\n  consistency: cql.types.consistencies.quorum,\n  level: 'info',\n  name: 'cassandra',\n}\n\nfunction Cassandra(options: Object) {\n  if (!options) {\n    throw new Error('Transport options is required')\n  }\n\n  if (!options.keyspace) {\n    throw new Error('You must specify the options.keyspace')\n  }\n\n  this.options = Object.assign({}, defaultOptions, options)\n\n  //winston options\n  this.name = this.options.name\n  this.level = this.options.level\n\n  //create a queue object that will emit the event 'prepared'\n  this.schemaStatus = new events.EventEmitter()\n  this.schemaStatus.setMaxListeners(0)\n  this.client = new cql.Client(this.options)\n}\n\nutil.inherits(Cassandra, winston.Transport)\n\nCassandra.prototype.log = function(level, msg, meta, callback) {\n  var self = this\n  return self._insertLog(level, msg, meta, function(err) {\n    callback(err, !err)\n  })\n}\n\n/**\n * Gets the log partition key\n */\nCassandra.prototype.getKey = function() {\n  if (this.options.partitionBy === 'day') {\n    return new Date().toISOString().slice(0, 10)\n  } else if (this.options.partitionBy === 'hour') {\n    return new Date().toISOString().slice(0, 13)\n  }\n  return null\n}\n\n/**\n * Inserts the log in the db\n */\nCassandra.prototype._insertLog = function(level, msg, meta, callback) {\n  var key = this.getKey()\n  if (!key) {\n    return callback(new Error('Partition ' + this.options.partitionBy + ' not supported'), false)\n  }\n  //execute as a prepared query as it would be executed multiple times\n  return this.client.execute(\n    'INSERT INTO ' +\n      this.options.table +\n      ' (key, date, level, message, meta) VALUES (?, ?, ?, ?, ?)',\n    [key, new Date(), level, msg, util.inspect(meta)],\n    { prepare: true, consistency: this.options.consistency },\n    callback,\n  )\n}\n\n//Define as a property of winston transports for backward compatibility\nwinston.transports.Cassandra = Cassandra\nmodule.exports = Cassandra\n//The rest of winston transports uses (module).name convention\n//Create a field to allow consumers to interact in the same way\nmodule.exports.Cassandra = Cassandra\nmodule.exports.types = cql.types\n"]}