{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/PersisterCassandra.js"],"names":["Uuid","types","Uuid_Null_String","Uuid_Null","fromString","ExpressCassandraClient","createClient","clientOptions","ormOptions","defaultReplicationStrategy","class","replication_factor","migration","disableTTYConfirmation","createKeyspace","PersisterCassandra","tableSchemas","Map","entityName","ObjectType","filters","resultPromises","filter","push","Promise","resolve","reject","updateUuidsInFields","instance","findOne","raw","allow_filtering","err","entity","all","find","arrEntities","arrRetObj","fields","schemaFields","_properties","schema","fieldName","fieldType","fieldValue","save","add","delete","str","random","id","toString","id1","id2","equals","tableName","tableSchema","set","console","error","process","exit","modelInstance","User","get_cql_client","client","execute","result","runAsPartOfSetupDatabase","cb","enrolledTables","connect","log","message","setTimeout","arrSchemas","keys","get","loadOneTableSchemaFromArray","length","splice","loadSchema","name"],"mappings":"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","file":"PersisterCassandra.js","sourcesContent":["// @flow\n\nimport CassandraDriver from 'cassandra-driver'\nimport ExpressCassandra from 'express-cassandra'\n\nimport CassandraOptions from './CassandraOptions'\nimport WinstonCassandra from './WinstonCassandra'\n\nconst Uuid = CassandraDriver.types.Uuid\nconst Uuid_Null_String = '00000000-0000-0000-0000-000000000000'\nconst Uuid_Null = Uuid.fromString( Uuid_Null_String )\n\nconst ExpressCassandraClient = ExpressCassandra.createClient({\n  clientOptions: CassandraOptions, // Options are pre-set in a separate part of the application, they are correct\n  ormOptions: {\n    defaultReplicationStrategy: {\n      class: 'SimpleStrategy',\n      replication_factor: 1,\n    },\n    migration: 'alter',\n    disableTTYConfirmation: true,\n    createKeyspace: true,\n  },\n})\n\nexport default class PersisterCassandra {\n  tableSchemas: ?Map<string, Object>\n\n  constructor() {\n    this.tableSchemas = new Map()\n  }\n\n  getOneObject(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<any> {\n    const resultPromises = []\n\n    for ( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          this.updateUuidsInFields( entityName, filter )\n          ExpressCassandraClient.instance[entityName].findOne(\n            filter,\n            {\n              raw: true,\n              allow_filtering: true,\n            },\n            ( err, entity ) => {\n              if ( err ) reject( err )\n              else {\n                if ( entity != null ) resolve( new ObjectType( entity ) )\n                else resolve( null )\n              }\n            }\n          )\n        })\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  getObjectList(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<Array<Object>> {\n    const resultPromises = []\n\n    for ( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          this.updateUuidsInFields( entityName, filter )\n          ExpressCassandraClient.instance[entityName].find(\n            filter,\n            {\n              raw: true,\n              allow_filtering: true,\n            },\n            ( err, arrEntities ) => {\n              if ( err ) reject( err )\n              else {\n                const arrRetObj = []\n                for ( let entity of arrEntities )\n                  arrRetObj.push( new ObjectType( entity ) )\n                resolve( arrRetObj )\n              }\n            }\n          )\n        })\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  updateUuidsInFields( entityName: string, fields: any ) {\n    const schemaFields =\n      ExpressCassandraClient.instance[entityName]._properties.schema.fields\n    for ( let fieldName in fields ) {\n      const fieldType = schemaFields[fieldName]\n      if ( fieldType === 'uuid' ) {\n        const fieldValue = fields[fieldName]\n        if ( !( fieldValue instanceof Uuid ) )\n          fields[fieldName] = Uuid.fromString( fieldValue )\n      }\n    }\n  }\n\n  add( entityName: string, fields: any ): Promise<> {\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      const entity = new ExpressCassandraClient.instance[entityName]( fields )\n      entity.save( err => {\n        if ( err ) reject( err )\n        else resolve()\n      })\n    })\n  }\n\n  update( entityName: string, fields: any ): Promise<> {\n    // TODO x2000 Optimize this with update, possibly. Maybe it's not so bad to read first after all\n    return this.add( entityName, fields )\n  }\n\n  remove( entityName: string, fields: any ): Promise<> {\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.instance[entityName].delete( fields, err => {\n        if ( err ) reject( err )\n        else resolve()\n      })\n    })\n  }\n\n  createLogger() {\n    return new WinstonCassandra( CassandraOptions )\n  }\n\n  uuidFromString( str: string ) {\n    return Uuid.fromString( str )\n  }\n\n  uuidRandom() {\n    return Uuid.random()\n  }\n\n  uuidNull() {\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n    return Uuid_Null_String\n  }\n\n  uuidToString( id: any ): string {\n    if ( id instanceof Uuid ) id = id.toString()\n\n    return id\n  }\n\n  uuidEquals( id1: any, id2: any ): boolean {\n    return id1.equals( id2 )\n  }\n\n  addTableSchema( tableName: string, tableSchema: Object ): void {\n    if ( this.tableSchemas ) this.tableSchemas.set( tableName, tableSchema )\n    else {\n      console.error(\n        '💔 Attempting to add table schemas after express-cassandra client connect.'\n      )\n      process.exit( 1 )\n    }\n  }\n\n  confirmHealth(): Promise<> {\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.modelInstance.User.get_cql_client(\n        ( err, client ) => {\n          if ( err ) reject( err )\n          else\n            client.execute(\n              'select release_version from system.local;',\n              ( err, result ) => {\n                if ( err ) reject( err )\n                else resolve()\n              }\n            )\n        }\n      )\n    })\n  }\n\n  initialize( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    // All table schemas should have been added by now.\n    const enrolledTables = this.tableSchemas\n    this.tableSchemas = null // Free up the memory that is not needed any more and indicate that we can not add any more\n\n    ExpressCassandraClient.connect( err => {\n      if ( err ) {\n        console.log( '💔 Could not connect to Cassandra: ' + err.message )\n        setTimeout( () => process.exit( 1 ), 5000 ) // Exit the process. A process manager like pm2 would re-start\n      } else if ( !enrolledTables ) console.log( '💔 Table schemas missing!' )\n      else {\n        const arrSchemas = []\n        for ( let tableName of enrolledTables.keys() )\n          arrSchemas.push([ tableName, enrolledTables.get( tableName ) ])\n\n        this.loadOneTableSchemaFromArray(\n          arrSchemas,\n          runAsPartOfSetupDatabase,\n          cb\n        )\n      }\n    })\n  }\n\n  loadOneTableSchemaFromArray(\n    arrSchemas: Array<any>,\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function\n  ): void {\n    if ( arrSchemas.length > 0 ) {\n      const tableName = arrSchemas[0][0]\n      const tableSchema = arrSchemas[0][1]\n\n      arrSchemas.splice( 0, 1 )\n\n      ExpressCassandraClient.loadSchema( tableName, tableSchema, err => {\n        if ( err ) {\n          console.log(\n            '💔 Initializing Cassandra persister - error while creating ' +\n              tableName +\n              '!'\n          )\n          console.error( err.message )\n          process.exit( 1 )\n        } else {\n          if ( runAsPartOfSetupDatabase )\n            console.log(\n              '🛢 Table ' +\n                ExpressCassandraClient.modelInstance[tableName]._properties\n                  .name +\n                ' ready.'\n            )\n\n          this.loadOneTableSchemaFromArray(\n            arrSchemas,\n            runAsPartOfSetupDatabase,\n            cb\n          ) // Load the next table\n          return\n        }\n      })\n    } else {\n      cb()\n    }\n  }\n}\n"]}