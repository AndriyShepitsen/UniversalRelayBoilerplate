{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/PersisterCassandra.js"],"names":["Uuid","types","Uuid_Null_String","Uuid_Null","fromString","ExpressCassandraClient","createClient","clientOptions","ormOptions","defaultReplicationStrategy","class","replication_factor","migration","disableTTYConfirmation","createKeyspace","PersisterCassandra","tableSchemas","Map","entityName","ObjectType","filters","resultPromises","filter","push","Promise","resolve","reject","updateUuidsInFields","instance","findOne","raw","allow_filtering","err","entity","all","find","arrEntities","arrRetObj","fields","schemaFields","_properties","schema","fieldName","fieldType","fieldValue","save","add","delete","str","random","id","toString","id1","id2","equals","tableName","tableSchema","set","console","error","process","exit","modelInstance","User","get_cql_client","client","execute","result","runAsPartOfSetupDatabase","cb","enrolledTables","connect","log","message","setTimeout","arrSchemas","keys","get","loadOneTableSchemaFromArray","length","splice","loadSchema","name"],"mappings":"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","file":"PersisterCassandra.js","sourcesContent":["// @flow\n\nimport CassandraDriver from 'cassandra-driver'\nimport ExpressCassandra from 'express-cassandra'\n\nimport CassandraOptions from './CassandraOptions'\nimport WinstonCassandra from './WinstonCassandra'\n\nconst Uuid = CassandraDriver.types.Uuid\nconst Uuid_Null_String = '00000000-0000-0000-0000-000000000000'\nconst Uuid_Null = Uuid.fromString(Uuid_Null_String)\n\nconst ExpressCassandraClient = ExpressCassandra.createClient({\n  clientOptions: CassandraOptions, // Options are pre-set in a separate part of the application, they are correct\n  ormOptions: {\n    defaultReplicationStrategy: {\n      class: 'SimpleStrategy',\n      replication_factor: 1,\n    },\n    migration: 'alter',\n    disableTTYConfirmation: true,\n    createKeyspace: true,\n  },\n})\n\nexport default class PersisterCassandra {\n  tableSchemas: ?Map<string, Object>\n\n  constructor() {\n    this.tableSchemas = new Map()\n  }\n\n  getOneObject(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<any> {\n    const resultPromises = []\n\n    for (let filter of filters)\n      resultPromises.push(\n        new Promise((resolve, reject) => {\n          this.updateUuidsInFields(entityName, filter)\n          ExpressCassandraClient.instance[entityName].findOne(\n            filter,\n            {\n              raw: true,\n              allow_filtering: true,\n            },\n            (err, entity) => {\n              if (err) reject(err)\n              else {\n                if (entity != null) resolve(new ObjectType(entity))\n                else resolve(null)\n              }\n            }\n          )\n        })\n      )\n\n    return Promise.all(resultPromises)\n  }\n\n  getObjectList(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<Array<any>> {\n    const resultPromises = []\n\n    for (let filter of filters)\n      resultPromises.push(\n        new Promise((resolve, reject) => {\n          this.updateUuidsInFields(entityName, filter)\n          ExpressCassandraClient.instance[entityName].find(\n            filter,\n            {\n              raw: true,\n              allow_filtering: true,\n            },\n            (err, arrEntities) => {\n              if (err) reject(err)\n              else {\n                const arrRetObj = []\n                for (let entity of arrEntities)\n                  arrRetObj.push(new ObjectType(entity))\n                resolve(arrRetObj)\n              }\n            }\n          )\n        })\n      )\n\n    return Promise.all(resultPromises)\n  }\n\n  updateUuidsInFields(entityName: string, fields: any) {\n    const schemaFields =\n      ExpressCassandraClient.instance[entityName]._properties.schema.fields\n    for (let fieldName in fields) {\n      const fieldType = schemaFields[fieldName]\n      if (fieldType === 'uuid') {\n        const fieldValue = fields[fieldName]\n        if (!(fieldValue instanceof Uuid))\n          fields[fieldName] = Uuid.fromString(fieldValue)\n      }\n    }\n  }\n\n  add(entityName: string, fields: any): Promise<any> {\n    this.updateUuidsInFields(entityName, fields)\n\n    return new Promise((resolve, reject) => {\n      const entity = new ExpressCassandraClient.instance[entityName](fields)\n      entity.save(err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  update(entityName: string, fields: any): Promise<null> {\n    // TODO x2000 Optimize this with update, possibly. Maybe it's not so bad to read first after all\n    return this.add(entityName, fields)\n  }\n\n  remove(entityName: string, fields: any): Promise<any> {\n    this.updateUuidsInFields(entityName, fields)\n\n    return new Promise((resolve, reject) => {\n      ExpressCassandraClient.instance[entityName].delete(fields, err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  createLogger() {\n    return new WinstonCassandra(CassandraOptions)\n  }\n\n  uuidFromString(str: string) {\n    return Uuid.fromString(str)\n  }\n\n  uuidRandom() {\n    return Uuid.random()\n  }\n\n  uuidNull() {\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n    return Uuid_Null_String\n  }\n\n  uuidToString(id: any): string {\n    if (id instanceof Uuid) id = id.toString()\n\n    return id\n  }\n\n  uuidEquals(id1: any, id2: any): boolean {\n    return id1.equals(id2)\n  }\n\n  addTableSchema(tableName: string, tableSchema: Object): void {\n    if (this.tableSchemas) this.tableSchemas.set(tableName, tableSchema)\n    else {\n      console.error(\n        '💔 Attempting to add table schemas after express-cassandra client connect.'\n      )\n      process.exit(1)\n    }\n  }\n\n  confirmHealth(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      ExpressCassandraClient.modelInstance.User.get_cql_client(\n        (err, client) => {\n          if (err) reject(err)\n          else\n            client.execute(\n              'select release_version from system.local;',\n              (err, result) => {\n                if (err) reject(err)\n                else resolve()\n              }\n            )\n        }\n      )\n    })\n  }\n\n  initialize(runAsPartOfSetupDatabase: boolean, cb: Function): void {\n    // All table schemas should have been added by now.\n    const enrolledTables = this.tableSchemas\n    this.tableSchemas = null // Free up the memory that is not needed any more and indicate that we can not add any more\n\n    ExpressCassandraClient.connect(err => {\n      if (err) {\n        console.log('💔 Could not connect to Cassandra: ' + err.message)\n        setTimeout(() => process.exit(1), 5000) // Exit the process. A process manager like pm2 would re-start\n      } else if (!enrolledTables) console.log('💔 Table schemas missing!')\n      else {\n        const arrSchemas = []\n        for (let tableName of enrolledTables.keys())\n          arrSchemas.push([ tableName, enrolledTables.get(tableName) ])\n\n        this.loadOneTableSchemaFromArray(\n          arrSchemas,\n          runAsPartOfSetupDatabase,\n          cb\n        )\n      }\n    })\n  }\n\n  loadOneTableSchemaFromArray(\n    arrSchemas: Array<any>,\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function\n  ): void {\n    if (arrSchemas.length > 0) {\n      const tableName = arrSchemas[0][0]\n      const tableSchema = arrSchemas[0][1]\n\n      arrSchemas.splice(0, 1)\n\n      ExpressCassandraClient.loadSchema(tableName, tableSchema, err => {\n        if (err) {\n          console.log(\n            '💔 Initializing Cassandra persister - error while creating ' +\n              tableName +\n              '!'\n          )\n          console.error(err.message)\n          process.exit(1)\n        } else {\n          if (runAsPartOfSetupDatabase)\n            console.log(\n              '🛢 Table ' +\n                ExpressCassandraClient.modelInstance[tableName]._properties\n                  .name +\n                ' ready.'\n            )\n\n          this.loadOneTableSchemaFromArray(\n            arrSchemas,\n            runAsPartOfSetupDatabase,\n            cb\n          ) // Load the next table\n          return\n        }\n      })\n    } else {\n      cb()\n    }\n  }\n}\n"]}