{"version":3,"sources":["../../../../../units/sv-agent-server/graphql/type/_ViewerFields.js"],"names":["Agents","type","connectionType","args","OfficeId","resolve","obj","context","objectManager","rootValue","getObjectList","index","body","query","bool","filter","term","arr","Agent","id","parent","getOneObject"],"mappings":";;AAEA;AACA;;;;;;AAMA,oD;AACA,sC;;AAEe;AACbA,OAAQ;AACNC,KAAM,2BAAiBC,cADjB;;AAGNC;AACEC,SAAU,CAAEH,wBAAF,CADZ,+BAHM;;;;AAQNI,QAAS;AACPC,GADO;;AAGPC,OAHO,WAEFJ,KAFE;AAIMK,aAJN,OAILC,SAJK;;AAMWD,cAAcE,aAAd,CAA4B,OAA5B,CAAqC;AACrDC,MAAO,QAD8C;AAErDV,KAAM,OAF+C;AAGrDW,KAAM;AACJC,MAAO;AACLC,KAAM;AACJC,OAAQ;AACNC,KAAM;AACJ,mBAAoB,MADhB,CADA,CADJ,CADD,CADH,CAH+C,CAArC,CANX,SAMDC,GANC;;;;;;;;AAsBA,sCAAoBA,GAApB,CAAyBd,IAAzB,CAtBA,2DARH,CADK;;;;AAmCbe,MAAO;AACLjB,wBADK;;AAGLE,cAAW,CAAEgB,GAAI,CAAElB,uBAAF,CAAN,CAAX,CAHK;;AAKLI,QAAS,iBAACe,MAAD,OAAiBb,OAAjB,WAAWY,GAAX,OAAWA,EAAX,IAAuCX,cAAvC,OAA4BC,SAA5B;AACPD,cAAca,YAAd,CAA2B,OAA3B,CAAoC,CAAEF,GAAI,+BAAaA,EAAb,EAAiBA,EAAvB,CAApC,CADO,GALJ,CAnCM,C","file":"_ViewerFields.js","sourcesContent":["// @flow weak\n\nimport { GraphQLID, GraphQLInt } from 'graphql'\nimport {\n  fromGlobalId,\n  connectionArgs,\n  connectionFromArray,\n} from 'graphql-relay'\n\nimport AgentsConnection from './AgentsConnection'\nimport AgentType from './AgentType'\n\nexport default {\n  Agents: {\n    type: AgentsConnection.connectionType,\n\n    args: {\n      OfficeId: { type: GraphQLInt },\n      ...connectionArgs,\n    },\n\n    resolve: async(\n      obj,\n      { ...args },\n      context,\n      { rootValue: objectManager }\n    ) => {\n      const arr = await objectManager.getObjectList('Agent', {\n        index: 'agents',\n        type: 'agent',\n        body: {\n          query: {\n            bool: {\n              filter: {\n                term: {\n                  'OfficeId.keyword': '3913',\n                },\n              },\n            },\n          },\n        },\n      })\n\n      return connectionFromArray(arr, args)\n    },\n  },\n\n  Agent: {\n    type: AgentType,\n\n    args: { ...{ id: { type: GraphQLID } } },\n\n    resolve: (parent, { id }, context, { rootValue: objectManager }) =>\n      objectManager.getOneObject('Agent', { id: fromGlobalId(id).id }),\n  },\n}\n"]}