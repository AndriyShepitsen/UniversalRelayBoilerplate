{"version":3,"sources":["../../../units/urb-base-webapp/router.jsx"],"names":["createResolver","historyMiddlewares","fetcher","environment","network","create","fetch","store","ToDoListQuery","routeConfig","params","status","render"],"mappings":";;;;;;;;;;;;;;;;;;;AAmBgBA,c,CAAAA,c,CAjBhB,0D,+DACA,oD,yDACA,0D,+DACA,sC,2CACA,uCACA,4B,2CACA,uCACA,2CAEA,+C,iDACA,8E,qDACA,kF,yDACA,4E,qDACA,wE,oIAEO,GAAMC,+CAAqB,2BAA3B,CAEA,QAASD,eAAT,CAAwBE,OAAxB,CAAiC;AACtC,GAAMC,aAAc,8BAAgB;AAClCC,QAAS,sBAAQC,MAAR,CAAe,iBAAaH,SAAQI,KAAR,yBAAb,EAAf,CADyB;AAElCC,MAAO,wBAAU,gCAAV,CAF2B,CAAhB,CAApB;;;AAKA,MAAO,0BAAaJ,WAAb,CAAP;AACD;;AAED,GAAMK,yGAAN;;;;;;;;AAQO,GAAMC,iCAAc;AACzB;AACE,KAAK,GADP;AAEE,4BAFF;AAGE,wFAHF;;;;;;;;AAWE;AACE,KAAK,MADP;AAEE,8BAFF;AAGE,0FAHF;;;;;;;;AAWE;AACE,4BADF;AAEE,MAAOD,aAFT;AAGE,iBAAkB,qDAAgBE,MAAhB,EAAwBC,OAAQ,KAAhC,IAHpB,EAXF;;AAgBE,+CAAO,KAAK,SAAZ,CAAsB,4BAAtB,CAA2C,MAAOH,aAAlD,EAhBF,CAXF;;AA6BE,+CAAO,KAAK,QAAZ;AACE;AACE,KAAK,MADP;AAEE,gCAFF;AAGE,4FAHF;;;;;;;;AAWE;AACE,8BADF;AAEE,0FAFF,EAXF,CADF,CA7BF,CADyB,CAApB;;;;;;;;;;;;;AAyDA,GAAMI,uBAAS,2BAAa,EAAb,CAAf","file":"router.js","sourcesContent":["// @flow weak\n\nimport queryMiddleware from 'farce/lib/queryMiddleware'\nimport createRender from 'found/lib/createRender'\nimport makeRouteConfig from 'found/lib/makeRouteConfig'\nimport Route from 'found/lib/Route'\nimport { Resolver } from 'found-relay'\nimport React from 'react'\nimport { graphql } from 'react-relay'\nimport { Environment, Network, RecordSource, Store } from 'relay-runtime'\n\nimport AppFrame from './components/AppFrame'\nimport EnsayoList from '../urb-example-ensayo-webapp/components/EnsayoList'\nimport EnsayoScreen from '../urb-example-ensayo-webapp/components/EnsayoScreen'\nimport ToDoScreen from '../urb-example-todo-webapp/components/ToDoScreen'\nimport ToDoList from '../urb-example-todo-webapp/components/ToDoList'\n\nexport const historyMiddlewares = [queryMiddleware]\n\nexport function createResolver(fetcher) {\n  const environment = new Environment({\n    network: Network.create((...args) => fetcher.fetch(...args)),\n    store: new Store(new RecordSource()),\n  })\n\n  return new Resolver(environment)\n}\n\nconst ToDoListQuery = graphql`\n  query router_ToDoList_Query($status: String!) {\n    Viewer {\n      ...ToDoList_Viewer\n    }\n  }\n`\n\nexport const routeConfig = makeRouteConfig(\n  <Route\n    path=\"/\"\n    Component={AppFrame}\n    query={graphql`\n      query router_AppFrame_Query {\n        Viewer {\n          ...AppFrame_Viewer\n        }\n      }\n    `}\n  >\n    <Route\n      path=\"todo\"\n      Component={ToDoScreen}\n      query={graphql`\n        query router_ToDoScreen_Query {\n          Viewer {\n            ...ToDoScreen_Viewer\n          }\n        }\n      `}\n    >\n      <Route\n        Component={ToDoList}\n        query={ToDoListQuery}\n        prepareVariables={params => ({ ...params, status: 'any' })}\n      />\n      <Route path=\":status\" Component={ToDoList} query={ToDoListQuery} />\n    </Route>\n    <Route path=\"ensayo\">\n      <Route\n        path=\"edit\"\n        Component={EnsayoScreen}\n        query={graphql`\n          query router_EnsayoScreen_Query {\n            Viewer {\n              ...EnsayoScreen_Viewer\n            }\n          }\n        `}\n      >\n        <Route\n          Component={EnsayoList}\n          query={graphql`\n            query router_EnsayoList_Query {\n              Viewer {\n                ...EnsayoList_Viewer\n              }\n            }\n          `}\n        />\n      </Route>\n    </Route>\n  </Route>,\n)\n\nexport const render = createRender({})\n"]}