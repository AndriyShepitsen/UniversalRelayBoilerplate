{"version":3,"sources":["../../../units/urb-base-webapp/fetcherBase.js"],"names":["FetcherBase","url","UserToken1","UserToken2","operation","variables","request","method","credentials","headers","body","JSON","stringify","query","text","fetch","response","json"],"mappings":";;AAEA,4B;;AAEqBA,W;;;;;;AAMnB,qBAAYC,GAAZ,CAAyBC,UAAzB,CAA8CC,UAA9C,CAAkE;AAChE,KAAKF,GAAL,CAAWA,GAAX;AACA,KAAKC,UAAL,CAAkBA,UAAlB;AACA,KAAKC,UAAL,CAAkBA,UAAlB;AACD,C;;AAEWC,S,CAA6BC,S;AACjCC,O,CAAU;AACdC,OAAQ,MADM;AAEdC,YAAa,aAFC;AAGdC,QAAS;AACP,eAAgB,kBADT;AAEPN,WAAY,KAAKA,UAFV,CAHK;;AAOdO,KAAMC,KAAKC,SAAL,CAAe,CAAEC,MAAOT,UAAUU,IAAnB,CAAyBT,mBAAzB,CAAf,CAPQ,C;;;;AAWhB,GAAI,KAAKH,UAAT,CAAqBI,QAAQG,OAAR,CAAgBP,UAAhB,CAA6B,KAAKA,UAAlC,C;;AAEEa,MAAM,KAAKd,GAAX,CAAgBK,OAAhB,C,SAAjBU,Q;;AAECA,SAASC,IAAT,E,sGA5BUjB,W","file":"fetcherBase.js","sourcesContent":["// @flow\n\nimport 'isomorphic-fetch'\n\nexport default class FetcherBase {\n  url: string\n  UserToken1: ?string\n  UserToken2: string\n  payloads: Array<any>\n\n  constructor(url: string, UserToken1: ?string, UserToken2: string) {\n    this.url = url\n    this.UserToken1 = UserToken1\n    this.UserToken2 = UserToken2\n  }\n\n  async fetch(operation: { text: string }, variables: any) {\n    const request = {\n      method: 'POST',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n        UserToken2: this.UserToken2,\n      },\n      body: JSON.stringify({ query: operation.text, variables }),\n    }\n\n    // $FlowIssue we can add the cookie, will be used on server\n    if (this.UserToken1) request.headers.UserToken1 = this.UserToken1\n\n    const response = await fetch(this.url, request)\n\n    return response.json()\n  }\n}\n"]}