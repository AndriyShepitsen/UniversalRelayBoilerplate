{"version":3,"sources":["../../../../units/urb-base-webapp/scripts/ViewportDimensions.js"],"names":["SMALL","MEDIUM","LARGE","ViewportDimensions","removeComponent","component","subscribedComponents","delete","handle_onResize","totalWidth","window","innerWidth","totalHeight","innerHeight","muiSize","navDrawerIsDocked","contentWidth","changesMade","viewportDimensions","viewportDimensionsVersion","dimensionsSubscribed","mustUpdate","dimension","forceUpdate","Map","dimensionName","subscriptionInfo","get","set","self","componentWillUnmount","currentFunction","bind","dimensionValue","Error"],"mappings":"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","file":"ViewportDimensions.js","sourcesContent":["// @flow\n\nexport const SMALL = 1\nexport const MEDIUM = 2\nexport const LARGE = 3\n\nexport default class ViewportDimensions {\n  subscribedComponents: Map<Object, Object>\n  viewportDimensionsVersion: number\n  viewportDimensions: Object\n\n  constructor() {\n    this.subscribedComponents = new Map()\n\n    this.viewportDimensionsVersion = 1\n    this.viewportDimensions = {\n      muiSize: 0,\n      totalWidth: 0,\n      totalHeight: 0,\n      contentWidth: 0,\n    }\n  }\n\n  get(component: Object, dimensionName: string) {\n    // Mark that the component is being rendered with the current version\n    component.viewportDimensionsVersion = this.viewportDimensionsVersion\n\n    // Is the object subscribed? If not, it should be\n    let subscriptionInfo = this.subscribedComponents.get(component)\n    if (subscriptionInfo == null) {\n      // Add component to subscriptions dictionary\n      subscriptionInfo = {}\n      this.subscribedComponents.set(component, subscriptionInfo)\n\n      const self = this\n\n      // Make sure component unsubscribes when destroyed\n      if (component.componentWillUnmount) {\n        const currentFunction = component.componentWillUnmount.bind(component)\n\n        component.componentWillUnmount = () => {\n          self.removeComponent(component)\n          currentFunction()\n        }\n      } else\n        component.componentWillUnmount = () => {\n          self.removeComponent(component)\n        }\n    }\n\n    // Make sure it is subscribed for the right setting\n    subscriptionInfo[dimensionName] = true\n\n    // Now that the configuration is current, get the setting value\n    let dimensionValue = this.viewportDimensions[dimensionName]\n    if (dimensionValue == null)\n      throw new Error('Could not find viewport dimension named ' + dimensionName)\n\n    return dimensionValue\n  }\n\n  removeComponent = (component: Object) => {\n    this.subscribedComponents.delete(component)\n  }\n\n  handle_onResize = () => {\n    const totalWidth = window.innerWidth\n    const totalHeight = window.innerHeight\n\n    let muiSize\n    if (totalWidth >= 992) muiSize = LARGE\n    else if (totalWidth >= 768)\n      muiSize = MEDIUM // totalWidth < 768\n    else muiSize = SMALL\n\n    let navDrawerIsDocked = false\n    let contentWidth = totalWidth\n    if (muiSize === LARGE) {\n      navDrawerIsDocked = true\n      contentWidth -= 256 // TODO x0100 Make it a setting\n    }\n\n    // Record what changes were made to only notify the necessary components\n    const changesMade = {}\n\n    if (muiSize !== this.viewportDimensions.muiSize) {\n      changesMade.muiSize = true\n      this.viewportDimensions.muiSize = muiSize\n    }\n\n    if (totalWidth !== this.viewportDimensions.totalWidth) {\n      changesMade.totalWidth = true\n      this.viewportDimensions.totalWidth = totalWidth\n    }\n\n    if (totalHeight !== this.viewportDimensions.totalHeight) {\n      changesMade.totalHeight = true\n      this.viewportDimensions.totalHeight = totalHeight\n    }\n\n    if (contentWidth !== this.viewportDimensions.contentWidth) {\n      changesMade.contentWidth = true\n      this.viewportDimensions.contentWidth = contentWidth\n    }\n\n    const viewportDimensionsVersion = ++this.viewportDimensionsVersion\n\n    // Update all subscribed components\n    for (let [component, dimensionsSubscribed] of this.subscribedComponents) {\n      if (component.viewportDimensionsVersion != viewportDimensionsVersion) {\n        component.viewportDimensionsVersion = viewportDimensionsVersion\n\n        // Did the component subscribe to the changes that were actually made?\n        let mustUpdate = false\n        for (let dimension in dimensionsSubscribed)\n          if (changesMade[dimension]) {\n            mustUpdate = true\n            break\n          }\n\n        // Re-render component if it subscribed to any of the changes\n        if (mustUpdate) component.forceUpdate()\n      }\n    }\n  }\n}\n"]}