{"version":3,"sources":["../../../../units/urb-base-webapp/scripts/ViewportDimensions.js"],"names":["SMALL","MEDIUM","LARGE","ViewportDimensions","removeComponent","component","subscribedComponents","delete","handle_onResize","totalWidth","window","innerWidth","totalHeight","innerHeight","muiSize","contentWidth","changesMade","viewportDimensions","viewportDimensionsVersion","dimensionsSubscribed","mustUpdate","dimension","forceUpdate","Map","dimensionName","subscriptionInfo","get","set","self","componentWillUnmount","currentFunction","bind","dimensionValue","Error"],"mappings":";;AAEO,GAAMA,qBAAQ,CAAd;AACA,GAAMC,uBAAS,CAAf;AACA,GAAMC,qBAAQ,CAAd,C;;AAEcC,kB;;;;;AAKnB,6BAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDdC,eApDc,CAoDI,SAAEC,SAAF,CAAyB;AACzC,MAAKC,oBAAL,CAA0BC,MAA1B,CAAkCF,SAAlC;AACD,CAtDa;;AAwDdG,eAxDc,CAwDI,UAAM;AACtB,GAAMC,YAAaC,OAAOC,UAA1B;AACA,GAAMC,aAAcF,OAAOG,WAA3B;;AAEA,GAAIC,eAAJ;AACA,GAAKL,YAAc,GAAnB,CAAyBK,QAAUZ,KAAV,CAAzB;AACK,GAAKO,YAAc,GAAnB;AACHK,QAAUb,MAAV,CADG;AAEAa,QAAUd,KAAV;;;AAGL,GAAIe,cAAeN,UAAnB;AACA,GAAKK,UAAYZ,KAAjB,CAAyB;;AAEvBa,cAAgB,GAAhB;AACD;;;AAGD,GAAMC,aAAc,EAApB;;AAEA,GAAKF,UAAY,MAAKG,kBAAL,CAAwBH,OAAzC,CAAmD;AACjDE,YAAYF,OAAZ,CAAsB,IAAtB;AACA,MAAKG,kBAAL,CAAwBH,OAAxB,CAAkCA,OAAlC;AACD;;AAED,GAAKL,aAAe,MAAKQ,kBAAL,CAAwBR,UAA5C,CAAyD;AACvDO,YAAYP,UAAZ,CAAyB,IAAzB;AACA,MAAKQ,kBAAL,CAAwBR,UAAxB,CAAqCA,UAArC;AACD;;AAED,GAAKG,cAAgB,MAAKK,kBAAL,CAAwBL,WAA7C,CAA2D;AACzDI,YAAYJ,WAAZ,CAA0B,IAA1B;AACA,MAAKK,kBAAL,CAAwBL,WAAxB,CAAsCA,WAAtC;AACD;;AAED,GAAKG,eAAiB,MAAKE,kBAAL,CAAwBF,YAA9C,CAA6D;AAC3DC,YAAYD,YAAZ,CAA2B,IAA3B;AACA,MAAKE,kBAAL,CAAwBF,YAAxB,CAAuCA,YAAvC;AACD;;AAED,GAAMG,2BAA4B,EAAE,MAAKA,yBAAzC;;;AAGA,kBAAiD,MAAKZ,oBAAtD,oLAA6E,0LAAjED,UAAiE,aAAtDc,qBAAsD;AAC3E,GAAKd,UAAUa,yBAAV,GAAwCA,yBAA7C,CAAyE;AACvEb,UAAUa,yBAAV,CAAsCA,yBAAtC;;;AAGA,GAAIE,YAAa,KAAjB;AACA,IAAM,GAAIC,UAAV,GAAuBF,qBAAvB;AACE,GAAKH,YAAYK,SAAZ,CAAL,CAA6B;AAC3BD,WAAa,IAAb;AACA;AACD,CAJH;;;AAOA,GAAKA,UAAL,CAAkBf,UAAUiB,WAAV;AACnB;AACF;AACF,CAnHa,CACZ,KAAKhB,oBAAL,CAA4B,GAAIiB,IAAJ,EAA5B,CAEA,KAAKL,yBAAL,CAAiC,CAAjC,CACA,KAAKD,kBAAL,CAA0B,CACxBH,QAAS,CADe,CAExBL,WAAY,CAFY,CAGxBG,YAAa,CAHW,CAIxBG,aAAc,CAJU,CAA1B,CAMD,C,+DAEIV,S,CAAmBmB,a,CAAwB,CAE9CnB,UAAUa,yBAAV,CAAsC,KAAKA,yBAA3C,CAGA,GAAIO,kBAAmB,KAAKnB,oBAAL,CAA0BoB,GAA1B,CAA+BrB,SAA/B,CAAvB,CACA,GAAKoB,kBAAoB,IAAzB,CAAgC,CAE9BA,iBAAmB,EAAnB,CACA,KAAKnB,oBAAL,CAA0BqB,GAA1B,CAA+BtB,SAA/B,CAA0CoB,gBAA1C,EAEA,GAAMG,MAAO,IAAb,CAGA,GAAKvB,UAAUwB,oBAAf,CAAsC,CACpC,GAAMC,iBAAkBzB,UAAUwB,oBAAV,CAA+BE,IAA/B,CAAqC1B,SAArC,CAAxB,CAEAA,UAAUwB,oBAAV,CAAiC,UAAM,CACrCD,KAAKxB,eAAL,CAAsBC,SAAtB,EACAyB,kBACD,CAHD,CAID,CAPD,IAQEzB,WAAUwB,oBAAV,CAAiC,UAAM,CACrCD,KAAKxB,eAAL,CAAsBC,SAAtB,EACD,CAFD,CAGH,CAGDoB,iBAAiBD,aAAjB,EAAkC,IAAlC,CAGA,GAAIQ,gBAAiB,KAAKf,kBAAL,CAAwBO,aAAxB,CAArB,CACA,GAAKQ,gBAAkB,IAAvB,CACE,KAAM,IAAIC,MAAJ,CACJ,2CAA6CT,aADzC,CAAN,CAIF,MAAOQ,eAAP,CACD,C,kDAvDkB7B,kB","file":"ViewportDimensions.js","sourcesContent":["// @flow\n\nexport const SMALL = 1\nexport const MEDIUM = 2\nexport const LARGE = 3\n\nexport default class ViewportDimensions {\n  subscribedComponents: Map<Object, Object>\n  viewportDimensionsVersion: number\n  viewportDimensions: Object\n\n  constructor() {\n    this.subscribedComponents = new Map()\n\n    this.viewportDimensionsVersion = 1\n    this.viewportDimensions = {\n      muiSize: 0,\n      totalWidth: 0,\n      totalHeight: 0,\n      contentWidth: 0,\n    }\n  }\n\n  get( component: Object, dimensionName: string ) {\n    // Mark that the component is being rendered with the current version\n    component.viewportDimensionsVersion = this.viewportDimensionsVersion\n\n    // Is the object subscribed? If not, it should be\n    let subscriptionInfo = this.subscribedComponents.get( component )\n    if ( subscriptionInfo == null ) {\n      // Add component to subscriptions dictionary\n      subscriptionInfo = {}\n      this.subscribedComponents.set( component, subscriptionInfo )\n\n      const self = this\n\n      // Make sure component unsubscribes when destroyed\n      if ( component.componentWillUnmount ) {\n        const currentFunction = component.componentWillUnmount.bind( component )\n\n        component.componentWillUnmount = () => {\n          self.removeComponent( component )\n          currentFunction()\n        }\n      } else\n        component.componentWillUnmount = () => {\n          self.removeComponent( component )\n        }\n    }\n\n    // Make sure it is subscribed for the right setting\n    subscriptionInfo[dimensionName] = true\n\n    // Now that the configuration is current, get the setting value\n    let dimensionValue = this.viewportDimensions[dimensionName]\n    if ( dimensionValue == null )\n      throw new Error(\n        'Could not find viewport dimension named ' + dimensionName\n      )\n\n    return dimensionValue\n  }\n\n  removeComponent = ( component: Object ) => {\n    this.subscribedComponents.delete( component )\n  }\n\n  handle_onResize = () => {\n    const totalWidth = window.innerWidth\n    const totalHeight = window.innerHeight\n\n    let muiSize\n    if ( totalWidth >= 992 ) muiSize = LARGE\n    else if ( totalWidth >= 768 )\n      muiSize = MEDIUM // totalWidth < 768\n    else muiSize = SMALL\n\n    //    let navDrawerIsDocked = false\n    let contentWidth = totalWidth\n    if ( muiSize === LARGE ) {\n      //      navDrawerIsDocked = true\n      contentWidth -= 256 // TODO x0100 Make it a setting\n    }\n\n    // Record what changes were made to only notify the necessary components\n    const changesMade = {}\n\n    if ( muiSize !== this.viewportDimensions.muiSize ) {\n      changesMade.muiSize = true\n      this.viewportDimensions.muiSize = muiSize\n    }\n\n    if ( totalWidth !== this.viewportDimensions.totalWidth ) {\n      changesMade.totalWidth = true\n      this.viewportDimensions.totalWidth = totalWidth\n    }\n\n    if ( totalHeight !== this.viewportDimensions.totalHeight ) {\n      changesMade.totalHeight = true\n      this.viewportDimensions.totalHeight = totalHeight\n    }\n\n    if ( contentWidth !== this.viewportDimensions.contentWidth ) {\n      changesMade.contentWidth = true\n      this.viewportDimensions.contentWidth = contentWidth\n    }\n\n    const viewportDimensionsVersion = ++this.viewportDimensionsVersion\n\n    // Update all subscribed components\n    for ( let [ component, dimensionsSubscribed ] of this.subscribedComponents ) {\n      if ( component.viewportDimensionsVersion !== viewportDimensionsVersion ) {\n        component.viewportDimensionsVersion = viewportDimensionsVersion\n\n        // Did the component subscribe to the changes that were actually made?\n        let mustUpdate = false\n        for ( let dimension in dimensionsSubscribed )\n          if ( changesMade[dimension]) {\n            mustUpdate = true\n            break\n          }\n\n        // Re-render component if it subscribed to any of the changes\n        if ( mustUpdate ) component.forceUpdate()\n      }\n    }\n  }\n}\n"]}