{"version":3,"sources":["../../../units/urb-base-webapp/server.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","envPortWebpack","PORT_WEBPACK","router","gatherLocationAndSiteInformation","req","res","assetsPath","siteInformation","NODE_ENV","isSiteBuilderDisabled","inEditingMode","configurationAsObject","version","host","port_webpack","use","fetcher","url","historyMiddlewares","routeConfig","resolver","render","redirect","status","element","userAgent","headers","resolve","__dirname","assets_path","root_html","renderToString","relay_payload","isJSON"],"mappings":";;AAEA,gC;AACA,4B;AACA,0B;AACA;AACA,yC;AACA,yD;;AAEA;AACA;AACA;AACA;AACA,6C;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;AAEA,GAAMC,SAAUC,QAAQC,GAAR,CAAYC,IAA5B;AACA,GAAIH,SAAW,IAAX,EAAmB,MAAOA,QAAP,GAAmB,QAA1C;AACE,KAAM,IAAII,MAAJ,CAAU,sEAAV,CAAN;;AAEF,GAAMC,SAAUJ,QAAQC,GAAR,CAAYI,IAA5B;AACA,GAAID,SAAW,IAAX,EAAmB,MAAOA,QAAP,GAAmB,QAA1C;AACE,KAAM,IAAID,MAAJ,CAAU,sEAAV,CAAN;;AAEF,GAAMG,gBAAiBN,QAAQC,GAAR,CAAYM,YAAnC;AACA,GAAID,gBAAkB,IAAlB,EAA0B,MAAOA,eAAP,GAA0B,QAAxD;AACE,KAAM,IAAIH,MAAJ,CAAU,8EAAV,CAAN;;;AAGF,GAAMK,QAAS,uBAAf;;AAEA,QAAeC,iCAAf,CAAgDC,GAAhD,CAA6DC,GAA7D;AACMC,UADN;;AAGgC,qCAAmBF,GAAnB,CAAwBC,GAAxB,CAHhC,SAGQE,eAHR;AAIE,GAAIA,eAAJ,CAAqB;AACnB,GAAIb,QAAQC,GAAR,CAAYa,QAAZ,GAAyB,YAA7B,CAA2C;AACzCF;AACEC,gBAAgBE,qBAAhB,EAAyCF,gBAAgBG,aAAzD;;;;AAI+BH,gBAAgBI,qBAAhB,CAAsCC,OALvE;AAMD,CAPD,IAOO;;AAECC,IAFD,CAEQnB,QAAQC,GAAR,CAAYC,IAFpB;AAGCkB,YAHD,CAGgBpB,QAAQC,GAAR,CAAYM,YAH5B;AAILK,qBAAuBb,OAAvB,KAAkCO,cAAlC;AACD;AACF,CAlBH;;AAoBS,CAAEO,+BAAF,CAAmBD,qBAAnB,CApBT;;;AAuBAJ,OAAOa,GAAP,CAAW,iBAAOX,GAAP,CAAYC,GAAZ;AACHW,OADG,CACO,+CAAsClB,OAAtC,YADP;;AAGmC,2BAAe;AACzDmB,IAAKb,IAAIa,GADgD;AAEzDC,6CAFyD;AAGzDC,+BAHyD;AAIzDC,SAAU,2BAAeJ,OAAf,CAJ+C;AAKzDK,qBALyD,CAAf,CAHnC,6BAGDC,QAHC,MAGDA,QAHC,CAGSC,MAHT,MAGSA,MAHT,CAGiBC,OAHjB,MAGiBA,OAHjB;;;AAWLF,QAXK;AAYPjB,IAAIiB,QAAJ,CAAa,GAAb,CAAkBA,SAASL,GAA3B,EAZO;;;;AAgBHQ,SAhBG,CAgBSrB,IAAIsB,OAAJ,CAAY,YAAZ,CAhBT;;AAkBqCvB,iCAAiCC,GAAjC,CAAsCC,GAAtC,CAlBrC,+BAkBDE,eAlBC,OAkBDA,eAlBC,CAkBgBD,UAlBhB,OAkBgBA,UAlBhB;;AAoBTD,IAAIgB,MAAJ,CAAW,eAAKM,OAAL,CAAaC,SAAb,CAAwB,UAAxB,CAAX,CAAgD;AAC9CC,YAAavB,UADiC;AAE9CwB,UAAW,iBAAeC,cAAf;AACT,iDAAS,UAAWN,SAApB;AACGD,OADH,CADS,CAFmC;;;AAO9CQ,cAAe,kCAAUhB,OAAV,CAAmB,CAAEiB,OAAQ,IAAV,CAAnB,CAP+B,CAAhD,EApBS,2DAAX,E;;;;AA+Be/B,M","file":"server.js","sourcesContent":["// @flow\n\nimport express from 'express'\nimport React from 'react'\nimport path from 'path'\nimport { getFarceResult } from 'found/lib/server'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport { getSiteInformation } from '../_configuration/urb-base-webapp/siteSettings'\nimport { ServerFetcher } from '../urb-base-universal/fetcher'\nimport { version } from '../_configuration/package'\nimport { createResolver, historyMiddlewares, render, routeConfig } from './router'\nimport Wrapper from './components/Wrapper'\n\n// Read environment\nrequire('dotenv').load()\n\nconst envHost = process.env.HOST\nif (envHost == null || typeof envHost !== 'string')\n  throw new Error('ðŸ’”  urb-base-webapp requires the environment variable HOST to be set')\n\nconst envPort = process.env.PORT\nif (envPort == null || typeof envPort !== 'string')\n  throw new Error('ðŸ’”  urb-base-webapp requires the environment variable PORT to be set')\n\nconst envPortWebpack = process.env.PORT_WEBPACK\nif (envPortWebpack == null || typeof envPortWebpack !== 'string')\n  throw new Error('ðŸ’”  urb-base-webapp requires the environment variable PORT_WEBPACK to be set')\n\n// Create express router\nconst router = express()\n\nasync function gatherLocationAndSiteInformation(req: Object, res: Object) {\n  let assetsPath\n\n  const siteInformation = await getSiteInformation(req, res)\n  if (siteInformation) {\n    if (process.env.NODE_ENV === 'production') {\n      assetsPath =\n        siteInformation.isSiteBuilderDisabled || siteInformation.inEditingMode\n          ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n            `/assets/${version}`\n          : // When in production mode, serve the assets compiled by factory's publisher\n            `/assets-site/${version}.${siteInformation.configurationAsObject.version}`\n    } else {\n      // When in development, always go to webpack over http\n      const host = process.env.HOST\n      const port_webpack = process.env.PORT_WEBPACK\n      assetsPath = `http://${envHost}:${envPortWebpack}/${version}`\n    }\n  } // If siteInformation was null, an error response has already been given\n\n  return { siteInformation, assetsPath }\n}\n\nrouter.use(async (req, res) => {\n  const fetcher = new ServerFetcher(`http://localhost:${envPort}/graphql`)\n\n  const { redirect, status, element } = await getFarceResult({\n    url: req.url,\n    historyMiddlewares,\n    routeConfig,\n    resolver: createResolver(fetcher),\n    render,\n  })\n\n  if (redirect) {\n    res.redirect(302, redirect.url)\n    return\n  }\n\n  const userAgent = req.headers['user-agent']\n\n  const { siteInformation, assetsPath } = await gatherLocationAndSiteInformation(req, res)\n\n  res.render(path.resolve(__dirname, 'html.ejs'), {\n    assets_path: assetsPath,\n    root_html: ReactDOMServer.renderToString(\n      <Wrapper userAgent={userAgent}>\n        {element}\n      </Wrapper>,\n    ),\n    relay_payload: serialize(fetcher, { isJSON: true }),\n  })\n})\n\nexport default router\n"]}