{"version":3,"sources":["../../../units/urb-base-webapp/server.js"],"names":["require","load","port","process","env","PORT","port_webpack","PORT_WEBPACK","router","use","req","res","fetcher","url","historyMiddlewares","routeConfig","resolver","render","redirect","status","element","userAgent","headers","resolve","__dirname","root_html","renderToString","relay_payload","isJSON"],"mappings":";;AAEA,gC;AACA,4B;AACA,0B;AACA;AACA,yC;AACA,yD;;AAEA;AACA;AACA,6C;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;AAEA,GAAMC,MAAOC,QAAQC,GAAR,CAAYC,IAAzB;AACA,GAAMC,cAAeH,QAAQC,GAAR,CAAYG,YAAjC;;;AAGA,GAAMC,QAAS,uBAAf;;AAEAA,OAAOC,GAAP,CAAW,iBAAOC,GAAP,CAAYC,GAAZ;AACHC,OADG,CACO,+CAAsCV,IAAtC,YADP;;AAGmC,2BAAe;AACzDW,IAAKH,IAAIG,GADgD;AAEzDC,6CAFyD;AAGzDC,+BAHyD;AAIzDC,SAAU,2BAAeJ,OAAf,CAJ+C;AAKzDK,qBALyD,CAAf,CAHnC,4BAGDC,QAHC,MAGDA,QAHC,CAGSC,MAHT,MAGSA,MAHT,CAGiBC,OAHjB,MAGiBA,OAHjB;;;AAWLF,QAXK;AAYPP,IAAIO,QAAJ,CAAa,GAAb,CAAkBA,SAASL,GAA3B,EAZO;;;;AAgBHQ,SAhBG,CAgBSX,IAAIY,OAAJ,CAAY,YAAZ,CAhBT;;AAkBTX,IAAIM,MAAJ,CAAW,eAAKM,OAAL,CAAaC,SAAb,CAAwB,UAAxB,CAAX,CAAgD;AAC9ClB,yBAD8C;AAE9CmB,UAAW,iBAAeC,cAAf;AACT,iDAAS,UAAWL,SAApB;AACGD,OADH,CADS,CAFmC;;;AAO9CO,cAAe,kCAAUf,OAAV,CAAmB,CAAEgB,OAAQ,IAAV,CAAnB,CAP+B,CAAhD,EAlBS,0DAAX,E;;;;AA6BepB,M,oIAnCTN,I,yEACAI,Y,iFAGAE,M","file":"server.js","sourcesContent":["// @flow\n\nimport express from 'express'\nimport React from 'react'\nimport path from 'path'\nimport { getFarceResult } from 'found/lib/server'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport { ServerFetcher } from '../urb-base-universal/scripts/fetcher'\nimport { createResolver, historyMiddlewares, render, routeConfig } from './router'\nimport Wrapper from './components/Wrapper'\n\n// Read environment\nrequire('dotenv').load()\n\nconst port = process.env.PORT\nconst port_webpack = process.env.PORT_WEBPACK\n\n// Create express router\nconst router = express()\n\nrouter.use(async (req, res) => {\n  const fetcher = new ServerFetcher(`http://localhost:${port}/graphql`)\n\n  const { redirect, status, element } = await getFarceResult({\n    url: req.url,\n    historyMiddlewares,\n    routeConfig,\n    resolver: createResolver(fetcher),\n    render,\n  })\n\n  if (redirect) {\n    res.redirect(302, redirect.url)\n    return\n  }\n\n  const userAgent = req.headers['user-agent']\n\n  res.render(path.resolve(__dirname, 'html.ejs'), {\n    port_webpack,\n    root_html: ReactDOMServer.renderToString(\n      <Wrapper userAgent={userAgent}>\n        {element}\n      </Wrapper>,\n    ),\n    relay_payload: serialize(fetcher, { isJSON: true }),\n  })\n})\n\nexport default router\n"]}