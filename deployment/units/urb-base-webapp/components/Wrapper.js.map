{"version":3,"sources":["../../../../units/urb-base-webapp/components/Wrapper.jsx"],"names":["Wrapper","props","context","handle_onResize","rbCtx","viewportDimensions","appData","muiTheme","palette","primary","accent","type","children","Component","childContextTypes","object"],"mappings":";;AAEA,6C;AACA,mD;AACA;AACA,4B;AACA,6C;AACA,qC;AACA,wD;;AAEA,iE;;AAEqBA,O;;;;;;;;AAQnB,iBAAYC,KAAZ,CAA2BC,OAA3B,CAA4C;AACpCD,KADoC,CAC7BC,OAD6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8B5CC,eA9B4C,CA8B1B,UAAM;AACtB,MAAKC,KAAL,CAAWC,kBAAX,CAA8BF,eAA9B;AACD,CAhC2C,CAM1C,MAAKC,KAAL,CAAa,EAAb,CAEA,MAAKA,KAAL,CAAWC,kBAAX,CAAgC,kCAAhC,CACA,MAAKD,KAAL,CAAWE,OAAX,CAAqB,MAAKL,KAAL,CAAWK,OAAhC,CAEA,MAAKC,QAAL,CAAgB,2BAAe,CAC7BC,QAAS,sBAAc,CACrBC,sBADqB,CAErBC,qBAFqB,CAGrBC,KAAM,OAHe,CAAd,CADoB,CAAf,CAAhB,CAX0C,aAkB3C,C,iFAEmB,CAClB,KAAKR,eAAL,GACD,C,yDAEiB,CAChB,MAAO,CACLC,MAAO,KAAKA,KADP,CAAP,CAGD,C;;AAMQ;AACP;AACE,4DAAe,OAAO,QAAtB,CAA+B,SAAU,KAAKD,eAA9C;AACE,wDAAkB,MAAO,KAAKI,QAA9B;AACG,KAAKN,KAAL,CAAWW,QADd,CADF,CADF;;;;AAOD,C,qBAlDkC,gBAAMC,S,EAAtBb,O,CAIZc,iB,CAAoB,CACzBV,MAAO,oBAAUW,MADQ,C,iBAJRf,O","file":"Wrapper.js","sourcesContent":["// @flow\n\nimport blue from 'material-ui/colors/blue'\nimport createPalette from 'material-ui/styles/palette'\nimport { createMuiTheme, MuiThemeProvider } from 'material-ui/styles'\nimport React from 'react'\nimport pink from 'material-ui/colors/pink'\nimport PropTypes from 'prop-types'\nimport EventListener from 'react-event-listener'\n\nimport ViewportDimensions from '../scripts/ViewportDimensions'\n\nexport default class Wrapper extends React.Component<{ appData: Object, children: any }, any> {\n  muiTheme: Object\n  rbCtx: Object\n\n  static childContextTypes = {\n    rbCtx: PropTypes.object,\n  }\n\n  constructor(props: Object, context: Object) {\n    super(props, context)\n\n    // TODO x0100 If a property for innerWidth is provided, use it for the initial request\n\n    // Descendants can add other items to rbCtx\n    this.rbCtx = {}\n\n    this.rbCtx.viewportDimensions = new ViewportDimensions()\n    this.rbCtx.appData = this.props.appData\n\n    this.muiTheme = createMuiTheme({\n      palette: createPalette({\n        primary: blue,\n        accent: pink,\n        type: 'light',\n      }),\n    })\n  }\n\n  componentDidMount() {\n    this.handle_onResize() // Will populate the data structures for dimensions with current values\n  }\n\n  getChildContext() {\n    return {\n      rbCtx: this.rbCtx,\n    }\n  }\n\n  handle_onResize = () => {\n    this.rbCtx.viewportDimensions.handle_onResize()\n  }\n\n  render() {\n    return (\n      <EventListener target=\"window\" onResize={this.handle_onResize}>\n        <MuiThemeProvider theme={this.muiTheme}>\n          {this.props.children}\n        </MuiThemeProvider>\n      </EventListener>\n    )\n  }\n}\n"]}