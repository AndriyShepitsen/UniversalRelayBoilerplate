{"version":3,"sources":["../../../../units/urb-base-webapp/components/Wrapper.jsx"],"names":["Wrapper","props","context","handle_onResize","rbContext","viewportDimensions","muiTheme","palette","type","children","Component","childContextTypes","object"],"mappings":";;AAEA,mD;AACA;AACA,4B;AACA,qC;AACA,wD;;AAEA,iE;;AAEqBA,O;;;;;;;;AAQnB,iBAAYC,KAAZ,CAAwBC,OAAxB,CAAsC;AAC9BD,KAD8B,CACvBC,OADuB;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BtCC,eA3BsC,CA2BpB,UAAM;AACtB,MAAKC,SAAL,CAAeC,kBAAf,CAAkCF,eAAlC;AACD,CA7BqC,CAMpC,MAAKC,SAAL,CAAiB,EAAjB,CAEA,MAAKA,SAAL,CAAeC,kBAAf,CAAoC,kCAApC,CAEA,MAAKC,QAAL,CAAgB,2BAAe,CAC7BC,QAAS,sBAAc,CACrBC,KAAM,MADe,CAAd,CADoB,CAAf,CAAhB,CAVoC,aAerC,C,iFAEmB,CAClB,KAAKL,eAAL,GACD,C,yDAEiB,CAChB,MAAO,CACLC,UAAW,KAAKA,SADX,CAAP,CAGD,C;;AAMQ;AACP;AACE,4DAAe,OAAO,QAAtB,CAA+B,SAAU,KAAKD,eAA9C;AACE,wDAAkB,MAAO,KAAKG,QAA9B;AACG,KAAKL,KAAL,CAAWQ,QADd,CADF,CADF;;;;AAOD,C,qBA/CkC,gBAAMC,S,EAAtBV,O,CAIZW,iB,CAAoB,CACzBP,UAAW,oBAAUQ,MADI,C,iBAJRZ,O","file":"Wrapper.js","sourcesContent":["// @flow\n\nimport createPalette from 'material-ui/styles/palette'\nimport { createMuiTheme, MuiThemeProvider } from 'material-ui/styles'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport EventListener from 'react-event-listener'\n\nimport ViewportDimensions from '../scripts/ViewportDimensions'\n\nexport default class Wrapper extends React.Component {\n  muiTheme: Object\n  rbContext: Object\n\n  static childContextTypes = {\n    rbContext: PropTypes.object,\n  }\n\n  constructor(props: any, context: any) {\n    super(props, context)\n\n    // TODO x0100 If a property for innerWidth is provided, use it for the initial request\n\n    // Descendants can add other items to rbContext\n    this.rbContext = {}\n\n    this.rbContext.viewportDimensions = new ViewportDimensions()\n\n    this.muiTheme = createMuiTheme({\n      palette: createPalette({\n        type: 'dark', // Switching the dark mode on is a single property value change.\n      }),\n    })\n  }\n\n  componentDidMount() {\n    this.handle_onResize() // Will populate the data structures for dimensions with current values\n  }\n\n  getChildContext() {\n    return {\n      rbContext: this.rbContext,\n    }\n  }\n\n  handle_onResize = () => {\n    this.rbContext.viewportDimensions.handle_onResize()\n  }\n\n  render() {\n    return (\n      <EventListener target=\"window\" onResize={this.handle_onResize}>\n        <MuiThemeProvider theme={this.muiTheme}>\n          {this.props.children}\n        </MuiThemeProvider>\n      </EventListener>\n    )\n  }\n}\n"]}