{"version":3,"sources":["../../../../units/urb-base-webapp/components/Wrapper.jsx"],"names":["Wrapper","props","context","handle_onResize","rbCtx","viewportDimensions","appData","muiTheme","palette","primary","secondary","type","children","Component","childContextTypes","object"],"mappings":";;AAEA,6C;AACA,qC;AACA,4B;AACA,6C;AACA,wD;AACA,iE;AACA,qE;;AAEA,iE;AACA,qF;;AAEqBA,O;;;;;;;;;;;AAWnB,iBAAaC,KAAb,CAA4BC,OAA5B,CAA8C;AACrCD,KADqC,CAC9BC,OAD8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8B9CC,eA9B8C,CA8B5B,UAAM;AACtB,MAAKC,KAAL,CAAWC,kBAAX,CAA8BF,eAA9B;AACD,CAhC6C,CAM5C,MAAKC,KAAL,CAAa,+BAAb,CAEA,MAAKA,KAAL,CAAWC,kBAAX,CAAgC,kCAAhC,CACA,MAAKD,KAAL,CAAWE,OAAX,CAAqB,MAAKL,KAAL,CAAWK,OAAhC,CAEA,MAAKC,QAAL,CAAgB,6BAAe,CAC7BC,QAAS,CACPC,sBADO,CAEPC,wBAFO,CAGPC,KAAM,OAHC,CADoB,CAAf,CAAhB,CAX4C,aAkB7C,C,iFAEmB,CAClB,KAAKR,eAAL,GACD,C,yDAEiB,CAChB,MAAO,CACLC,MAAO,KAAKA,KADP,CAAP,CAGD,C;;AAMQ;AACP;AACE,4DAAe,OAAO,QAAtB,CAA+B,SAAU,KAAKD,eAA9C;AACE,0DAAkB,MAAO,KAAKI,QAA9B;AACG,KAAKN,KAAL,CAAWW,QADd,CADF,CADF;;;;AAOD,C,qBArDkC,gBAAMC,S,EAAtBb,O,CAOZc,iB,CAAoB,CACzBV,MAAO,oBAAUW,MADQ,C,iBAPRf,O","file":"Wrapper.js","sourcesContent":["// @flow\n\nimport blue from 'material-ui/colors/blue'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport pink from 'material-ui/colors/pink'\nimport EventListener from 'react-event-listener'\nimport createMuiTheme from 'material-ui/styles/createMuiTheme'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\n\nimport ViewportDimensions from '../scripts/ViewportDimensions'\nimport getWrapperRbCtx from '../../_configuration/urb-base-webapp/getWrapperRbCtx'\n\nexport default class Wrapper extends React.Component<\n  { appData: Object, children: any },\n  any\n> {\n  muiTheme: Object\n  rbCtx: Object\n\n  static childContextTypes = {\n    rbCtx: PropTypes.object,\n  }\n\n  constructor( props: Object, context: Object ) {\n    super( props, context )\n\n    // TODO x0100 If a property for innerWidth is provided, use it for the initial request\n\n    // Descendants can add other items to rbCtx through getWrapperRbCtx\n    this.rbCtx = getWrapperRbCtx()\n\n    this.rbCtx.viewportDimensions = new ViewportDimensions()\n    this.rbCtx.appData = this.props.appData\n\n    this.muiTheme = createMuiTheme({\n      palette: {\n        primary: blue,\n        secondary: pink,\n        type: 'light',\n      },\n    })\n  }\n\n  componentDidMount() {\n    this.handle_onResize() // Will populate the data structures for dimensions with current values\n  }\n\n  getChildContext() {\n    return {\n      rbCtx: this.rbCtx,\n    }\n  }\n\n  handle_onResize = () => {\n    this.rbCtx.viewportDimensions.handle_onResize()\n  }\n\n  render() {\n    return (\n      <EventListener target=\"window\" onResize={this.handle_onResize}>\n        <MuiThemeProvider theme={this.muiTheme}>\n          {this.props.children}\n        </MuiThemeProvider>\n      </EventListener>\n    )\n  }\n}\n"]}