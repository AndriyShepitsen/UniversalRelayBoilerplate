{"version":3,"sources":["../../../units/urb-base-webapp/serverWebApp.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","envPortWebpack","PORT_WEBPACK","serverWebApp","gatherLocationAndSiteInformation","req","res","assetsPath","siteInformation","NODE_ENV","isSiteBuilderDisabled","inEditingMode","configurationAsObject","version","host","port_webpack","use","fetcher","cookies","UserToken1","url","historyMiddlewares","routeConfig","resolver","render","redirect","status","element","userAgent","headers","sheets","helmet","rewind","rootHTML","renderToString","resolve","__dirname","assets_path","root_html","server_side_styles","toString","relay_payload","isJSON"],"mappings":";;AAEA,yC;AACA,gC;AACA,4B;AACA,0B;AACA;AACA;AACA,yC;AACA,yD;;AAEA;AACA,sG;AACA;AACA,8C;AACA;AACA,6C;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;AAEA,GAAMC,SAAUC,QAAQC,GAAR,CAAYC,IAA5B;AACA,GAAIH,SAAW,IAAX,EAAmB,MAAOA,QAAP,GAAmB,QAA1C;AACE,KAAM,IAAII,MAAJ,CAAU,sEAAV,CAAN;;AAEF,GAAMC,SAAUJ,QAAQC,GAAR,CAAYI,IAA5B;AACA,GAAID,SAAW,IAAX,EAAmB,MAAOA,QAAP,GAAmB,QAA1C;AACE,KAAM,IAAID,MAAJ,CAAU,sEAAV,CAAN;;AAEF,GAAMG,gBAAiBN,QAAQC,GAAR,CAAYM,YAAnC;AACA,GAAID,gBAAkB,IAAlB,EAA0B,MAAOA,eAAP,GAA0B,QAAxD;AACE,KAAM,IAAIH,MAAJ,CAAU,8EAAV,CAAN;;;AAGF,GAAMK,cAAe,uBAArB;;AAEA,QAAeC,iCAAf,CAAgDC,GAAhD,CAA6DC,GAA7D;AACMC,UADN;;AAGgC,qCAAmBF,GAAnB,CAAwBC,GAAxB,CAHhC,SAGQE,eAHR;AAIE,GAAIA,eAAJ,CAAqB;AACnB,GAAIb,QAAQC,GAAR,CAAYa,QAAZ,GAAyB,YAA7B,CAA2C;AACzCF;AACEC,gBAAgBE,qBAAhB,EAAyCF,gBAAgBG,aAAzD;;;;AAI+BH,gBAAgBI,qBAAhB,CAAsCC,OALvE;AAMD,CAPD,IAOO;;AAECC,IAFD,CAEQnB,QAAQC,GAAR,CAAYC,IAFpB;AAGCkB,YAHD,CAGgBpB,QAAQC,GAAR,CAAYM,YAH5B;AAILK,qBAAuBb,OAAvB,KAAkCO,cAAlC;AACD;AACF,CAlBH;;AAoBS,CAAEO,+BAAF,CAAmBD,qBAAnB,CApBT;;;AAuBAJ,aAAaa,GAAb,CAAiB,iBAAOX,GAAP,CAAYC,GAAZ;AACTW,OADS,CACC;AACMlB,OADN;AAEdM,IAAIa,OAAJ,CAAYC,UAFE,qCADD;;;;AAO6B,2BAAe;AACzDC,IAAKf,IAAIe,GADgD;AAEzDC,6CAFyD;AAGzDC,+BAHyD;AAIzDC,SAAU,2BAAeN,OAAf,CAJ+C;AAKzDO,qBALyD,CAAf,CAP7B,6BAOPC,QAPO,MAOPA,QAPO,CAOGC,MAPH,MAOGA,MAPH,CAOWC,OAPX,MAOWA,OAPX;;;AAeXF,QAfW;AAgBbnB,IAAImB,QAAJ,CAAa,GAAb,CAAkBA,SAASL,GAA3B,EAhBa;;;;AAoBTQ,SApBS,CAoBGvB,IAAIwB,OAAJ,CAAY,YAAZ,CApBH;;AAsB+BzB,iCAAiCC,GAAjC,CAAsCC,GAAtC,CAtB/B,+BAsBPE,eAtBO,OAsBPA,eAtBO,CAsBUD,UAtBV,OAsBUA,UAtBV;;AAwBTuB,MAxBS,CAwBA,8BAxBA;;AA0BTC,MA1BS,CA0BA,sBAAOC,MAAP,EA1BA;;AA4BTC,QA5BS,CA4BE,iBAAeC,cAAf;AACf,qDAAa,SAAUJ,MAAvB;AACE,iDAAS,UAAWF,SAApB;AACGD,OADH,CADF,CADe,CA5BF;;;;;AAoCfrB,IAAIkB,MAAJ,CAAW,eAAKW,OAAL,CAAaC,SAAb,CAAwB,UAAxB,CAAX,CAAgD;AAC9CC,YAAa9B,UADiC;AAE9C+B,UAAWL,QAFmC;AAG9CM,mBAAoBT,OAAOU,QAAP,EAH0B;AAI9CT,aAJ8C;AAK9CU,cAAe,kCAAUxB,OAAV,CAAmB,CAAEyB,OAAQ,IAAV,CAAnB,CAL+B,CAAhD,EApCe,2DAAjB,E;;;;AA6CevC,Y","file":"serverWebApp.js","sourcesContent":["// @flow\n\nimport Helmet from 'react-helmet'\nimport express from 'express'\nimport React from 'react'\nimport path from 'path'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport { getFarceResult } from 'found/lib/server'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport { version } from '../_configuration/package'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\nimport { getSiteInformation } from '../_configuration/urb-base-webapp/siteSettings'\nimport FetcherServer from './fetcherServer'\nimport { createResolver, historyMiddlewares, render, routeConfig } from './router'\nimport Wrapper from './components/Wrapper'\n\n// Read environment\nrequire('dotenv').load()\n\nconst envHost = process.env.HOST\nif (envHost == null || typeof envHost !== 'string')\n  throw new Error('ðŸ’”  urb-base-webapp requires the environment variable HOST to be set')\n\nconst envPort = process.env.PORT\nif (envPort == null || typeof envPort !== 'string')\n  throw new Error('ðŸ’”  urb-base-webapp requires the environment variable PORT to be set')\n\nconst envPortWebpack = process.env.PORT_WEBPACK\nif (envPortWebpack == null || typeof envPortWebpack !== 'string')\n  throw new Error('ðŸ’”  urb-base-webapp requires the environment variable PORT_WEBPACK to be set')\n\n// Create express router\nconst serverWebApp = express()\n\nasync function gatherLocationAndSiteInformation(req: Object, res: Object) {\n  let assetsPath\n\n  const siteInformation = await getSiteInformation(req, res)\n  if (siteInformation) {\n    if (process.env.NODE_ENV === 'production') {\n      assetsPath =\n        siteInformation.isSiteBuilderDisabled || siteInformation.inEditingMode\n          ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n            `/assets/${version}`\n          : // When in production mode, serve the assets compiled by factory's publisher\n            `/assets-site/${version}.${siteInformation.configurationAsObject.version}`\n    } else {\n      // When in development, always go to webpack over http\n      const host = process.env.HOST\n      const port_webpack = process.env.PORT_WEBPACK\n      assetsPath = `http://${envHost}:${envPortWebpack}/${version}`\n    }\n  } // If siteInformation was null, an error response has already been given\n\n  return { siteInformation, assetsPath }\n}\n\nserverWebApp.use(async (req, res) => {\n  const fetcher = new FetcherServer(\n    `http://localhost:${envPort}/graphql`,\n    req.cookies.UserToken1,\n    UserToken2ServerRendering,\n  )\n\n  const { redirect, status, element } = await getFarceResult({\n    url: req.url,\n    historyMiddlewares,\n    routeConfig,\n    resolver: createResolver(fetcher),\n    render,\n  })\n\n  if (redirect) {\n    res.redirect(302, redirect.url)\n    return\n  }\n\n  const userAgent = req.headers['user-agent']\n\n  const { siteInformation, assetsPath } = await gatherLocationAndSiteInformation(req, res)\n\n  const sheets = new SheetsRegistry()\n\n  const helmet = Helmet.rewind()\n\n  const rootHTML = ReactDOMServer.renderToString(\n    <JssProvider registry={sheets}>\n      <Wrapper userAgent={userAgent}>\n        {element}\n      </Wrapper>\n    </JssProvider>,\n  )\n\n  res.render(path.resolve(__dirname, 'html.ejs'), {\n    assets_path: assetsPath,\n    root_html: rootHTML,\n    server_side_styles: sheets.toString(),\n    helmet,\n    relay_payload: serialize(fetcher, { isJSON: true }),\n  })\n})\n\nexport default serverWebApp\n"]}