{"version":3,"sources":["../../../units/urb-base-webapp/serverWebApp.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","envPortWebpack","PORT_WEBPACK","serverWebApp","gatherLocationAndSiteInformation","req","res","assetsPath","siteInformation","NODE_ENV","isSiteBuilderDisabled","inEditingMode","configurationAsObject","version","render","renderError","obj","error","status","log","use","fetcher","cookies","UserToken1","url","historyMiddlewares","routeConfig","resolver","redirect","element","userAgent","headers","configuration","sheets","helmet","rewind","rootHTML","renderToString","resolve","__dirname","assets_path","root_html","server_side_styles","toString","appData","JSON","stringify","relay_payload","isJSON","send"],"mappings":"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","file":"serverWebApp.js","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport createRender from 'found/lib/createRender'\nimport { getFarceResult } from 'found/lib/server'\nimport express from 'express'\nimport Helmet from 'react-helmet'\nimport React from 'react'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport ErrorComponent from '../_configuration/urb-base-webapp/ErrorComponent'\nimport { getSiteInformation } from '../_configuration/urb-base-server/siteSettings'\nimport log from '../urb-base-server/log'\nimport { version } from '../_configuration/package'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\n\nimport FetcherServer from './fetcherServer'\nimport { createResolver, historyMiddlewares, routeConfig } from './router'\nimport Wrapper from './components/Wrapper'\n\n// Read environment\nrequire('dotenv').load()\n\nconst envHost = process.env.HOST\nif (envHost == null || typeof envHost !== 'string')\n  throw new Error(\n    'ðŸ’”  urb-base-webapp requires the environment variable HOST to be set'\n  )\n\nconst envPort = process.env.PORT\nif (envPort == null || typeof envPort !== 'string')\n  throw new Error(\n    'ðŸ’”  urb-base-webapp requires the environment variable PORT to be set'\n  )\n\nconst envPortWebpack = process.env.PORT_WEBPACK\nif (envPortWebpack == null || typeof envPortWebpack !== 'string')\n  throw new Error(\n    'ðŸ’”  urb-base-webapp requires the environment variable PORT_WEBPACK to be set'\n  )\n\n// Create express router\nconst serverWebApp = express()\n\nasync function gatherLocationAndSiteInformation(req: Object, res: Object) {\n  let assetsPath\n\n  const siteInformation = await getSiteInformation(req, res)\n  if (siteInformation) {\n    if (process.env.NODE_ENV === 'production') {\n      assetsPath =\n        siteInformation.isSiteBuilderDisabled || siteInformation.inEditingMode\n          ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n            `/assets/${version}`\n          : // When in production mode, serve the assets compiled by factory's publisher\n            `/assets-site/${version}.${siteInformation.configurationAsObject\n              .version}`\n    } else {\n      // When in development, always go to webpack over http\n      assetsPath = `http://${envHost}:${envPortWebpack}/${version}`\n    }\n  } // If siteInformation was null, an error response has already been given\n\n  return { siteInformation, assetsPath }\n}\n\nconst render = createRender({\n  renderError(obj: Object): React$Element<*> {\n    const { error } = obj\n\n    if (error.status !== 404)\n      log.log('error', 'Error: Render on server createRender renderError', obj)\n\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\n\nserverWebApp.use(async(req, res) => {\n  try {\n    const fetcher = new FetcherServer(\n      `http://localhost:${envPort}/graphql`,\n      req.cookies.UserToken1,\n      UserToken2ServerRendering\n    )\n\n    const { redirect, element } = await getFarceResult({\n      url: req.url,\n      historyMiddlewares,\n      routeConfig,\n      resolver: createResolver(fetcher),\n      render,\n    })\n\n    if (redirect) {\n      res.redirect(302, redirect.url)\n      return\n    }\n\n    const userAgent = req.headers['user-agent']\n\n    const {\n      siteInformation,\n      assetsPath,\n    } = await gatherLocationAndSiteInformation(req, res)\n    const configuration = siteInformation.configurationAsObject\n\n    const sheets = new SheetsRegistry()\n\n    const helmet = Helmet.rewind()\n\n    const rootHTML = ReactDOMServer.renderToString(\n      <JssProvider registry={sheets}>\n        <Wrapper userAgent={userAgent} configuration={configuration}>\n          {element}\n        </Wrapper>\n      </JssProvider>\n    )\n\n    res.render(path.resolve(__dirname, 'html.ejs'), {\n      assets_path: assetsPath,\n      root_html: rootHTML,\n      server_side_styles: sheets.toString(),\n      helmet,\n      appData: JSON.stringify(configuration.appData),\n      relay_payload: serialize(fetcher, { isJSON: true }),\n    })\n  } catch (err) {\n    log.log('error', 'Error: Render on server request', err)\n    res\n      .status(500)\n      .send(ReactDOMServer.renderToString(<ErrorComponent httpStatus={500} />))\n  }\n})\n\nexport default serverWebApp\n"]}