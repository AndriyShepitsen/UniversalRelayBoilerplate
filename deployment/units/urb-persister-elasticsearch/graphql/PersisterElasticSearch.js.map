{"version":3,"sources":["../../../../units/urb-persister-elasticsearch/graphql/PersisterElasticSearch.js"],"names":["Uuid_Null","PersisterElasticSearch","stores","entityName","filter","store","getStore","arr_Indexes","objectInStore","index","filterMatched","filterField","push","arr_Objects","map","ObjectType","filters","findObjects","Promise","resolve","arr_arr_Objects","fields","newObject","newFields","id","an_Object","fieldName","indexToDelete","findIndexes","splice","str","id1","id2","tableName","tableSchema","reject","runAsPartOfSetupDatabase","cb"],"mappings":"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","file":"PersisterElasticSearch.js","sourcesContent":["// @flow\n\nconst Uuid_Null = '00000000-0000-0000-0000-000000000000'\n\nexport default class PersisterElasticSearch {\n  stores: Object\n\n  constructor() {\n    this.stores = {}\n  }\n\n  getStore( entityName: string ) {\n    if ( entityName in this.stores ) return this.stores[entityName]\n    else return ( this.stores[entityName] = [])\n  }\n\n  findIndexes( entityName: string, filter: Object ) {\n    const store = this.getStore( entityName )\n    const arr_Indexes = []\n\n    for ( let [ objectInStore, index ] of store ) {\n      let filterMatched = true\n      for ( let filterField in filter )\n        if ( objectInStore[filterField] !== filter[filterField]) {\n          filterMatched = false\n          break\n        }\n\n      if ( filterMatched ) arr_Indexes.push( index )\n    }\n\n    return arr_Indexes\n  }\n\n  findObjects( entityName: string, filter: Object ) {\n    const store = this.getStore( entityName )\n    const arr_Objects = []\n\n    store.map( objectInStore => {\n      let filterMatched = true\n      for ( let filterField in filter )\n        if ( objectInStore[filterField] !== filter[filterField]) {\n          filterMatched = false\n          break\n        }\n\n      if ( filterMatched ) arr_Objects.push( objectInStore )\n    })\n\n    return arr_Objects\n  }\n\n  getOneObject(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<any> {\n    const arr_Objects = filters.map(\n      filter => this.findObjects( entityName, filter )[0]\n    )\n    return Promise.resolve( arr_Objects )\n  }\n\n  getObjectList(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<Array<any>> {\n    const arr_arr_Objects = filters.map( filter =>\n      this.findObjects( entityName, filter )\n    )\n    return Promise.resolve( arr_arr_Objects )\n  }\n\n  add( entityName: string, fields: any, ObjectType: any ): Promise<any> {\n    const store = this.getStore( entityName )\n    const newObject = new ObjectType( fields )\n\n    store.push( newObject )\n\n    return Promise.resolve()\n  }\n\n  update( entityName: string, fields: any ): Promise<null> {\n    // Only use the ID to find the record to delete\n    const newFields = {}\n    newFields.id = fields.id\n\n    const an_Object = this.findObjects( entityName, newFields )[0]\n\n    for ( let fieldName in fields ) an_Object[fieldName] = fields[fieldName]\n\n    return Promise.resolve()\n  }\n\n  remove( entityName: string, fields: any ): Promise<null> {\n    const store = this.getStore( entityName )\n\n    const indexToDelete = this.findIndexes( entityName, fields )[0]\n    store.splice( indexToDelete, 1 )\n\n    return Promise.resolve()\n  }\n\n  createLogger() {\n    return null // No need for logger, by default it will output to console in dev mode\n  }\n\n  uuidFromString( str: string ): string {\n    return str\n  }\n\n  uuidRandom(): string {\n    return ''\n  }\n\n  uuidNull() {\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n    return Uuid_Null\n  }\n\n  uuidToString( id: any ) {\n    // ids are always strings anyway\n    return id\n  }\n\n  uuidEquals( id1: any, id2: any ): boolean {\n    return id1 === id2\n  }\n\n  addTableSchema( tableName: string, tableSchema: Object ): void {\n    // Nothing to do, it's all in memory\n  }\n\n  confirmHealth(): Promise<null> {\n    return new Promise( ( resolve, reject ) => {\n      resolve()\n    })\n  }\n\n  initialize( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    // Nothing to do, it's all in memory\n    cb()\n  }\n}\n"]}