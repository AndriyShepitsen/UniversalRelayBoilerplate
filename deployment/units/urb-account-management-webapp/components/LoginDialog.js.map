{"version":3,"sources":["../../../../units/urb-account-management-webapp/components/LoginDialog.jsx"],"names":["styles","grow","flex","LoginDialog","props","context","UserAccount_Identifier","User_Secret","state","currentOperation","errorMessage","classes","open","_handle_Close","setState","event","target","value","_handle_onCLick_NewUser","_handle_onClick_LogIn","_handle_onCLick_CancelLogIn","_handle_onClick_TryAgain","renderChallenge","renderInProgress","renderFailure","Component","handlerClose","loc","window","location","host","protocol","hostname","port","fetch","method","credentials","headers","body","JSON","stringify","response","json","responseData","console","log","success","replace","href","error","message","handlerNewUser"],"mappings":"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","file":"LoginDialog.js","sourcesContent":["// @flow\n\nimport Button from 'material-ui/Button'\nimport Dialog, { DialogActions, DialogContent, DialogTitle } from 'material-ui/Dialog'\nimport { LinearProgress } from 'material-ui/Progress'\nimport Slide from 'material-ui/transitions/Slide'\nimport TextField from 'material-ui/TextField'\nimport { withStyles } from 'material-ui/styles'\nimport Typography from 'material-ui/Typography'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst styles = theme => ({\n  grow: {\n    flex: '1 1 auto',\n  },\n})\n\nclass LoginDialog extends React.Component<\n  {\n    UserAccount_Identifier: string,\n    User_Secret: string,\n    open: boolean,\n    handlerClose: PropTypes.func.isRequired,\n    handlerNewUser: PropTypes.func.isRequired,\n    classes: Object,\n  },\n  {\n    currentOperation: 'challenge' | 'in progress' | 'failure',\n    errorMessage: string,\n    UserAccount_Identifier: string,\n    User_Secret: string,\n  },\n> {\n  constructor(props: Object, context: Object) {\n    super(props, context)\n\n    const { UserAccount_Identifier, User_Secret } = this.props\n\n    this.state = {\n      currentOperation: 'challenge',\n      errorMessage: '',\n      UserAccount_Identifier: '',\n      User_Secret: '',\n    }\n  }\n\n  _handle_Close = () => {\n    this.props.handlerClose()\n  }\n\n  _handle_onClick_LogIn = async () => {\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    this.setState({\n      currentOperation: 'in progress',\n      User_Secret: '', // In order to prevent the password from being accessed later\n    })\n\n    try {\n      const loc = window.location\n      const host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n      const response = await fetch(host + '/auth/login', {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          UserAccount_Identifier: UserAccount_Identifier,\n          User_Secret: User_Secret,\n        }),\n      })\n\n      const responseData = await response.json()\n\n      console.log('LOG IN RESPONSE')\n      console.log(responseData)\n\n      if (responseData.success) {\n        // In case of success, realod the application from server\n        location.replace(location.href)\n      } else {\n        // In case of error, tell user what the error is\n        this.setState({ currentOperation: 'failure', errorMessage: responseData.error }) // ZZZ Does server really send the reason for the failed login?\n      }\n    } catch (err) {\n      // In case response could not be received properly, tell the user\n      // In case of error, tell user what the error is\n      this.setState({\n        currentOperation: 'failure',\n        errorMessage:\n          'Did not receive proper response from server. Please try again. Message:' + err.message,\n      })\n    }\n  }\n\n  _handle_onCLick_NewUser = () => {\n    this.props.handlerNewUser()\n  }\n\n  _handle_onCLick_CancelLogIn = () => {\n    this.setState({\n      currentOperation: 'failure',\n      errorMessage: 'Log in has been canceled',\n    })\n  }\n\n  _handle_onClick_TryAgain = () => {\n    this.setState({\n      currentOperation: 'challenge',\n      errorMessage: '',\n    })\n  }\n\n  renderChallenge() {\n    const { classes, open } = this.props\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    return (\n      <Dialog open={open} transition={Slide} onRequestClose={this._handle_Close}>\n        <DialogTitle>Log In</DialogTitle>\n\n        <DialogContent>\n          <TextField\n            label=\"Account Name\"\n            fullWidth={true}\n            value={UserAccount_Identifier}\n            onChange={event => this.setState({ UserAccount_Identifier: event.target.value })}\n          />\n          <TextField\n            label=\"Password\"\n            type=\"password\"\n            fullWidth={true}\n            value={User_Secret}\n            onChange={event => this.setState({ User_Secret: event.target.value })}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"accent\" onClick={this._handle_onCLick_NewUser}>\n            New User\n          </Button>\n          <div className={classes.grow} />\n          <Button onClick={this._handle_Close}>Cancel</Button>\n          <Button color=\"primary\" onClick={this._handle_onClick_LogIn}>\n            Log In\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderInProgress() {\n    const { classes, open } = this.props\n    const { UserAccount_Identifier } = this.state\n\n    return (\n      <Dialog open={open} onRequestClose={this._handle_Close}>\n        <DialogTitle>Logging in</DialogTitle>\n\n        <DialogContent>\n          <Typography component=\"p\">\n            Logging in as\n            <br />\n            {UserAccount_Identifier}\n          </Typography>\n          <LinearProgress mode=\"query\" />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"accent\" onClick={this._handle_onCLick_CancelLogIn}>\n            New User\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderFailure() {\n    const { classes, open } = this.props\n    const { UserAccount_Identifier, errorMessage } = this.state\n\n    return (\n      <Dialog open={open} onRequestClose={this._handle_Close}>\n        <DialogTitle>Log In Failed</DialogTitle>\n\n        <DialogContent>\n          <Typography component=\"p\">\n            Failed loggin in as\n            <br />\n            {UserAccount_Identifier}\n            <br />\n            Reason: {errorMessage}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this._handle_onClick_TryAgain}>Try Again</Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  render() {\n    const { currentOperation } = this.state\n\n    return (\n      <div>\n        {currentOperation === 'challenge' && this.renderChallenge()}\n        {currentOperation === 'in progress' && this.renderInProgress()}\n        {currentOperation === 'failure' && this.renderFailure()}\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(LoginDialog)\n"]}