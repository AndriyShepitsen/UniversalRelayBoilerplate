{"version":3,"sources":["../../../../units/urb-account-management-webapp/components/LoginDialog.jsx"],"names":["styles","grow","flex","LoginDialog","props","context","_handle_Close","handlerClose","_handle_onClick_LogIn","state","UserAccount_Identifier","User_Secret","setState","currentOperation","loc","window","location","host","protocol","hostname","port","fetch","method","credentials","headers","body","JSON","stringify","response","json","responseData","success","replace","href","errorMessage","error","message","_handle_onCLick_NewUser","handlerNewUser","_handle_onCLick_CancelLogIn","_handle_onClick_TryAgain","classes","open","event","target","value","renderChallenge","renderInProgress","renderFailure","Component"],"mappings":"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","file":"LoginDialog.js","sourcesContent":["// @flow\n\nimport Button from 'material-ui/Button'\nimport Dialog, { DialogActions, DialogContent, DialogTitle } from 'material-ui/Dialog'\nimport { LinearProgress } from 'material-ui/Progress'\nimport Slide from 'material-ui/transitions/Slide'\nimport TextField from 'material-ui/TextField'\nimport { withStyles } from 'material-ui/styles'\nimport Typography from 'material-ui/Typography'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst styles = theme => ({\n  grow: {\n    flex: '1 1 auto',\n  },\n})\n\nclass LoginDialog extends React.Component<\n  {\n    UserAccount_Identifier: string,\n    User_Secret: string,\n    open: boolean,\n    handlerClose: PropTypes.func.isRequired,\n    handlerNewUser: PropTypes.func.isRequired,\n    classes: Object,\n  },\n  {\n    currentOperation: 'challenge' | 'in progress' | 'failure',\n    errorMessage: string,\n    UserAccount_Identifier: string,\n    User_Secret: string,\n  },\n> {\n  constructor(props: Object, context: Object) {\n    super(props, context)\n\n    this.state = {\n      currentOperation: 'challenge',\n      errorMessage: '',\n      UserAccount_Identifier: '',\n      User_Secret: '',\n    }\n  }\n\n  _handle_Close = () => {\n    this.props.handlerClose()\n  }\n\n  _handle_onClick_LogIn = async () => {\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    this.setState({\n      currentOperation: 'in progress',\n      User_Secret: '', // In order to prevent the password from being accessed later\n    })\n\n    try {\n      const loc = window.location\n      const host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n      const response = await fetch(host + '/auth/login', {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          UserAccount_Identifier: UserAccount_Identifier,\n          User_Secret: User_Secret,\n        }),\n      })\n\n      const responseData = await response.json()\n\n      if (responseData.success) {\n        // In case of success, realod the application from server\n        window.location.replace(window.location.href, '')\n      } else {\n        // In case of error, tell user what the error is\n        this.setState({ currentOperation: 'failure', errorMessage: responseData.error }) // ZZZ Does server really send the reason for the failed login?\n      }\n    } catch (err) {\n      // In case response could not be received properly, tell the user\n      // In case of error, tell user what the error is\n      this.setState({\n        currentOperation: 'failure',\n        errorMessage:\n          'Did not receive proper response from server. Please try again. Message:' + err.message,\n      })\n    }\n  }\n\n  _handle_onCLick_NewUser = () => {\n    this.props.handlerNewUser()\n  }\n\n  _handle_onCLick_CancelLogIn = () => {\n    this.setState({\n      currentOperation: 'failure',\n      errorMessage: 'Log in has been canceled',\n    })\n  }\n\n  _handle_onClick_TryAgain = () => {\n    this.setState({\n      currentOperation: 'challenge',\n      errorMessage: '',\n    })\n  }\n\n  renderChallenge() {\n    const { classes, open } = this.props\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    return (\n      <Dialog open={open} transition={Slide} onRequestClose={this._handle_Close}>\n        <DialogTitle>Log In</DialogTitle>\n\n        <DialogContent>\n          <TextField\n            label=\"Account Name\"\n            fullWidth={true}\n            value={UserAccount_Identifier}\n            onChange={event => this.setState({ UserAccount_Identifier: event.target.value })}\n          />\n          <TextField\n            label=\"Password\"\n            type=\"password\"\n            fullWidth={true}\n            value={User_Secret}\n            onChange={event => this.setState({ User_Secret: event.target.value })}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"accent\" onClick={this._handle_onCLick_NewUser}>\n            New User\n          </Button>\n          <div className={classes.grow} />\n          <Button onClick={this._handle_Close}>Cancel</Button>\n          <Button color=\"primary\" onClick={this._handle_onClick_LogIn}>\n            Log In\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderInProgress() {\n    const { open } = this.props\n    const { UserAccount_Identifier } = this.state\n\n    return (\n      <Dialog open={open} onRequestClose={this._handle_Close}>\n        <DialogTitle>Logging in</DialogTitle>\n\n        <DialogContent>\n          <Typography component=\"p\">\n            Logging in as\n            <br />\n            {UserAccount_Identifier}\n          </Typography>\n          <LinearProgress mode=\"query\" />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"accent\" onClick={this._handle_onCLick_CancelLogIn}>\n            New User\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderFailure() {\n    const { open } = this.props\n    const { UserAccount_Identifier, errorMessage } = this.state\n\n    return (\n      <Dialog open={open} onRequestClose={this._handle_Close}>\n        <DialogTitle>Log In Failed</DialogTitle>\n\n        <DialogContent>\n          <Typography component=\"p\">\n            Failed loggin in as\n            <br />\n            {UserAccount_Identifier}\n            <br />\n            Reason: {errorMessage}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this._handle_onClick_TryAgain}>Try Again</Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  render() {\n    const { currentOperation } = this.state\n\n    return (\n      <div>\n        {currentOperation === 'challenge' && this.renderChallenge()}\n        {currentOperation === 'in progress' && this.renderInProgress()}\n        {currentOperation === 'failure' && this.renderFailure()}\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(LoginDialog)\n"]}