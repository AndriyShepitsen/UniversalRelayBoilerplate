{"version":3,"sources":["../../../../units/urb-account-management-webapp/components/NewUserScreen.jsx"],"names":["styles","card","minWidth","NewUserScreen","props","context","_handle_onClick_Create","state","UserAccount_Identifier","User_Secret","setState","currentOperation","loc","window","location","host","protocol","hostname","port","fetch","method","credentials","headers","body","JSON","stringify","response","json","responseData","console","log","success","errorMessage","error","message","_handle_onClick_CancelCreation","_handle_onClick_TryAgain","_handle_onClick_Continue","replace","classes","event","target","value","renderPrompt","renderCreating","renderSuccess","renderFailure","Component"],"mappings":"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","file":"NewUserScreen.js","sourcesContent":["// @flow\n\nimport AddIcon from 'material-ui-icons/Add'\nimport Button from 'material-ui/Button'\nimport Card, { CardActions, CardHeader } from 'material-ui/Card'\nimport { LinearProgress } from 'material-ui/Progress'\nimport { withStyles } from 'material-ui/styles'\nimport TextField from 'material-ui/TextField'\nimport Typography from 'material-ui/Typography'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport ResponsiveContentArea from '../../urb-base-webapp/components/ResponsiveContentArea'\n\nconst styles = theme => ({\n  card: {\n    minWidth: 275,\n  },\n})\n\nclass NewUserScreen extends React.Component<\n  {\n    classes: PropTypes.object.isRequired,\n  },\n  {\n    currentOperation: 'prompt' | 'creating' | 'success' | 'failure',\n    errorMessage: string,\n    UserAccount_Identifier: string,\n    User_Secret: string,\n  },\n> {\n  constructor(props: Object, context: Object) {\n    super(props, context)\n\n    this.state = {\n      currentOperation: 'prompt',\n      errorMessage: '',\n      UserAccount_Identifier: '',\n      User_Secret: '',\n    }\n  }\n\n  _handle_onClick_Create = async () => {\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    this.setState({\n      currentOperation: 'creating',\n      User_Secret: '', // In order to prevent the password from being accessed later\n    })\n\n    try {\n      const loc = window.location\n      const host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n      const response = await fetch(host + '/auth/createuser', {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          UserAccount_Identifier: UserAccount_Identifier,\n          User_Secret: User_Secret,\n        }),\n      })\n\n      const responseData = await response.json()\n\n      console.log('CREATE USER RESPONSE')\n      console.log(responseData)\n\n      if (responseData.success) {\n        // In case of success, notify user\n        this.setState({ currentOperation: 'success' })\n      } else {\n        // In case of error, tell user what the error is\n        this.setState({ currentOperation: 'failure', errorMessage: responseData.error })\n      }\n    } catch (err) {\n      // In case response could not be received properly, tell the user\n      // In case of error, tell user what the error is\n      this.setState({\n        currentOperation: 'failure',\n        errorMessage:\n          'Did not receive proper response from server. Please try again. Message:' + err.message,\n      })\n    }\n  }\n\n  _handle_onClick_CancelCreation = () => {\n    this.setState({\n      currentOperation: 'failure',\n      errorMessage: 'User creation has been canceled',\n    })\n  }\n\n  _handle_onClick_TryAgain = () => {\n    this.setState({\n      currentOperation: 'prompt',\n      errorMessage: '',\n    })\n  }\n\n  _handle_onClick_Continue = () => {\n    location.replace('/')\n  }\n\n  renderCreating() {\n    const { classes } = this.props\n    const { UserAccount_Identifier } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Creating user\" />\n        <Typography component=\"p\">\n          Creating user\n          <br />\n          {UserAccount_Identifier}\n          <br />\n          Please wait.\n        </Typography>\n        <LinearProgress mode=\"query\" />\n        <CardActions>\n          <Button onClick={this._handle_onClick_CancelCreation}>Cancel</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderSuccess() {\n    const { classes } = this.props\n    const { UserAccount_Identifier } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Creating user\" />\n        <Typography component=\"p\">\n          Created user\n          <br />\n          {UserAccount_Identifier}\n        </Typography>\n        <CardActions>\n          <Button onClick={this._handle_onClick_Continue}>Continue</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderFailure() {\n    const { classes } = this.props\n    const { UserAccount_Identifier, errorMessage } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Creating user\" />\n        <Typography component=\"p\">\n          Failed creating user\n          <br />\n          {UserAccount_Identifier}\n          <br />\n          Reason: {errorMessage}\n        </Typography>\n        <CardActions>\n          <Button onClick={this._handle_onClick_TryAgain}>Try Again</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderPrompt() {\n    const { classes } = this.props\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Create New User\" />\n        <TextField\n          label=\"Account Name\"\n          fullWidth={true}\n          value={UserAccount_Identifier}\n          onChange={event => this.setState({ UserAccount_Identifier: event.target.value })}\n        />\n        <TextField\n          label=\"Password\"\n          type=\"password\"\n          fullWidth={true}\n          value={User_Secret}\n          onChange={event => this.setState({ User_Secret: event.target.value })}\n        />\n        <CardActions>\n          <Button onClick={this._handle_onClick_Create}>Create</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  render() {\n    const { currentOperation } = this.state\n\n    return (\n      <ResponsiveContentArea>\n        {currentOperation === 'prompt' && this.renderPrompt()}\n        {currentOperation === 'creating' && this.renderCreating()}\n        {currentOperation === 'success' && this.renderSuccess()}\n        {currentOperation === 'failure' && this.renderFailure()}\n      </ResponsiveContentArea>\n    )\n  }\n}\n\nexport default withStyles(styles)(NewUserScreen)\n"]}