{"version":3,"sources":["../../../../units/urb-persister-dynamodb/graphql/PersisterDynamoDB.js"],"names":["require","load","Uuid_Null","AWS","process","env","DYNAMODB_SECRETACCESSKEY","config","update","accessKeyId","DYNAMODB_ACCESSKEYID","secretAccessKey","region","DYNAMODB_REGION","opts","endpoint","apiVersion","dynamoDriver","DynamoDB","PersisterDynamoDB","tables","canAddMoreTableSchemas","entityName","ObjectType","filters","resultPromises","filter","push","Promise","resolve","reject","get","err","entity","all","query","scan","fieldName","where","equals","includes","usingIndex","exec","queryResults","arrRetObj","Items","fields","create","destroy","str","v1","id","id1","id2","tableName","tableSchema","console","error","exit","vogelsSchema","schema","indexes","key","Array","isArray","hashKey","fieldType","vogelFieldDefinition","types","uuid","string","allow","date","number","boolean","log","name","type","define","runAsPartOfSetupDatabase","cb","createTables"],"mappings":"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","file":"PersisterDynamoDB.js","sourcesContent":["// @flow\n\nimport Joi from 'joi'\nimport uuid from 'node-uuid'\nimport vogels from 'vogels'\nimport winston from 'winston'\n\nrequire('dotenv').load()\n\nconst Uuid_Null = '00000000-0000-0000-0000-000000000000'\nconst AWS = vogels.AWS\n\nif (process.env.DYNAMODB_SECRETACCESSKEY) {\n  // test on aws\n  AWS.config.update({\n    accessKeyId: process.env.DYNAMODB_ACCESSKEYID,\n    secretAccessKey: process.env.DYNAMODB_SECRETACCESSKEY,\n    region: process.env.DYNAMODB_REGION,\n  })\n} else {\n  // test locally via docker\n  AWS.config.update({ region: 'us-east-1' })\n  const opts = { endpoint: 'http://localhost:8000', apiVersion: '2012-08-10' }\n  vogels.dynamoDriver(new AWS.DynamoDB(opts))\n}\n\nexport default class PersisterDynamoDB {\n  constructor() {\n    this.tables = {}\n    this.canAddMoreTableSchemas = true\n  }\n\n  getOneObject(entityName: string, ObjectType: any, filters: Array<any>): Promise<any> {\n    const resultPromises = []\n\n    for (let filter of filters)\n      resultPromises.push(\n        new Promise((resolve, reject) => {\n          this.tables[entityName].get(filter, (err, entity) => {\n            if (err) reject(err)\n            else {\n              if (entity != null) resolve(new ObjectType(entity.get()))\n              else resolve(null)\n            }\n          })\n        }),\n      )\n\n    return Promise.all(resultPromises)\n  }\n\n  getObjectList(entityName: string, ObjectType: any, filters: Array<any>): Promise<Array<Object>> {\n    const resultPromises = []\n\n    for (let filter of filters)\n      resultPromises.push(\n        new Promise((resolve, reject) => {\n          let query = this.tables[entityName].scan()\n          for (let fieldName in filter) {\n            query = query.where(fieldName).equals(filter[fieldName])\n            if (fieldName !== 'id' && fieldName.includes('Id'))\n              query = query.usingIndex(fieldName + 'Index')\n          }\n\n          query.exec((err, queryResults) => {\n            if (err) reject(err)\n            else {\n              const arrRetObj = []\n              for (let entity of queryResults.Items) arrRetObj.push(new ObjectType(entity.get()))\n              resolve(arrRetObj)\n            }\n          })\n        }),\n      )\n\n    return Promise.all(resultPromises)\n  }\n\n  add(entityName: string, fields: any, ObjectType: any): Promise<> {\n    return new Promise((resolve, reject) => {\n      this.tables[entityName].create(fields, err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  update(entityName: string, fields: any): Promise<> {\n    return new Promise((resolve, reject) => {\n      this.tables[entityName].update(fields, err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  remove(entityName: string, fields: any): Promise<> {\n    return new Promise((resolve, reject) => {\n      this.tables[entityName].destroy(fields, err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  createLogger() {\n    // TODO x1000 have some kind of adapter for winston\n    return null\n  }\n\n  uuidFromString(str: string): string {\n    return str\n  }\n\n  uuidRandom(): string {\n    return uuid.v1()\n  }\n\n  uuidNull() {\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n    return Uuid_Null\n  }\n\n  uuidToString(id: any) {\n    return id\n  }\n\n  uuidEquals(id1: any, id2: any): boolean {\n    return id1 == id2\n  }\n\n  addTableSchema(tableName: string, tableSchema: Object): void {\n    if (!this.canAddMoreTableSchemas) {\n      console.error('ðŸ’” Attempting to add table schemas to Vogel after createTables.')\n      process.exit(1)\n    }\n\n    const vogelsSchema = {\n      schema: {},\n      indexes: [],\n    }\n\n    // Determine key. Not sure how composite key should be handled\n    let key = tableSchema.key\n    if (Array.isArray(key)) key = key[0] // A bit crude but seems to create the table properly\n\n    vogelsSchema.hashKey = key\n\n    // Copy fields\n    for (let fieldName in tableSchema.fields) {\n      const fieldType = tableSchema.fields[fieldName]\n\n      let vogelFieldDefinition\n\n      if (fieldType == 'uuid') vogelFieldDefinition = vogels.types.uuid()\n      else if (fieldType == 'text') vogelFieldDefinition = Joi.string().allow('')\n      else if (fieldType == 'timestamp') vogelFieldDefinition = Joi.date()\n      else if (fieldType == 'int') vogelFieldDefinition = Joi.number()\n      else if (fieldType == 'boolean') vogelFieldDefinition = Joi.boolean()\n      else {\n        // Crappy catch all for now just for testing\n        console.log('ðŸ’”  Dynamo DB: unsupported field type ' + fieldType)\n        vogelFieldDefinition = Joi.string()\n      }\n\n      vogelsSchema.schema[fieldName] = vogelFieldDefinition\n    }\n\n    // Copy indexes\n    if (tableSchema.indexes)\n      for (let fieldName of tableSchema.indexes)\n        vogelsSchema.indexes.push({ hashKey: fieldName, name: fieldName + 'Index', type: 'global' })\n\n    this.tables[tableName] = vogels.define(tableName, vogelsSchema)\n  }\n\n  confirmHealth(): Promise<> {\n    //\n    return new Promise((resolve, reject) => {\n      resolve()\n    })\n  }\n\n  initialize(runAsPartOfSetupDatabase: boolean, cb: Function): void {\n    // All table schemas should have been added by now.\n    this.canAddMoreTableSchemas = false\n\n    vogels.createTables(err => {\n      if (err) {\n        console.log('ðŸ’” Initializing DynamoDB persister - error')\n        console.log(err)\n        process.exit(1)\n      } else {\n        cb()\n      }\n    })\n  }\n}\n"]}