{"version":3,"sources":["../../../units/urb-base-tools/build-units.js"],"names":["existsAsync","exists","readFileAsync","readFile","readdirAsync","readdir","writeFileAsync","writeFile","sortObject","object","t","Object","keys","sort","forEach","k","orderPackages","packageAsObject","scripts","dependencies","devDependencies","createPackageJson","units","packageJsonFileName","resolve","currentPackageAsJSONString","toString","currentPackageAsObject","JSON","parse","engines","name","version","unitName","packageAsObjectName","packageToAddAsObject","stringify","createMutations","mutationsImports","mutationsExports","endsWith","mutationsDir","mutationFileNames","filter","mutationFileName","mutation","substring","length","push","replace","mutations","concat","join","createSchemas","schemasImports","schemasDir","objectTypeFileNames","objectTypeFileName","objectType","schemas","createViewerFields","viewerFieldsImports","viewerFieldsExports","viewerFieldsFileName","viewerFieldsImportName","viewerFields","createRoutes","routesImports","routesExports","routesDir","routeFileNames","routeFileName","startsWith","route","routes","getUnits","fileName","buildGraphQLSchema","result","errors","Error","main","console","log","taskPromises","Promise","all","then"],"mappings":"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","file":"build-units.js","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport { graphql } from 'graphql'\nimport path from 'path'\nimport { promisify } from 'util'\nimport { introspectionQuery, printSchema } from 'graphql/utilities'\n\nimport ensureFileContent from './ensureFileContent'\nimport schema from '../urb-base-server/graphql/schema'\n\nconst existsAsync = promisify(fs.exists)\nconst readFileAsync = promisify(fs.readFile)\nconst readdirAsync = promisify(fs.readdir)\nconst writeFileAsync = promisify(fs.writeFile)\n\nfunction sortObject(object: Object) {\n  var t = {}\n  Object.keys(object).sort().forEach(function(k) {\n    t[k] = object[k]\n  })\n  return t\n}\n\nfunction orderPackages(packageAsObject) {\n  packageAsObject.scripts = sortObject(packageAsObject.scripts)\n  packageAsObject.dependencies = sortObject(packageAsObject.dependencies)\n  packageAsObject.devDependencies = sortObject(packageAsObject.devDependencies)\n}\n\nasync function createPackageJson(units: Array<string>) {\n  const packageJsonFileName = path.resolve('./package.json')\n  const currentPackageAsJSONString = (await readFileAsync(packageJsonFileName)).toString()\n  const currentPackageAsObject = JSON.parse(currentPackageAsJSONString)\n  const packageAsObject = {\n    dependencies: {},\n    devDependencies: {},\n    engines: {},\n    scripts: {},\n    name: null,\n    version: null,\n  }\n\n  // Make sure not to overwrite version information\n  packageAsObject.version = currentPackageAsObject.version\n  packageAsObject.name = currentPackageAsObject.name\n\n  // Add packages to object\n  for (let unitName of units) {\n    const packageAsObjectName = path.resolve('./units', unitName, 'package.part.json')\n    if (await existsAsync(packageAsObjectName)) {\n      const packageToAddAsObject = JSON.parse((await readFileAsync(packageAsObjectName)).toString())\n\n      if (packageToAddAsObject.dependencies)\n        Object.assign(packageAsObject.dependencies, packageToAddAsObject.dependencies)\n      if (packageToAddAsObject.devDependencies)\n        Object.assign(packageAsObject.devDependencies, packageToAddAsObject.devDependencies)\n      if (packageToAddAsObject.engines)\n        Object.assign(packageAsObject.engines, packageToAddAsObject.engines)\n      if (packageToAddAsObject.scripts)\n        Object.assign(packageAsObject.scripts, packageToAddAsObject.scripts)\n    }\n  }\n\n  // Make them pretty\n  orderPackages(packageAsObject)\n\n  await ensureFileContent(\n    packageJsonFileName,\n    currentPackageAsJSONString,\n    JSON.stringify(packageAsObject, null, 2),\n  )\n}\n\nasync function createMutations(units: Array<string>) {\n  const mutationsImports = []\n  const mutationsExports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-server')) {\n      const mutationsDir = path.resolve('./units', unitName, 'graphql/mutation')\n      if (await existsAsync(mutationsDir)) {\n        const mutationFileNames = await readdirAsync(mutationsDir)\n\n        mutationFileNames.filter(mutationFileName => {\n          if (mutationFileName.endsWith('.js')) {\n            const mutation = mutationFileName.substring(0, mutationFileName.length - 3)\n            mutationsImports.push(\n              'import ' +\n                mutation.replace('.', '_') +\n                \" from '../../../\" +\n                unitName +\n                '/graphql/mutation/' +\n                mutation +\n                \"'\",\n            )\n            mutationsExports.push('  ' + mutation + ',')\n          }\n        })\n      }\n    }\n\n  let mutations = ['// @flow', '']\n  mutations = mutations.concat(mutationsImports)\n  mutations = mutations.concat(['', 'export default {'])\n  mutations = mutations.concat(mutationsExports)\n  mutations = mutations.concat(['}'])\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/urb-base-server/graphql/_mutations.js'),\n    null,\n    mutations.join('\\r\\n'),\n  )\n}\n\nasync function createSchemas(units: Array<string>) {\n  const schemasImports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-server')) {\n      const schemasDir = path.resolve('./units', unitName, 'graphql/model')\n      if (await existsAsync(schemasDir)) {\n        const objectTypeFileNames = await readdirAsync(schemasDir)\n\n        objectTypeFileNames.filter(objectTypeFileName => {\n          if (objectTypeFileName.endsWith('.js')) {\n            const objectType = objectTypeFileName.substring(0, objectTypeFileName.length - 3)\n            schemasImports.push(\n              'import ' +\n                objectType.replace('.', '_') +\n                \" from '../../../\" +\n                unitName +\n                '/graphql/model/' +\n                objectType +\n                \"'\",\n            )\n          }\n        })\n      }\n    }\n\n  let schemas = ['// @flow', '']\n  schemas = schemas.concat(schemasImports)\n  schemas = schemas.concat(['', 'export default true'])\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/urb-base-server/graphql/_schemas.js'),\n    null,\n    schemas.join('\\r\\n'),\n  )\n}\n\nasync function createViewerFields(units: Array<string>) {\n  const viewerFieldsImports = []\n  const viewerFieldsExports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-server')) {\n      const viewerFieldsFileName = path.resolve(\n        './units',\n        unitName,\n        'graphql/type/_ViewerFields.js',\n      )\n      if (await existsAsync(viewerFieldsFileName)) {\n        const viewerFieldsImportName = unitName.replace(/-/g, '_')\n        viewerFieldsImports.push(\n          'import ' +\n            viewerFieldsImportName +\n            \" from '../../../\" +\n            unitName +\n            \"/graphql/type/_ViewerFields'\",\n        )\n        viewerFieldsExports.push('  ...' + viewerFieldsImportName + ',')\n      }\n    }\n\n  let viewerFields = ['// @flow', '']\n  viewerFields = viewerFields.concat(viewerFieldsImports)\n  viewerFields = viewerFields.concat(['', 'export default {'])\n  viewerFields = viewerFields.concat(viewerFieldsExports)\n  viewerFields = viewerFields.concat(['}'])\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/urb-base-server/graphql/_ViewerFields.js'),\n    null,\n    viewerFields.join('\\r\\n'),\n  )\n}\n\nasync function createRoutes(units: Array<string>) {\n  const routesImports = []\n  const routesExports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-webapp')) {\n      const routesDir = path.resolve('./units', unitName)\n      if (await existsAsync(routesDir)) {\n        const routeFileNames = await readdirAsync(routesDir)\n\n        routeFileNames.filter(routeFileName => {\n          if (routeFileName.endsWith('.jsx') && routeFileName.startsWith('routeAppFrame')) {\n            const route = routeFileName.substring(0, routeFileName.length - 4)\n            routesImports.push('import ' + route + \" from '../../\" + unitName + '/' + route + \"'\")\n            routesExports.push('  ' + route + ',')\n          }\n        })\n      }\n    }\n\n  let routes = ['// @flow', '']\n  routes = routes.concat(routesImports)\n  routes = routes.concat(['', 'export default ['])\n  routes = routes.concat(routesExports)\n  routes = routes.concat([']'])\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/urb-base-webapp/routesAppFrame.js'),\n    null,\n    routes.join('\\r\\n'),\n  )\n}\n\nasync function getUnits() {\n  const units = (await readdirAsync('./units/')).filter(\n    fileName => fileName != '.DS_Store' && fileName != '_configuration',\n  )\n  return units\n}\n\nasync function buildGraphQLSchema() {\n  const result = await graphql(schema, introspectionQuery)\n  if (result.errors)\n    throw new Error('Failed introspecting schema: ' + JSON.stringify(result.errors, null, 2))\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/urb-base-server/graphql/schema.json'),\n    null,\n    JSON.stringify(result, null, 2),\n  )\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/urb-base-server/graphql/schema.graphql'),\n    null,\n    printSchema(schema),\n  )\n}\n\nasync function main() {\n  const units = await getUnits()\n  console.log(units)\n\n  const taskPromises = [\n    createPackageJson(units),\n    createViewerFields(units),\n    createSchemas(units),\n    createMutations(units),\n    createRoutes(units),\n  ]\n\n  await Promise.all(taskPromises)\n\n  // Schema should be built after all unit files have been created\n  await buildGraphQLSchema()\n}\n\nmain().then(() => console.log('Fin.'))\n"]}