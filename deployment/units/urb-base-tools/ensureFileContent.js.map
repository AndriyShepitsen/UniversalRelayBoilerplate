{"version":3,"sources":["../../../units/urb-base-tools/ensureFileContent.js"],"names":["readFileAsync","readFile","writeFileAsync","writeFile","ensureFileContent","fileName","currentFileContent","newFileContent","toString","console","log"],"mappings":";;AAEA,sB;AACA,0B;;AAEA,GAAMA,eAAgB,oBAAW,aAAGC,QAAd,CAAtB;AACA,GAAMC,gBAAiB,oBAAW,aAAGC,SAAd,CAAvB,C;;AAEe,QAAeC,kBAAf;AACbC,QADa;AAEbC,kBAFa;AAGbC,cAHa;;;AAMRD,oBAAsB,IANd;AAOkBN,cAAeK,QAAf,CAPlB,SAOXC,kBAPW,eAO8CE,QAP9C;;AASRF,qBAAuBC,cATf;AAUXE,QAAQC,GAAR,CAAa,iBAAmBL,QAAhC,EAVW;AAWLH,eAAgBG,QAAhB,CAA0BE,cAA1B,CAA0C,MAA1C,CAXK;;AAaXE,QAAQC,GAAR,CAAa,iBAAmBL,QAAhC,EAbW,yD","file":"ensureFileContent.js","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport { promisify } from 'util'\n\nconst readFileAsync = promisify( fs.readFile )\nconst writeFileAsync = promisify( fs.writeFile )\n\nexport default async function ensureFileContent(\n  fileName: string,\n  currentFileContent: ?string,\n  newFileContent: string\n) {\n  // If the current file content is not provided, get it\n  if ( currentFileContent == null )\n    currentFileContent = ( await readFileAsync( fileName ) ).toString()\n\n  if ( currentFileContent !== newFileContent ) {\n    console.log( '‚úçÔ∏è  written:  ' + fileName )\n    await writeFileAsync( fileName, newFileContent, 'utf8' )\n  } else {\n    console.log( 'üìé  skipped:  ' + fileName )\n  }\n}\n"]}