{"version":3,"sources":["../../../units/urb-base-tools/ensureFileContent.js"],"names":["readFileAsync","readFile","writeFileAsync","writeFile","ensureFileContent","fileName","currentFileContent","newFileContent","toString","console","log"],"mappings":";;AAEA,sB;AACA,0B;;AAEA,GAAMA,eAAgB,oBAAU,aAAGC,QAAb,CAAtB;AACA,GAAMC,gBAAiB,oBAAU,aAAGC,SAAb,CAAvB,C;;AAEe,QAAeC,kBAAf;AACbC,QADa;AAEbC,kBAFa;AAGbC,cAHa;;;AAMTD,oBAAsB,IANb,0EAM+CN,cAAcK,QAAd,CAN/C,SAMmBC,kBANnB,eAMwEE,QANxE;;AAQTF,oBAAsBC,cARb;AASXE,QAAQC,GAAR,CAAY,iBAAmBL,QAA/B,EATW;AAULH,eAAeG,QAAf,CAAyBE,cAAzB,CAAyC,MAAzC,CAVK;;AAYXE,QAAQC,GAAR,CAAY,iBAAmBL,QAA/B,EAZW,yD","file":"ensureFileContent.js","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport { promisify } from 'util'\n\nconst readFileAsync = promisify(fs.readFile)\nconst writeFileAsync = promisify(fs.writeFile)\n\nexport default async function ensureFileContent(\n  fileName: string,\n  currentFileContent: ?string,\n  newFileContent: string,\n) {\n  // If the current file content is not provided, get it\n  if (currentFileContent == null) currentFileContent = (await readFileAsync(fileName)).toString()\n\n  if (currentFileContent != newFileContent) {\n    console.log('‚úçÔ∏è  written:  ' + fileName)\n    await writeFileAsync(fileName, newFileContent, 'utf8')\n  } else {\n    console.log('üìé  skipped:  ' + fileName)\n  }\n}\n"]}