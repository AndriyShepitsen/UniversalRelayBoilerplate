{"version":3,"sources":["../../../units/urb-base-tools/update-local-ip-for-app.js"],"names":["os","require","fs","IPAddress","process","argv","undefined","interfaces","networkInterfaces","addresses","k","k2","address","family","internal","push","length","console","log","updateIPInFile","fileName","searchString","newContentOfLine","fileLines","readFileSync","split","index","indexOf","writeFileSync","join"],"mappings":";;AAEA,GAAMA,IAAKC,QAAS,IAAT,CAAX;AACA,GAAMC,IAAKD,QAAS,IAAT,CAAX;;AAEA,GAAIE,WAAYC,QAAQC,IAAR,CAAa,CAAb,CAAhB;;AAEA,GAAKF,YAAcG,SAAnB,CAA+B;;AAE7B,GAAMC,YAAaP,GAAGQ,iBAAH,EAAnB;AACA,GAAMC,WAAY,EAAlB;AACA,IAAM,GAAIC,EAAV,GAAeH,WAAf,CAA4B;;AAE1B,IAAM,GAAII,GAAV,GAAgBJ,YAAWG,CAAX,CAAhB,CAA+B;;AAE7B,GAAME,SAAUL,WAAWG,CAAX,EAAcC,EAAd,CAAhB;AACA,GAAKC,QAAQC,MAAR,GAAmB,MAAnB,EAA6B,CAACD,QAAQE,QAA3C;AACEL,UAAUM,IAAV,CAAgBH,QAAQA,OAAxB;AACH;AACF;;AAED,GAAKH,UAAUO,MAAV,EAAoB,CAAzB,CAA6Bb,UAAYM,UAAU,CAAV,CAAZ;AAC9B;;AAED,GAAKN,YAAcG,SAAnB,CAA+B;AAC7BW,QAAQC,GAAR,CAAa,cAAgBf,SAA7B;AACAgB;AACE,+CADF;AAEE,+CAFF;AAGE;AACEhB,SADF;AAEE,iDALJ;;AAOAgB;AACE,cADF;AAEE,iCAFF;AAGE,kCAAoChB,SAApC,CAAgD,iBAHlD;;AAKAgB,eAAgB,QAAhB,CAA0B,OAA1B,CAAmC,QAAUhB,SAA7C;AACD,CAfD,IAeOc,SAAQC,GAAR,CAAa,iDAAb;;AAEP,QAASC,eAAT,CAAyBC,QAAzB,CAAmCC,YAAnC,CAAiDC,gBAAjD,CAAoE;AAClE,GAAIC,WAAYrB,GAAGsB,YAAH,CAAiBJ,QAAjB,CAA2B,MAA3B,EAAoCK,KAApC,CAA2C,IAA3C,CAAhB;AACA,GAAIC,OAAQ,CAAZ;;AAEA,MAAQA,MAAQH,UAAUP,MAA1B,CAAmC;AACjC,GAAKO,UAAUG,KAAV,EAAiBC,OAAjB,CAA0BN,YAA1B,EAA2C,CAAC,CAAjD,CAAqD;AACnD,GAAKE,UAAUG,KAAV,IAAqBJ,gBAA1B;AACEL,QAAQC,GAAR,CAAa,IAAME,QAAN,CAAiB,yBAA9B,EADF;AAEK;AACHG,UAAUG,KAAV,EAAmBJ,gBAAnB;AACApB,GAAG0B,aAAH,CAAkBR,QAAlB,CAA4BG,UAAUM,IAAV,CAAgB,IAAhB,CAA5B;;AAEAZ,QAAQC,GAAR;AACE,IAAME,QAAN,CAAiB,mCAAjB,CAAuDjB,SADzD;;AAGD;AACD;AACD,CAZD,IAYOuB;AACR;AACF","file":"update-local-ip-for-app.js","sourcesContent":["// @flow\n\nconst os = require( 'os' )\nconst fs = require( 'fs' )\n\nlet IPAddress = process.argv[2]\n\nif ( IPAddress === undefined ) {\n  // Find out IP address\n  const interfaces = os.networkInterfaces()\n  const addresses = []\n  for ( let k in interfaces ) {\n    // $FlowIssue it will be there\n    for ( let k2 in interfaces[k]) {\n      // $FlowIssue it will be there\n      const address = interfaces[k][k2]\n      if ( address.family === 'IPv4' && !address.internal )\n        addresses.push( address.address )\n    }\n  }\n\n  if ( addresses.length >= 0 ) IPAddress = addresses[0]\n}\n\nif ( IPAddress !== undefined ) {\n  console.log( 'IP Address:' + IPAddress )\n  updateIPInFile(\n    './ios/UniversalRelayBoilerplate/AppDelegate.m',\n    'jsCodeLocation = [NSURL URLWithString:@\"http:',\n    '  jsCodeLocation = [NSURL URLWithString:@\"http://' +\n      IPAddress +\n      ':8081/index.ios.bundle?platform=ios&dev=true\"];'\n  )\n  updateIPInFile(\n    './app/app.js',\n    'let graphQLServerURL = \"http://',\n    'let graphQLServerURL = \"http://' + IPAddress + ':5555/graphql\";'\n  )\n  updateIPInFile( './.env', 'HOST=', 'HOST=' + IPAddress )\n} else console.log( 'IP Address not specified and could not be found' )\n\nfunction updateIPInFile( fileName, searchString, newContentOfLine ) {\n  let fileLines = fs.readFileSync( fileName, 'utf8' ).split( '\\n' )\n  let index = 0\n\n  while ( index < fileLines.length ) {\n    if ( fileLines[index].indexOf( searchString ) > -1 ) {\n      if ( fileLines[index] === newContentOfLine )\n        console.log( '[' + fileName + '] is already up to date' )\n      else {\n        fileLines[index] = newContentOfLine\n        fs.writeFileSync( fileName, fileLines.join( '\\n' ) )\n\n        console.log(\n          '[' + fileName + '] has been updated with local IP ' + IPAddress\n        )\n      }\n      break\n    } else index++\n  }\n}\n"]}