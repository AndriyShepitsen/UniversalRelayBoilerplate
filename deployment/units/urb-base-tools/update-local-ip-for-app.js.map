{"version":3,"sources":["../../../units/urb-base-tools/update-local-ip-for-app.js"],"names":["os","require","fs","IPAddress","process","argv","undefined","interfaces","networkInterfaces","addresses","k","k2","address","family","internal","push","length","console","log","updateIPInFile","fileName","searchString","newContentOfLine","fileLines","readFileSync","split","index","indexOf","writeFileSync","join"],"mappings":";;AAEA,GAAMA,IAAKC,QAAQ,IAAR,CAAX;AACA,GAAMC,IAAKD,QAAQ,IAAR,CAAX;;AAEA,GAAIE,WAAYC,QAAQC,IAAR,CAAa,CAAb,CAAhB;;AAEA,GAAIF,WAAaG,SAAjB,CAA4B;;AAE1B,GAAMC,YAAaP,GAAGQ,iBAAH,EAAnB;AACA,GAAMC,WAAY,EAAlB;AACA,IAAK,GAAIC,EAAT,GAAcH,WAAd;AACE,IAAK,GAAII,GAAT,GAAeJ,YAAWG,CAAX,CAAf,CAA8B;AAC5B,GAAME,SAAUL,WAAWG,CAAX,EAAcC,EAAd,CAAhB;AACA,GAAIC,QAAQC,MAAR,GAAmB,MAAnB,EAA6B,CAACD,QAAQE,QAA1C,CAAoDL,UAAUM,IAAV,CAAeH,QAAQA,OAAvB;AACrD,CAJH;;AAMA,GAAIH,UAAUO,MAAV,EAAoB,CAAxB,CAA2Bb,UAAYM,UAAU,CAAV,CAAZ;AAC5B;;AAED,GAAIN,WAAaG,SAAjB,CAA4B;AAC1BW,QAAQC,GAAR,CAAY,cAAgBf,SAA5B;AACAgB;AACE,+CADF;AAEE,+CAFF;AAGE;AACEhB,SADF;AAEE,iDALJ;;AAOAgB;AACE,cADF;AAEE,iCAFF;AAGE,kCAAoChB,SAApC,CAAgD,iBAHlD;;AAKAgB,eAAe,QAAf,CAAyB,OAAzB,CAAkC,QAAUhB,SAA5C;AACD,CAfD,IAeOc,SAAQC,GAAR,CAAY,iDAAZ;;AAEP,QAASC,eAAT,CAAwBC,QAAxB,CAAkCC,YAAlC,CAAgDC,gBAAhD,CAAkE;AAChE,GAAIC,WAAYrB,GAAGsB,YAAH,CAAgBJ,QAAhB,CAA0B,MAA1B,EAAkCK,KAAlC,CAAwC,IAAxC,CAAhB;AACA,GAAIC,OAAQ,CAAZ;;AAEA,MAAOA,MAAQH,UAAUP,MAAzB,CAAiC;AAC/B,GAAIO,UAAUG,KAAV,EAAiBC,OAAjB,CAAyBN,YAAzB,EAAyC,CAAC,CAA9C,CAAiD;AAC/C,GAAIE,UAAUG,KAAV,GAAoBJ,gBAAxB;AACEL,QAAQC,GAAR,CAAY,IAAME,QAAN,CAAiB,yBAA7B,EADF;AAEK;AACHG,UAAUG,KAAV,EAAmBJ,gBAAnB;AACApB,GAAG0B,aAAH,CAAiBR,QAAjB,CAA2BG,UAAUM,IAAV,CAAe,IAAf,CAA3B;;AAEAZ,QAAQC,GAAR,CAAY,IAAME,QAAN,CAAiB,mCAAjB,CAAuDjB,SAAnE;AACD;AACD;AACD,CAVD,IAUOuB;AACR;AACF,C,0GAjDGvB,S,8FAMOO,C,sFACEC,E,uFAyBJQ,c","file":"update-local-ip-for-app.js","sourcesContent":["// @flow\n\nconst os = require('os')\nconst fs = require('fs')\n\nlet IPAddress = process.argv[2]\n\nif (IPAddress == undefined) {\n  // Find out IP address\n  const interfaces = os.networkInterfaces()\n  const addresses = []\n  for (var k in interfaces)\n    for (var k2 in interfaces[k]) {\n      const address = interfaces[k][k2]\n      if (address.family === 'IPv4' && !address.internal) addresses.push(address.address)\n    }\n\n  if (addresses.length >= 0) IPAddress = addresses[0]\n}\n\nif (IPAddress != undefined) {\n  console.log('IP Address:' + IPAddress)\n  updateIPInFile(\n    './ios/UniversalRelayBoilerplate/AppDelegate.m',\n    'jsCodeLocation = [NSURL URLWithString:@\"http:',\n    '  jsCodeLocation = [NSURL URLWithString:@\"http://' +\n      IPAddress +\n      ':8081/index.ios.bundle?platform=ios&dev=true\"];',\n  )\n  updateIPInFile(\n    './app/app.js',\n    'let graphQLServerURL = \"http://',\n    'let graphQLServerURL = \"http://' + IPAddress + ':5555/graphql\";',\n  )\n  updateIPInFile('./.env', 'HOST=', 'HOST=' + IPAddress)\n} else console.log('IP Address not specified and could not be found')\n\nfunction updateIPInFile(fileName, searchString, newContentOfLine) {\n  let fileLines = fs.readFileSync(fileName, 'utf8').split('\\n')\n  let index = 0\n\n  while (index < fileLines.length) {\n    if (fileLines[index].indexOf(searchString) > -1) {\n      if (fileLines[index] == newContentOfLine)\n        console.log('[' + fileName + '] is already up to date')\n      else {\n        fileLines[index] = newContentOfLine\n        fs.writeFileSync(fileName, fileLines.join('\\n'))\n\n        console.log('[' + fileName + '] has been updated with local IP ' + IPAddress)\n      }\n      break\n    } else index++\n  }\n}\n"]}