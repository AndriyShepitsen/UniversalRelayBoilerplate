{"version":3,"sources":["../../../../units/urb-example-inscriptio-client/relay/InscriptioAddMutation.js"],"names":["mutation","sharedUpdater","store","user","InscriptiosEdge","userProxy","get","id","connection","getConnection","insertEdgeAfter","nextClientMutationId","commit","environment","Inscriptio_LocationLat","Inscriptio_LocationLon","Inscriptio_Notes","clientMutationId","variables","input","updater","payload","getRootField","getLinkedRecord","optimisticUpdater","aInscriptio","create","setValue","setLinkedRecord"],"mappings":";;AAEA;AACA;;AAEA,GAAMA,+FAAN;;;;;;;;;;;;;;;;;;;AAmBA,QAASC,cAAT,CAAuBC,KAAvB,CAA8BC,IAA9B,CAAoCC,eAApC,CAAqD;AACnD,GAAMC,WAAYH,MAAMI,GAAN,CAAUH,KAAKI,EAAf,CAAlB;;AAEA,GAAMC,YAAa,gCAAkBC,aAAlB,CAAgCJ,SAAhC,CAA2C,4BAA3C,CAAnB;AACA,GAAIG,UAAJ,CAAgB;AACd,gCAAkBE,eAAlB,CAAkCF,UAAlC,CAA8CJ,eAA9C;AACD;AACF;;AAED,GAAIO,sBAAuB,CAA3B;;AAEA,QAASC,OAAT;AACEC,WADF;AAEEV,IAFF;AAGEW,sBAHF;AAIEC,sBAJF;AAKEC,gBALF;AAME;AACA,GAAMC,kBAAmBN,sBAAzB;;AAEA,MAAO,+BAAeE,WAAf,CAA4B;AACjCb,iBADiC;AAEjCkB,UAAW;AACTC,MAAO,CAAEL,6CAAF,CAA0BC,6CAA1B,CAAkDC,iCAAlD,CAAoEC,iCAApE,CADE,CAFsB;;;AAMjCG,OANiC,kBAMzBlB,KANyB,CAMlB;AACb,GAAMmB,SAAUnB,MAAMoB,YAAN,CAAmB,eAAnB,CAAhB;AACArB,cAAcC,KAAd,CAAqBC,IAArB,CAA2BkB,QAAQE,eAAR,CAAwB,iBAAxB,CAA3B;AACD,CATgC;;AAWjCC,iBAXiC,4BAWftB,KAXe,CAWR;AACvB,GAAMK,uCAAwCU,gBAA9C;AACA,GAAMQ,aAAcvB,MAAMwB,MAAN,CAAanB,EAAb,CAAiB,YAAjB,CAApB;AACAkB,YAAYE,QAAZ,CAAqBb,sBAArB,CAA6C,wBAA7C;AACAW,YAAYE,QAAZ,CAAqBZ,sBAArB,CAA6C,wBAA7C;AACAU,YAAYE,QAAZ,CAAqBX,gBAArB,CAAuC,kBAAvC;AACAS,YAAYE,QAAZ,CAAqBpB,EAArB,CAAyB,IAAzB;;AAEA,GAAMH,iBAAkBF,MAAMwB,MAAN;AACkBT,gBADlB;AAEtB,iBAFsB,CAAxB;;AAIAb,gBAAgBwB,eAAhB,CAAgCH,WAAhC,CAA6C,MAA7C;;AAEAxB,cAAcC,KAAd,CAAqBC,IAArB,CAA2BC,eAA3B;AACD,CA1BgC,CAA5B,CAAP;;AA4BD,C;;AAEc,CAAEQ,aAAF,C","file":"InscriptioAddMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation InscriptioAddMutation($input: InscriptioAddInput!) {\n    InscriptioAdd(input: $input) {\n      Viewer {\n        id\n      }\n      InscriptiosEdge {\n        cursor\n        node {\n          id\n          Inscriptio_LocationLat\n          Inscriptio_LocationLon\n          Inscriptio_Notes\n        }\n      }\n    }\n  }\n`\n\nfunction sharedUpdater(store, user, InscriptiosEdge) {\n  const userProxy = store.get(user.id)\n\n  const connection = ConnectionHandler.getConnection(userProxy, 'InscriptioList_Inscriptios')\n  if (connection) {\n    ConnectionHandler.insertEdgeAfter(connection, InscriptiosEdge)\n  }\n}\n\nlet nextClientMutationId = 0\n\nfunction commit(\n  environment,\n  user,\n  Inscriptio_LocationLat,\n  Inscriptio_LocationLon,\n  Inscriptio_Notes,\n) {\n  const clientMutationId = nextClientMutationId++\n\n  return commitMutation(environment, {\n    mutation,\n    variables: {\n      input: { Inscriptio_LocationLat, Inscriptio_LocationLon, Inscriptio_Notes, clientMutationId },\n    },\n\n    updater(store) {\n      const payload = store.getRootField('InscriptioAdd')\n      sharedUpdater(store, user, payload.getLinkedRecord('InscriptiosEdge'))\n    },\n\n    optimisticUpdater(store) {\n      const id = `client:InscriptioAdd:Inscriptio:${clientMutationId}`\n      const aInscriptio = store.create(id, 'Inscriptio')\n      aInscriptio.setValue(Inscriptio_LocationLat, 'Inscriptio_LocationLat')\n      aInscriptio.setValue(Inscriptio_LocationLon, 'Inscriptio_LocationLon')\n      aInscriptio.setValue(Inscriptio_Notes, 'Inscriptio_Notes')\n      aInscriptio.setValue(id, 'id')\n\n      const InscriptiosEdge = store.create(\n        `client:InscriptioAdd:InscriptiosEdge:${clientMutationId}`,\n        'InscriptiosEdge',\n      )\n      InscriptiosEdge.setLinkedRecord(aInscriptio, 'node')\n\n      sharedUpdater(store, user, InscriptiosEdge)\n    },\n  })\n}\n\nexport default { commit }\n"]}