{"version":3,"sources":["../../../../units/urb-base-universal/scripts/fetcher.js"],"names":["FetcherBase","url","operation","variables","fetch","method","headers","body","JSON","stringify","query","text","response","json","ServerFetcher","payloads","args","i","length","push","payload","ClientFetcher","shift"],"mappings":";;AAEA,4B;;;;;;AAMMA,W;;;;AAIJ,qBAAYC,GAAZ,CAAyB;AACvB,KAAKA,GAAL,CAAWA,GAAX;AACD,C;;AAEWC,S,CAAWC,S;AACEC,MAAM,KAAKH,GAAX,CAAgB;AACrCI,OAAQ,MAD6B;AAErCC,QAAS;AACP,eAAgB,kBADT,CAF4B;;AAKrCC,KAAMC,KAAKC,SAAL,CAAe,CAAEC,MAAOR,UAAUS,IAAnB,CAAyBR,mBAAzB,CAAf,CAL+B,CAAhB,C,SAAjBS,Q;;AAOCA,SAASC,IAAT,E;;;;AAIEC,a,SAAAA,a;AACX,uBAAYb,GAAZ,CAAiB;AACTA,GADS;;AAGf,MAAKc,QAAL,CAAgB,EAAhB,CAHe;AAIhB,C;;AAEcC,I,sCAAAA,I;AACPC,C,CAAI,KAAKF,QAAL,CAAcG,M;AACxB,KAAKH,QAAL,CAAcI,IAAd,CAAmB,IAAnB,E;AACqCH,I,WAA/BI,O;AACN,KAAKL,QAAL,CAAcE,CAAd,EAAmBG,OAAnB,C;AACOA,O;;;AAGA;AACP,MAAO,MAAKL,QAAZ;AACD,C,2BAjBgCf,W;;;AAoBtBqB,a,SAAAA,a;AACX,uBAAYpB,GAAZ,CAAiBc,QAAjB,CAA2B;AACnBd,GADmB;;AAGzB,OAAKc,QAAL,CAAgBA,QAAhB,CAHyB;AAI1B,C;;AAEcC,I,2CAAAA,I;AACT,KAAKD,QAAL,CAAcG,M;AACT,KAAKH,QAAL,CAAcO,KAAd,E;;;AAGaN,I,wFAZShB,W","file":"fetcher.js","sourcesContent":["// @flow weak\n\nimport 'isomorphic-fetch'\n\n// TODO: Update this when someone releases a real, production-quality solution\n// for handling universal rendering with Relay Modern. For now, this is just\n// enough to get things working.\n\nclass FetcherBase {\n  url: string\n  payloads: Array<any>\n\n  constructor(url: string) {\n    this.url = url\n  }\n\n  async fetch(operation, variables) {\n    const response = await fetch(this.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: operation.text, variables }),\n    })\n    return response.json()\n  }\n}\n\nexport class ServerFetcher extends FetcherBase {\n  constructor(url) {\n    super(url)\n\n    this.payloads = []\n  }\n\n  async fetch(...args) {\n    const i = this.payloads.length\n    this.payloads.push(null)\n    const payload = await super.fetch(...args)\n    this.payloads[i] = payload\n    return payload\n  }\n\n  toJSON() {\n    return this.payloads\n  }\n}\n\nexport class ClientFetcher extends FetcherBase {\n  constructor(url, payloads) {\n    super(url)\n\n    this.payloads = payloads\n  }\n\n  async fetch(...args) {\n    if (this.payloads.length) {\n      return this.payloads.shift()\n    }\n\n    return super.fetch(...args)\n  }\n}\n"]}