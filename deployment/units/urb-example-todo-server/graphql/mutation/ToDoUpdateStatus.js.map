{"version":3,"sources":["../../../../../units/urb-example-todo-server/graphql/mutation/ToDoUpdateStatus.js"],"names":["name","inputFields","id","type","ToDo_Complete","outputFields","ToDo","resolve","context","local_id","args","objectManager","rootValue","getOneObject","Viewer","parent","getViewerUserId","mutateAndGetPayload","update"],"mappings":";;AAEA;AACA;;AAEA,0C;AACA,qF;;AAEe,+CAA6B;AAC1CA,KAAM,kBADoC;;AAG1CC,YAAa;AACXC,GAAI,CAAEC,KAAM,+CAAR,CADO;AAEXC,cAAe,CAAED,KAAM,oDAAR,CAFJ,CAH6B;;;AAQ1CE,aAAc;AACZC,KAAM;AACJH,uBADI;AAEJI,QAAS;;;AAGPC,OAHO,WACLC,SADK,MACLA,QADK,IAEFC,KAFE;AAIMC,aAJN,OAILC,SAJK;AAKJD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC,CAAEX,GAAIO,QAAN,CAAnC,CALI,GAFL,CADM;;;AAWZK,OAAQ;AACNX,yBADM;AAENI,QAAS,iBAACQ,MAAD,CAASL,IAAT,CAAeF,OAAf,WAAqCG,cAArC,OAA0BC,SAA1B;AACPD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC;AACjCX,GAAIS,cAAcK,eAAd,EAD6B,CAAnC,CADO,GAFH,CAXI,CAR4B;;;;;AA4B1CC,oBAAqB;;AAEnBT,OAFmB,WACjBN,GADiB,OACjBA,EADiB,CACbE,aADa,OACbA,aADa;AAGNO,aAHM,OAGjBC,SAHiB;;AAKbH,QALa,CAKF,+BAAaP,EAAb,EAAiBA,EALf;;AAObS,cAAcO,MAAd,CAAqB,MAArB,CAA6B;AACjChB,GAAIO,QAD6B;AAEjCL,2BAFiC,CAA7B,CAPa;;;AAYZ,CAAEK,iBAAF,CAZY,2DA5BqB,CAA7B,C","file":"ToDoUpdateStatus.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLBoolean, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ToDoType from '../type/ToDoType'\nimport ViewerType from '../../../../units/urb-base-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoUpdateStatus',\n\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    ToDo_Complete: { type: new GraphQLNonNull(GraphQLBoolean) },\n  },\n\n  outputFields: {\n    ToDo: {\n      type: ToDoType,\n      resolve: (\n        { local_id },\n        { ...args },\n        context,\n        { rootValue: objectManager }\n      ) => objectManager.getOneObject('ToDo', { id: local_id }),\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', {\n          id: objectManager.getViewerUserId(),\n        }),\n    },\n  },\n\n  mutateAndGetPayload: async(\n    { id, ToDo_Complete },\n    context,\n    { rootValue: objectManager }\n  ) => {\n    const local_id = fromGlobalId(id).id\n\n    await objectManager.update('ToDo', {\n      id: local_id,\n      ToDo_Complete,\n    })\n\n    return { local_id }\n  },\n})\n"]}