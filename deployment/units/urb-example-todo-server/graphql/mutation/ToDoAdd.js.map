{"version":3,"sources":["../../../../../units/urb-example-todo-server/graphql/mutation/ToDoAdd.js"],"names":["name","inputFields","ToDo_Text","type","outputFields","ToDosEdge","edgeType","resolve","context","local_id","args","objectManager","rootValue","getOneObject","id","an_Object","getObjectList","ToDo_User_id","getViewerUserId","arr","cursor","cursorForObjectInConnection","node","Viewer","parent","mutateAndGetPayload","add","ToDo_Complete"],"mappings":";;AAEA;AACA;;AAEA,wD;AACA,qF;;AAEe,+CAA6B;AAC1CA,KAAM,SADoC;;AAG1CC,YAAa;AACXC,UAAW,CAAEC,KAAM,mDAAR,CADA,CAH6B;;;AAO1CC,aAAc;AACZC,UAAW;AACTF,KAAM,0BAAgBG,QADb;AAETC,QAAS,4BAAkCC,OAAlC,WAASC,SAAT,MAASA,QAAT,IAA0BC,KAA1B,uCAAwDC,cAAxD,OAA6CC,SAA7C;AACiBD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC,CAAEC,GAAIL,QAAN,CAAnC,CADjB,SACDM,SADC;;AAGWJ,cAAcK,aAAd,CAA4B,MAA5B,CAAoC;AACpDC,aAAcN,cAAcO,eAAd,EADsC,CAApC,CAHX,SAGDC,GAHC;;;AAOA;AACLC,OAAQT,cAAcU,2BAAd,CAA0C,MAA1C,CAAkDF,GAAlD,CAAuDJ,SAAvD,CADH;AAELO,KAAMP,SAFD,CAPA,2DAFA,CADC;;;;;AAiBZQ,OAAQ;AACNpB,yBADM;AAENI,QAAS,iBAACiB,MAAD,CAASd,IAAT,CAAeF,OAAf,WAAqCG,cAArC,OAA0BC,SAA1B;AACPD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC,CAAEC,GAAIH,cAAcO,eAAd,EAAN,CAAnC,CADO,GAFH,CAjBI,CAP4B;;;;AA+B1CO,oBAAqB,mCAAsBjB,OAAtB,WAASN,UAAT,OAASA,SAAT,IAA4CS,cAA5C,OAAiCC,SAAjC;AACID,cAAce,GAAd,CAAkB,MAAlB,CAA0B;AAC/CT,aAAcN,cAAcO,eAAd,EADiC;AAE/ChB,mBAF+C;AAG/CyB,cAAe,KAHgC,CAA1B,CADJ,SACblB,QADa;;AAMZ,CAAEA,iBAAF,CANY,4DA/BqB,CAA7B,C","file":"ToDoAdd.js","sourcesContent":["// @flow weak\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLNonNull } from 'graphql'\n\nimport ToDosConnection from '../type/ToDosConnection'\nimport ViewerType from '../../../../units/urb-base-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoAdd',\n\n  inputFields: {\n    ToDo_Text: { type: new GraphQLNonNull(GraphQLString) },\n  },\n\n  outputFields: {\n    ToDosEdge: {\n      type: ToDosConnection.edgeType,\n      resolve: async ({ local_id }, { ...args }, context, { rootValue: objectManager }) => {\n        const an_Object = await objectManager.getOneObject('ToDo', { id: local_id })\n\n        const arr = await objectManager.getObjectList('ToDo', {\n          ToDo_User_id: objectManager.getViewerUserId(),\n        })\n\n        return {\n          cursor: objectManager.cursorForObjectInConnection('ToDo', arr, an_Object),\n          node: an_Object,\n        }\n      },\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', { id: objectManager.getViewerUserId() }),\n    },\n  },\n\n  mutateAndGetPayload: async ({ ToDo_Text }, context, { rootValue: objectManager }) => {\n    const local_id = await objectManager.add('ToDo', {\n      ToDo_User_id: objectManager.getViewerUserId(),\n      ToDo_Text,\n      ToDo_Complete: false,\n    })\n    return { local_id }\n  },\n})\n"]}