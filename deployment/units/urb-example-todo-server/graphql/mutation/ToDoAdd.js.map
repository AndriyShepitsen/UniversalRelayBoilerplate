{"version":3,"sources":["../../../../../units/urb-example-todo-server/graphql/mutation/ToDoAdd.js"],"names":["name","inputFields","ToDo_Text","type","outputFields","ToDosEdge","edgeType","resolve","context","local_id","args","objectManager","rootValue","getOneObject","id","an_Object","getObjectList","ToDo_User_id","getViewerUserId","arr","cursor","cursorForObjectInConnection","node","Viewer","parent","mutateAndGetPayload","add","ToDo_Complete"],"mappings":";;AAEA;AACA;;AAEA,wD;AACA,qF;;AAEe,+CAA6B;AAC1CA,KAAM,SADoC;;AAG1CC,YAAa;AACXC,UAAW,CAAEC,KAAM,mDAAR,CADA,CAH6B;;;AAO1CC,aAAc;AACZC,UAAW;AACTF,KAAM,0BAAgBG,QADb;AAETC,QAAS;;;AAGPC,OAHO,WACLC,SADK,MACLA,QADK,IAEFC,KAFE;AAIMC,aAJN,OAILC,SAJK;;AAMiBD,cAAcE,YAAd,CAA4B,MAA5B,CAAoC;AAC1DC,GAAIL,QADsD,CAApC,CANjB,SAMDM,SANC;;;AAUWJ,cAAcK,aAAd,CAA6B,MAA7B,CAAqC;AACrDC,aAAcN,cAAcO,eAAd,EADuC,CAArC,CAVX,SAUDC,GAVC;;;AAcA;AACLC,OAAQT,cAAcU,2BAAd;AACN,MADM;AAENF,GAFM;AAGNJ,SAHM,CADH;;AAMLO,KAAMP,SAND,CAdA,2DAFA,CADC;;;;;AA4BZQ,OAAQ;AACNpB,yBADM;AAENI,QAAS,iBAAEiB,MAAF,CAAUd,IAAV,CAAgBF,OAAhB,WAAsCG,cAAtC,OAA2BC,SAA3B;AACPD,cAAcE,YAAd,CAA4B,MAA5B,CAAoC;AAClCC,GAAIH,cAAcO,eAAd,EAD8B,CAApC,CADO,GAFH,CA5BI,CAP4B;;;;;AA4C1CO,oBAAqB;;AAEnBjB,OAFmB,WACjBN,UADiB,OACjBA,SADiB;AAGNS,aAHM,OAGjBC,SAHiB;;AAKID,cAAce,GAAd,CAAmB,MAAnB,CAA2B;AAChDT,aAAcN,cAAcO,eAAd,EADkC;AAEhDhB,mBAFgD;AAGhDyB,cAAe,KAHiC,CAA3B,CALJ,SAKblB,QALa;;AAUZ,CAAEA,iBAAF,CAVY,4DA5CqB,CAA7B,C","file":"ToDoAdd.js","sourcesContent":["// @flow weak\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLNonNull } from 'graphql'\n\nimport ToDosConnection from '../type/ToDosConnection'\nimport ViewerType from '../../../../units/urb-base-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoAdd',\n\n  inputFields: {\n    ToDo_Text: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n\n  outputFields: {\n    ToDosEdge: {\n      type: ToDosConnection.edgeType,\n      resolve: async(\n        { local_id },\n        { ...args },\n        context,\n        { rootValue: objectManager }\n      ) => {\n        const an_Object = await objectManager.getOneObject( 'ToDo', {\n          id: local_id,\n        })\n\n        const arr = await objectManager.getObjectList( 'ToDo', {\n          ToDo_User_id: objectManager.getViewerUserId(),\n        })\n\n        return {\n          cursor: objectManager.cursorForObjectInConnection(\n            'ToDo',\n            arr,\n            an_Object\n          ),\n          node: an_Object,\n        }\n      },\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject( 'User', {\n          id: objectManager.getViewerUserId(),\n        }),\n    },\n  },\n\n  mutateAndGetPayload: async(\n    { ToDo_Text },\n    context,\n    { rootValue: objectManager }\n  ) => {\n    const local_id = await objectManager.add( 'ToDo', {\n      ToDo_User_id: objectManager.getViewerUserId(),\n      ToDo_Text,\n      ToDo_Complete: false,\n    })\n    return { local_id }\n  },\n})\n"]}