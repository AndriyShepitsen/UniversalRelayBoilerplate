type Ensayo implements Node {
  # The ID of an object
  id: ID!
  Ensayo_Title: String
  Ensayo_Description: String
  Ensayo_Content: String
}

input EnsayoAddInput {
  Ensayo_Content: String!
  Ensayo_Title: String!
  Ensayo_Description: String!
  clientMutationId: String
}

type EnsayoAddPayload {
  EnsayosEdge: EnsayosEdge
  Viewer: Viewer
  clientMutationId: String
}

input EnsayoDeleteInput {
  id: ID!
  clientMutationId: String
}

type EnsayoDeletePayload {
  deletedId: ID
  Viewer: Viewer
  clientMutationId: String
}

# A connection to a list of items.
type EnsayosConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EnsayosEdge]
}

# An edge in a connection.
type EnsayosEdge {
  # The item at the end of the edge
  node: Ensayo

  # A cursor for use in pagination
  cursor: String!
}

input EnsayoUpdateInput {
  id: ID!
  Ensayo_Content: String!
  Ensayo_Title: String!
  Ensayo_Description: String!
  clientMutationId: String
}

type EnsayoUpdatePayload {
  Ensayo: Ensayo
  clientMutationId: String
}

type Mutation {
  EnsayoAdd(input: EnsayoAddInput!): EnsayoAddPayload
  EnsayoDelete(input: EnsayoDeleteInput!): EnsayoDeletePayload
  EnsayoUpdate(input: EnsayoUpdateInput!): EnsayoUpdatePayload
  ToDoAdd(input: ToDoAddInput!): ToDoAddPayload
  ToDoDelete(input: ToDoDeleteInput!): ToDoDeletePayload
  ToDoListUpdateMarkAll(input: ToDoListUpdateMarkAllInput!): ToDoListUpdateMarkAllPayload
  ToDoUpdateRename(input: ToDoUpdateRenameInput!): ToDoUpdateRenamePayload
  ToDoUpdateStatus(input: ToDoUpdateStatusInput!): ToDoUpdateStatusPayload
}

# An object with a globally unique id.
interface Node {
  # The globally unique id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  node(id: ID!): Node
  Viewer: Viewer
}

type ToDo implements Node {
  # The ID of an object
  id: ID!
  ToDo_Text: String
  ToDo_Complete: Boolean
}

input ToDoAddInput {
  ToDo_Text: String!
  clientMutationId: String
}

type ToDoAddPayload {
  ToDoEdge: ToDosEdge
  Viewer: Viewer
  clientMutationId: String
}

input ToDoDeleteInput {
  id: ID!
  clientMutationId: String
}

type ToDoDeletePayload {
  deletedId: ID
  Viewer: Viewer
  clientMutationId: String
}

input ToDoListUpdateMarkAllInput {
  ToDo_Complete: Boolean!
  clientMutationId: String
}

type ToDoListUpdateMarkAllPayload {
  changedToDos: [ToDo]
  Viewer: Viewer
  clientMutationId: String
}

# A connection to a list of items.
type ToDosConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ToDosEdge]
}

# An edge in a connection.
type ToDosEdge {
  # The item at the end of the edge
  node: ToDo

  # A cursor for use in pagination
  cursor: String!
}

input ToDoUpdateRenameInput {
  id: ID!
  ToDo_Text: String!
  clientMutationId: String
}

type ToDoUpdateRenamePayload {
  ToDo: ToDo
  clientMutationId: String
}

input ToDoUpdateStatusInput {
  id: ID!
  ToDo_Complete: Boolean!
  clientMutationId: String
}

type ToDoUpdateStatusPayload {
  ToDo: ToDo
  Viewer: Viewer
  clientMutationId: String
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  User_IsAnonymous: Boolean
  UserToken2: String
  User_AccountName: String
  User_DisplayName: String
  User_Email: String
  User_PhoneNumberMobile: String
  Ensayos(after: String, first: Int, before: String, last: Int): EnsayosConnection
  Ensayo(id: ID): Ensayo
  ToDos(status: String = "any", after: String, first: Int, before: String, last: Int): ToDosConnection
  ToDo_TotalCount: Int
  ToDo_CompletedCount: Int
}
